{"/home/travis/build/npmtest/node-npmtest-phonegap/test.js":"/* istanbul instrument in package npmtest_phonegap */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-phonegap/lib.npmtest_phonegap.js":"/* istanbul instrument in package npmtest_phonegap */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_phonegap = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_phonegap = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-phonegap/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-phonegap && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_phonegap */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_phonegap\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_phonegap.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_phonegap.rollup.js'] =\n            local.assetsDict['/assets.npmtest_phonegap.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_phonegap.__dirname +\n                    '/lib.npmtest_phonegap.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-phonegap/phonegap/lib/main.js":"/*!\n * Module dependencies.\n */\n\nvar PhoneGap = require('./phonegap');\n\n/**\n * Expose npm main module.\n */\n\nmodule.exports = new PhoneGap();\n","/home/travis/build/npmtest/node-npmtest-phonegap/phonegap/lib/phonegap.js":"/*!\n * Module dependencies.\n */\n\nvar phonegapbuild = require('phonegap-build'),\n    events = require('events'),\n    util = require('util');\n\n/**\n * PhoneGap object.\n *\n * Events:\n *\n *   - `error` {Event} triggered with info compatible with console.error.\n *     - `e` {Error} describes the error.\n *   - `log` {Event} triggered with info compatible with console.log.\n *   - `warn` {Event} triggered with info compatible with console.warn.\n *   - `raw` {Event} trigger with info that should not be formatted.\n *   - `login` {Event} triggered when login credentials are needed.\n *     - `callback` {Function} is triggered with user credentials\n *       - `username` {String}\n *       - `password` {String}\n */\n\nfunction PhoneGap() {\n    // initialize PhoneGap\n    initialize.call(this);\n\n    // initialize each command and inject the `phonegap` dependency.\n    this.cordova = require('./phonegap/cordova').create(this);\n    this.create = require('./phonegap/create').create(this);\n    this.mode = require('./phonegap/mode').create(this);\n    this.template.list = require('./phonegap/template.list').create(this);\n    this.template.search = require('./phonegap/template.search').create(this);\n    this.remote.build = require('./phonegap/remote.build').create(this);\n    this.remote.install = require('./phonegap/remote.install').create(this);\n    this.remote.login = require('./phonegap/remote.login').create(this);\n    this.remote.logout = require('./phonegap/remote.logout').create(this);\n    this.remote.run = require('./phonegap/remote.run').create(this);\n    this.serve = require('./phonegap/serve').create(this);\n    this.app = this.serve;\n    this.version = require('./phonegap/version').create(this);\n    this.push = require('./phonegap/push').create(this);\n    this.share = require('./phonegap/share').create(this);\n\n    // set normal mode (not verbose and not quiet)\n    this.mode({ verbose: false });\n\n    // utility methods\n    this.util = {};\n    this.util.cordova = require('./cordova').cordova;\n}\n\nutil.inherits(PhoneGap, events.EventEmitter);\n\n/*!\n * PhoneGap prototype chain.\n */\n\nPhoneGap.prototype.remote = {};\nPhoneGap.prototype.template = {};\n\n/*!\n * Initialize PhoneGap.\n */\n\nfunction initialize() {\n    var self = this;\n\n    // error events must always have a listener.\n    // this should be an empty listener that quietly captures errors.\n    // users can also subscribe to the error event to receive and handle it.\n    self.on('error', function(e) {});\n\n    // reset all phonegapbuild event listeners\n    phonegapbuild.removeAllListeners();\n}\n\n/*!\n * Expose the PhoneGap object.\n */\n\nmodule.exports = PhoneGap;\n","/home/travis/build/npmtest/node-npmtest-phonegap/phonegap/lib/phonegap/cordova.js":"/*!\n * Module dependencies.\n */\n\nvar Command = require('./util/command'),\n    cordova = require('../cordova'),\n    fs = require('fs'),\n    path = require('path'),\n    shell = require('shelljs'),\n    util = require('util');\n\n/*!\n * Command setup.\n */\n\nmodule.exports = {\n    create: function(phonegap) {\n        return new CordovaCommand(phonegap);\n    }\n};\n\nfunction CordovaCommand(phonegap) {\n    return Command.apply(this, arguments);\n}\n\nutil.inherits(CordovaCommand, Command);\n\n/**\n * Execute a Cordova command.\n *\n * Execute an arbitrary Cordova CLI command.\n *\n * Options:\n *\n *   - `options` {Object}\n *     - `cmd` {String} is the exact Cordova command to execute.\n *     - `verbose` {Boolean} enables verbose output (cordova output).\n *   - [`callback`] {Function} is triggered after executing the command.\n *     - `e` {Error} is null unless there is an error.\n *\n * Returns:\n *\n *   {PhoneGap} for chaining.\n */\n\nCordovaCommand.prototype.run = function(options, callback) {\n    var self = this;\n    // require options\n    if (!options) throw new Error('requires option parameter');\n    if (!options.cmd) throw new Error('requires option.cmd parameter');\n    var cordovaCmd = options.cmd.split(\" \");\n\n    // append --save by default to phonegap plugin add/remove/rm\n    var pluginCommands = [\"add\", \"remove\", \"rm\"];\n    var pluginAlias = [\"plugin\", \"plugins\"];\n    if (pluginAlias.indexOf(cordovaCmd[1]) != -1 &&\n        cordovaCmd.indexOf(\"--save\") == -1 && cordovaCmd.indexOf(\"--no-save\") == -1 &&\n        pluginCommands.indexOf(cordovaCmd[2]) != -1) {\n        options.cmd = options.cmd.concat(\" --save\");\n    }\n    // default options.verbose\n    if (isCustomCommand(options)) {\n        // these commands can be silenced or verbose\n        // first, do whatever the user specified\n        // if the user didn't specify, then assume silence\n        options.verbose = options.verbose || false;\n    }\n    else {\n        // all other commands must be verbose, since we don't know what they do\n        if (options.cmd == 'cordova platform add browser') {\n            // silence output when we auto add browser platform on serve\n            options.verbose = false;\n        } else {\n            options.verbose = true;\n        }\n    }\n\n    // optional callback\n    callback = callback || function() {};\n\n    // validate options\n    if (!options.cmd.match(/^cordova/)) {\n        throw new Error('options.cmd must execute cordova');\n    }\n\n    // enable implicit adding of platforms when they're missing\n    self.addMissingPlatforms(options, function() {\n        // inject phonegap.js into the platforms if it's referenced\n        self.addPhoneGapJSWarning(options, function() {\n            self.execute(options, callback);\n        });\n    });\n\n    return this.phonegap;\n};\n\n/*!\n * Execute.\n */\n\nCordovaCommand.prototype.execute = function(options, callback) {\n    var self = this;\n\n    // in order to shell out to the cordova dependency, we must first find\n    // where the dependencies binary was installed.\n    //\n    // in npm < 3.x it is found in:\n    //   - `phonegap/node_modules/.bin/cordova`\n    //\n    // in npm >= 3.x it is either flattened or found in a local node_modules:\n    //   - `phonegap/node_modules/.bin/cordova`\n    //   - `/node_modules/.bin/cordova`\n    //     - where phonegap is found at `/node_modules/phonegap/`\n\n    // first try to find the cordova binary for npm < 3.x\n    var binPath = path.resolve(path.join(__dirname, '..', '..', 'node_modules', '.bin'));\n\n    // second try to find the cordova binary for npm >= 3.x\n    if (!fs.existsSync(path.join(binPath, 'cordova'))) {\n        binPath = path.resolve(path.join(__dirname, '..', '..', '..', '.bin'));\n    }\n\n    // It's probably from Electron spawn\n    if (!fs.existsSync(binPath)) {\n        binPath = path.resolve(path.join(__dirname, '..', '..', 'node_modules', 'cordova', 'bin'));\n    }\n\n    // Another case where it could be run from an electron spawn\n    if (!fs.existsSync(binPath)) {\n        binPath = path.resolve(path.join(__dirname, '..', '..', '..', 'cordova', 'bin'));\n    }\n\n    var command = options.cmd.split(' ')[0],           // 'cordova' process name (it may change one day)\n        cordovaCommand = path.join(binPath, command), // /path/to/node_modules/.bin/cordova\n        execOptions = { async: true, silent: true },\n        buffer = [];\n\n    // support file paths that include a space character\n    if (cordovaCommand.match(' ')) {\n        cordovaCommand = '\"' + cordovaCommand + '\"';\n    }\n\n    // append the arguments and options onto the command\n    cordovaCommand += ' ' + options.cmd.substring(command.length + 1);\n\n    // output the command being excuted\n    if (isCustomCommand(options)) {\n        var cleanCommand = options.cmd.replace(\"--no-telemetry\",\"\");\n        self.phonegap.emit('log', 'executing', '\\'' + cleanCommand + '\\' ...');\n    }\n\n    // shell out the command to cordova\n    var child = shell.exec(cordovaCommand, execOptions, function(code, output) {\n        var e;\n        if (code !== 0) {\n            e = new Error('PhoneGap received an error from the Cordova CLI:\\n' +\n                          '  Command: ' + cordovaCommand + '\\n' +\n                          '  Exit code: ' + code);\n            e.exitCode = code;\n            e.output = output;\n\n            // send error info back to pg desktop app\n            if (process.send)\n                process.send(e);\n\n            // on an error, display the entire output log\n            self.phonegap.emit('raw', buffer.join('\\n'));\n        }\n        else {\n            if (isCustomCommand(options)) {\n                self.phonegap.emit('log', 'completed',\n                                          '\\''+options.cmd+'\\'');\n            }\n        }\n        callback(e);\n    });\n\n    child.stdout.on('data', function(data) {\n        if (options.verbose) {\n            self.phonegap.emit('raw', data.toString('utf8'));\n        }\n        else {\n            buffer.push(data);\n        }\n    });\n\n    child.stderr.on('data', function(data) {\n        if (options.verbose) {\n            self.phonegap.emit('raw', data.toString('utf8'));\n        }\n        else {\n            buffer.push(data);\n        }\n    });\n};\n\n/**\n * Add Missing Platforms.\n *\n * There are a bunch of Cordova commands that require a platform to exist.\n * Since the user is running the command, we can assume that they want the\n * platform to be added to their application. So, why not just add it for them?\n *\n * Options:\n *\n *   - `options` {Object} is identical to the Cordova command input.\n *   - [`callback`] {Function} is triggered after executing the command.\n *     - `e` {Error} is null unless there is an error.\n */\n\nCordovaCommand.prototype.addMissingPlatforms = function(options, callback) {\n    var self = this;\n\n    // crazy regex to match any command that requires a platform and the\n    // list of platforms after the command. If the command is missing the\n    // platforms, then this regex will fail. That failure is a good thing\n    // because when the user doesn't list platforms, then we have nothing\n    // to add.\n    var match = options.cmd.match(/(prepare|compile|build|run|emulate) ([\\w ]+)/);\n    if (match) {\n        // get a list of the platforms that need to be added to the project\n        var cordovaAddCommand = 'cordova platform add --save ',\n            projectRootPath = cordova.util.isCordova();\n\n        // project root will be false if it is not a cordova directory\n        if (!projectRootPath) {\n            return callback(new Error('not a PhoneGap directory'));\n        }\n\n        var requestedPlatforms = match[2].trim().split(' '),\n            installedPlatforms = cordova.util.listPlatforms(projectRootPath),\n            missingPlatforms = diff(requestedPlatforms, installedPlatforms);\n\n        if (missingPlatforms.length > 0) {\n            cordovaAddCommand += missingPlatforms.join(' ');\n            self.phonegap.cordova({\n                cmd: cordovaAddCommand,\n                verbose: options.verbose,\n                internalCommand: true\n            }, callback);\n            return;\n        }\n    }\n\n    callback();\n};\n\n/**\n * Add phonegap.js.\n *\n * For backwards-compatibility, we will continue to support phonegap.js\n * includes in the HTML file. Soon this will be deprecated.\n *\n * Options:\n *\n *   - `options` {Object} is identical to the Cordova command input.\n *   - [`callback`] {Function} is triggered after executing the command.\n *     - `e` {Error} is null unless there is an error.\n */\n\nCordovaCommand.prototype.addPhoneGapJS = function(options, callback) {\n    var self = this;\n\n    var match = options.cmd.match(/(prepare|compile|build|run|emulate)[ ]*([\\w ]*)/);\n    if (match) {\n        // get a list of the platforms that need to be added to the project\n        var projectRootPath = cordova.util.isCordova(),\n            requestedPlatforms = match[2].trim().split(' ');\n\n        // project root will be false if it is not a cordova directory\n        if (!projectRootPath) {\n            return callback(new Error('not a PhoneGap directory'));\n        }\n\n        // if no platforms were provided, then use all of the platforms\n        // the regex will often match an empty string if there is trailing\n        // whitespace, which is why there is the second comparison\n        if (requestedPlatforms.length <= 0 || requestedPlatforms[0] === '') {\n            requestedPlatforms = cordova.util.listPlatforms(projectRootPath);\n        }\n\n        // for each platform, inject phonegap.js\n        requestedPlatforms.forEach(function(platform) {\n            var platformPath = path.join(projectRootPath, 'platforms', platform, 'platform_www'),\n                cordovaJSPath = path.join(platformPath, 'cordova.js'),\n                phonegapJSPath = path.join(platformPath, 'phonegap.js');\n\n            if (fs.existsSync(cordovaJSPath)) {\n                self.phonegap.emit('log', 'adding phonegap.js to the ' + platform + ' platform');\n                shell.cp('-f', cordovaJSPath, phonegapJSPath);\n            }\n        });\n    }\n\n    callback();\n};\n\n/**\n * Add phonegap.js DEPRECATION warning.\n *\n * Display DEPRECATION warning when the app references phonegap.js\n *\n * Options:\n *\n *   - `options` {Object} is identical to the Cordova command input.\n *   - [`callback`] {Function} is triggered after executing the command.\n *     - `e` {Error} is null unless there is an error.\n */\n\nCordovaCommand.prototype.addPhoneGapJSWarning = function(options, callback) {\n    var self = this;\n\n    var match = options.cmd.match(/(prepare|compile|build|run|emulate)/);\n    if (match) {\n        // search HTML files for phonegap.js references\n        var projectRootPath = cordova.util.isCordova();\n\n        // project root will be false if it is not a cordova directory\n        if (!projectRootPath) {\n            return callback(new Error('not a PhoneGap directory'));\n        }\n\n        var htmlGlob = path.join(projectRootPath, 'www', '*.html'),\n            matchedFiles = shell.grep('phonegap.js', htmlGlob).trim();\n\n        if (matchedFiles.length > 0) {\n            self.phonegap.emit('warn', 'phonegap.js support will soon be removed.');\n            self.phonegap.emit('warn', 'please replace \\'phonegap.js\\' references with \\'cordova.js\\'');\n\n            self.addPhoneGapJS(options, callback);\n        }\n        else {\n            callback();\n        }\n    }\n    else {\n        callback();\n    }\n};\n\n/*!\n * Return elements that are different between both arrays.\n *\n * If used elsewhere, we should consider extending the Array with:\n *     Array.prototype.diff = function(array2) { ... );\n */\n\nfunction diff(array1, array2) {\n    return array1.filter(function(i) {\n        return array2.indexOf(i) < 0;\n    });\n}\n\n/*!\n * Custom Command Check\n *\n * Some Cordova commands, we intercept and provide additional functionality.\n * This method abstracts the checking of those commands.\n *\n * Options:\n *\n *   - `options` {Object} same and provided to the CordovaCommand instance.\n *\n * Returns:\n *\n *   {Boolean}\n */\n\nfunction isCustomCommand(options) {\n    // default options.verbose\n    return (options.internalCommand ||\n            options.cmd.match(/(prepare|compile|build|run|emulate)/));\n}\n","/home/travis/build/npmtest/node-npmtest-phonegap/phonegap/lib/phonegap/util/command.js":"/**\n * Base Command.\n *\n * > All your base are belong to us.\n *\n * All commands should inherit from the base `Command` object.\n *\n * This object handles the dependency injection of the `phonegap` object.\n *\n * This has two major benefits:\n *   1. Allows `PhoneGap` to create instances. This is helpful for testing.\n *   2. Allows test framework to mock public interfaces during tests.\n *\n * Options:\n *\n *   - `phonegap` {Object} is the instance of `PhoneGap` for this command.\n *\n * Returns:\n *\n *   {Function} that will call the inheriting class' `run` function.\n */\n\nfunction Command(phonegap) {\n    this.phonegap = phonegap;\n\n    var self = this;\n    return function() {\n        return self.run.apply(self, arguments);\n    };\n}\n\nCommand.prototype.run = function(options, callback) {\n    // subclasses should override this function\n};\n\n/*!\n * Expose module.\n */\n\nmodule.exports = Command;\n","/home/travis/build/npmtest/node-npmtest-phonegap/phonegap/lib/cordova/index.js":"/*!\n * Module dependencies.\n */\n\nvar fs = require('fs'),\n    path = require('path');\n\n/**\n * Cordova CLI API.\n */\n\nmodule.exports.cordova = require('cordova');\n\n/**\n * Cordova Lib.\n */\n\nmodule.exports.lib = require('cordova').cordova_lib;\n\n// set the binary name of the Cordova CLI to phonegap\nmodule.exports.lib.binname = require(path.join(__dirname, '..', '..', 'package.json')).name;\n\n/**\n * Cordova Utility Module.\n *\n * We should consider exposing this interface in the cordova module.\n *\n * Until then, we will manually define the methods that we need to use.\n */\n\nmodule.exports.util = {\n    isCordova: require('cordova').cordova_lib.cordova.findProjectRoot,\n\n    // borrowed from the apache/cordova-lib utility implementation, since it is\n    // not pubicly accessible:\n    // https://github.com/apache/cordova-lib/blob/master/cordova-lib/src/cordova/util.js\n    listPlatforms: function(project_dir) {\n        var platforms_dir = path.join(project_dir, 'platforms');\n        if ( !fs.existsSync(platforms_dir)) {\n            return [];\n        }\n        var subdirs = fs.readdirSync(platforms_dir);\n        return subdirs;\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/phonegap/lib/phonegap/create.js":"/*!\n * Module dependencies.\n */\n\nvar Command = require('./util/command'),\n    config = require('../common/config'),\n    cordova = require('../cordova').cordova,\n    cordovaLib = require('../cordova').lib,\n    network = require('./util/network'),\n    shell = require('shelljs'),\n    path = require('path'),\n    util = require('util'),\n    fs = require('fs');\n\n/*!\n * Command setup.\n */\n\nmodule.exports = {\n    create: function(phonegap) {\n        return new CreateCommand(phonegap);\n    }\n};\n\nfunction CreateCommand(phonegap) {\n    return Command.apply(this, arguments);\n}\n\nutil.inherits(CreateCommand, Command);\n\n/**\n * Create a New App.\n *\n * Creates an project on the local filesystem.\n * This project is backwards compatible with Apache Cordova projects.\n *\n * Options:\n *\n *   - `options` {Object} is data required to create an app\n *     - `path` {String} is a directory path for the app.\n *     - `name` {String} is the application name (default: 'helloworld')\n *     - `id` {String} is the package name (default: 'com.phonegap.hello-world')\n *     - `config` {Object} is a JSON configuration object (default: {})\n *     - `link-to` {String} is a path to a project to link (default: undefined)\n *     - `copy-from` {String} is a path to a project to copy (default: undefined)\n *   - [`callback`] {Function} is triggered after creating the app.\n *     - `e` {Error} is null unless there is an error.\n *\n * Returns:\n *\n *   {PhoneGap} for chaining.\n */\n\nCreateCommand.prototype.run = function(options, callback) {\n    // require options\n    if (!options) throw new Error('requires option parameter');\n    if (!options.path) throw new Error('requires option.path parameter');\n\n    // optional callback\n    callback = callback || function() {};\n\n    // validate options\n    options.path = path.resolve(options.path.toString());\n    options.name = options.name || 'helloworld';\n    options.id = options.id || 'com.phonegap.helloworld';\n\n    // create app\n    this.execute(options, callback);\n\n    return this.phonegap;\n};\n\n/*!\n * Execute.\n */\n\nCreateCommand.prototype.execute = function(options, callback) {\n    var self = this;\n\n    // validate options.template\n    options.template = (typeof options.template === 'string') ? options.template : null;\n\n    // skip when the user links to an external template,\n    // otherwise use the default Hello World template or a specified one.\n    if (!declaresExternalTemplate(options)) {\n        // create app using a user-defined or default template\n        options.template = getTemplateInfo(options.template || 'hello-world');\n    }\n\n    // validate options.config\n    // ignore objects with no properties `{}` because this cleans up\n    // the cordova-cli calls and prevents unexpected errors since thec\n    // cordova-cli expects the config to always be the fourth argument.\n    if (options.config && Object.keys(options.config).length > 0) {\n        // the config argument is a JSON string, which means it must be properly\n        // escaped for the command-line\n        options.config = JSON.stringify(options.config).replace(/\"/g, '\\\\\"');\n    }\n    else {\n        options.config = undefined;\n    }\n\n    // construct the cordova create command\n    var cordovaCommand = 'cordova create';\n    [ options.path, options.id, options.name, options.config ].forEach(function(value) {\n        if (typeof value !== 'undefined') {\n            cordovaCommand += ' \"$value\"'.replace('$value', value);\n        }\n    });\n\n    // use --copy-from (or -src) if it existed in the original command\n    if (options['copy-from']) {\n        cordovaCommand += ' --copy-from=\"%s\"'.replace('%s', options['copy-from']);\n    }\n\n    // use --link-to if it existed in the original command\n    if (options['link-to']) {\n        cordovaCommand += ' --link-to=\"%s\"'.replace('%s', options['link-to']);\n    }\n\n    // use --template if it exists\n    if (options.template) {\n        cordovaCommand += ' --template=\"%s\"'.replace('%s', options.template);\n    }\n\n    // use cordova to create the project from the command-line\n    self.phonegap.cordova({ cmd: cordovaCommand }, function(e) {\n        if (e) {\n            // do not emit this error because it'll be handled by\n            // the `phonegap.cordova` function.\n            callback(e);\n            return;\n        }\n\n        // do not alter linked projects\n        if (!options['link-to']) {\n            var configXML = {\n                projectPath: path.join(options.path, 'config.xml'),\n                wwwPath: path.join(options.path, 'www', 'config.xml')\n            };\n\n            // move config.xml to root of project for legacy app templates\n            if (fs.existsSync(configXML.wwwPath)) {\n                fs.renameSync(configXML.wwwPath, configXML.projectPath);\n            }\n\n            // update config.xml with app info\n            if (fs.existsSync(configXML.projectPath)) {\n                var configParser = new cordovaLib.configparser(configXML.projectPath);\n                configParser.setPackageName(options.id);\n                configParser.setName(options.name);\n                configParser.write();\n            }\n            else {\n                self.phonegap.emit('warn', 'could not update ' + configXML.projectpath);\n            }\n        }\n\n        callback(e);\n    });\n};\n\n/*!\n * Check if external project template declared in options.\n *\n * An external template is a template that is not included in package.json.\n */\n\nfunction declaresExternalTemplate(options) {\n    // return true if a template is delcared in the options\n    return (\n        options['copy-from'] ||\n        options['link-to'] ||\n        (\n            options.config &&\n            options.config.lib &&\n            options.config.lib.www\n        )\n    );\n}\n\n/*!\n * Get Template Info.\n *\n * Attempts to get the template information and generates the UUID used by\n * Cordova's fetching system.\n *\n * If an error occurs, an error object is returned instead.\n *\n * Returns:\n *\n *   {Object | Error}\n */\n\nfunction getTemplateInfo(name) {\n    var templates = require('../../package.json').templates,\n        template;\n\n    try {\n        template = templates[name].npm;\n    }\n    catch(e) {\n        // return null for non-string values otherwise the name\n        template = (typeof name === 'string') ? name : undefined;\n    }\n\n    return template;\n}\n","/home/travis/build/npmtest/node-npmtest-phonegap/phonegap/lib/common/config.js":"/**\n * Configuration Files.\n *\n * Access configuration files on the local (project) and global (system) level.\n */\n\nmodule.exports = {\n    local: require('./config/local'),\n    global: require('./config/global')\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/phonegap/lib/common/config/local.js":"/*\n * Module dependencies.\n */\n\nvar fs = require('fs'),\n    path = require('path'),\n    shell = require('shelljs');\n\n/**\n * Load the project configuration file.\n *\n * Loads the project configuration file as a JSON object.\n *\n * Options:\n *\n *   - `callback` {Function} is triggered after loading the configuration file.\n *     - `e` {Error} is null unless there is an error.\n *     - `data` {Object} is a JSON representation of the configuration file.\n */\n\nmodule.exports.load = function(callback) {\n    // require callback parameter\n    if (!callback) throw new Error('missing callback parameter');\n\n    var filepath = path.join(process.cwd(), '.cordova', 'config.json');\n\n    fs.readFile(filepath, function(e, data) {\n        // when the file does not exist, return an empty data object\n        data = JSON.parse(data || '{}');\n        callback(null, data);\n    });\n};\n\n/**\n * Save the project configuration file.\n *\n * Saves the project configuration file as a stringified representation of\n * the JSON object.\n *\n * Options:\n *\n *   - `data` {Object} is the configuration data to save.\n *   - `callback` {Object} is trigger after the file is saved.\n *     - `e` {Error} is null unless there is an error.\n */\n\nmodule.exports.save = function(data, callback) {\n    // required parameters\n    if (!data) throw new Error('missing data parameter');\n    if (!callback) throw new Error('missing callback parameter');\n\n    var filepath = path.join(process.cwd(), '.cordova', 'config.json');\n\n    // create the directory path when it does not exist\n    shell.mkdir('-p', path.dirname(filepath));\n\n    fs.writeFile(filepath, JSON.stringify(data), function(e) {\n        callback(e);\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/phonegap/lib/common/config/global.js":"/*\n * Module dependencies.\n */\n\nvar shell = require('shelljs'),\n    path = require('path'),\n    fs = require('fs');\n\n/**\n * Path to config directory.\n *\n * By default, the config is shared with PhoneGap's config at: ~/.phonegap/\n *\n * You can override this desired.\n */\n\nmodule.exports.path = path.join(\n    process.env[(process.platform == 'win32') ? 'USERPROFILE' : 'HOME'],\n    '.cordova'\n);\n\n/**\n * Load the config.\n *\n * Returns the content of configuration file.\n * The configuration file is found at `PATH/config.json`.\n * The value of `PATH` is defined by `config.path`.\n *\n * Options:\n *\n *   - `callback` {Function} is triggered with the config data.\n *     - `e` {Error} is null when there is no error.\n *     - `data` {Object} is the JSON content of configuration file.\n */\n\nmodule.exports.load = function(callback) {\n    // require callback\n    if (!callback) {\n        throw new Error('missing callback argument');\n    }\n\n    var filepath = path.join(module.exports.path, 'config.json');\n\n    // check if config exists\n    fs.exists(filepath, function(exists) {\n        if (exists) {\n            // read config file\n            fs.readFile(filepath, function(e, data) {\n                if (e) {\n                    callback(e);\n                    return;\n                }\n\n                // return config file object\n                data = JSON.parse(data);\n                data.phonegap = data.phonegap || {};\n                callback(null, data);\n            });\n        }\n        else {\n            // create config file\n            var data = { phonegap: {} };\n            module.exports.save(data, function(e) {\n                if (e) {\n                    callback(e);\n                    return;\n                }\n\n                // return config file object\n                callback(null, data);\n            });\n        }\n    });\n};\n\n/**\n * Save the config.\n *\n * Write the data object as a string to the configuration document.\n *\n * Options:\n *\n *   - `data` {Object} is the data to append to the config file.\n *   - `callback` {Function} is trigger after the save operation.\n *     - `e` {Error} is null when there is no error.\n */\n\nmodule.exports.save = function(data, callback) {\n    // require data\n    if (!data) {\n        throw new Error('missing data argument');\n    }\n\n    // require callback\n    if (!callback) {\n        throw new Error('missing callback argument');\n    }\n\n    var filepath = path.join(module.exports.path, 'config.json');\n\n    // create the path\n    shell.mkdir('-p', path.dirname(filepath));\n\n    // write to config file\n    fs.writeFile(filepath, JSON.stringify(data), function(e) {\n        callback(e);\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/phonegap/lib/phonegap/util/network.js":"/*!\n * Module dependencies.\n */\n\nvar dns = require('dns');\n\n/**\n * Check network connectivity.\n *\n * Options:\n *\n *   - `callback` {Function} triggered on completion.\n *     - `online` {Boolean} is true if connected to the Internet otherwise false.\n */\n\nmodule.exports.isOnline = function(callback) {\n    // This approach is very quick and appear to work correctly.\n    // However, the node.js documentation warns that `lookup`\n    // may not use the network connection.\n    //\n    // Reference: http://stackoverflow.com/questions/15270902/\n    //            check-for-internet-connectivity-in-nodejs\n    dns.lookup('google.com', function(e) {\n        if (e && e.code === 'ENOTFOUND') {\n            callback(false);\n        }\n        else {\n            callback(true);\n        }\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/phonegap/lib/phonegap/mode.js":"/*!\n * Module dependencies.\n */\n\nvar phonegapbuild = require('./util/phonegap-build'),\n    Command = require('./util/command'),\n    cordova = require('../cordova').cordova,\n    util = require('util');\n\n/*!\n * Command setup.\n */\n\nmodule.exports = {\n    create: function(phonegap) {\n        return new ModeCommand(phonegap);\n    }\n};\n\nfunction ModeCommand(phonegap) {\n    return Command.apply(this, arguments);\n}\n\nutil.inherits(ModeCommand, Command);\n\n/**\n * Mode configuration.\n *\n * Customize the running mode.\n *\n * Options:\n *\n *   - `options` {Object}\n *     - `verbose` {Boolean} is true to enable additional output from dependencies..\n *   - [`callback`] {Function} is triggered after completion.\n *     - `e` {Error} is null unless there is an error.\n *\n * Returns:\n *\n *   {PhoneGap} for chaining.\n */\n\nModeCommand.prototype.run = function(options, callback) {\n    // require options\n    if (!options) throw new Error('requires option parameter');\n\n    // optional callback\n    callback = callback || function() {};\n\n    // update mode\n    this.execute(options, callback);\n\n    return this.phonegap;\n};\n\n/*!\n * Execute.\n */\n\nModeCommand.prototype.execute = function(options, callback) {\n    var self = this.phonegap;\n\n    // reset the listeners on the a new PhoneGap instance\n    bind.reset();\n\n    // verbose output\n    if (options.verbose) {\n        bind.normal(self);\n        bind.verbose(self);\n    }\n    // quiet output\n    else if (options.quiet) {\n        // shh...\n    }\n    // normal output\n    else {\n        bind.normal(self);\n    }\n};\n\n/*!\n * Bind listening modes.\n */\n\nvar bind = {\n    /*!\n     * Reset the listening modes.\n     */\n    reset: function() {\n        phonegapbuild.removeAllListeners('log');\n        phonegapbuild.removeAllListeners('warn');\n        phonegapbuild.removeAllListeners('error');\n        phonegapbuild.removeAllListeners('raw');\n        cordova.removeAllListeners('log');\n        cordova.removeAllListeners('warn');\n        cordova.removeAllListeners('before_library_download');\n        cordova.removeAllListeners('library_download');\n        cordova.removeAllListeners('after_library_download');\n    },\n\n    /*!\n     * Normal output level events.\n     */\n    normal: function(self) {\n        phonegapbuild.on('log', function() {\n            var args = Array.prototype.slice.call(arguments);\n            args.unshift('log');\n            self.emit.apply(self, args);\n        });\n\n        phonegapbuild.on('warn', function() {\n            var args = Array.prototype.slice.call(arguments);\n            args.unshift('warn');\n            self.emit.apply(self, args);\n        });\n\n        phonegapbuild.on('error', function(e) {\n            var args = Array.prototype.slice.call(arguments);\n            args.unshift('error');\n            self.emit.apply(self, args);\n        });\n\n        phonegapbuild.on('raw', function() {\n            var args = Array.prototype.slice.call(arguments);\n            args.unshift('raw');\n            self.emit.apply(self, args);\n        });\n\n        cordova.on('before_library_download', function(data) {\n            self.emit('log', util.format('missing library %s/%s/%s',\n                data.id, data.platform, data.version\n            ));\n            self.emit('log', util.format('downloading %s...', data.url));\n        });\n\n        cordova.on('library_download', function() {\n            // do nothing\n        });\n\n        cordova.on('after_library_download', function() {\n            // do nothing\n        });\n    },\n\n    /*!\n     * Verbose output level events.\n     */\n    verbose: function(self) {\n        cordova.on('log', function() {\n            var args = Array.prototype.slice.call(arguments);\n            args.unshift('log');\n            self.emit.apply(self, args);\n        });\n\n        cordova.on('warn', function() {\n            var args = Array.prototype.slice.call(arguments);\n            args.unshift('log');\n            self.emit.apply(self, args);\n        });\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/phonegap/lib/phonegap/util/phonegap-build.js":"/*!\n * Module dependencies.\n */\n\nvar phonegapbuild = require('phonegap-build');\n\n/*!\n * Expose singleton PhoneGapBuild object.\n */\n\nmodule.exports = phonegapbuild;\n","/home/travis/build/npmtest/node-npmtest-phonegap/phonegap/lib/phonegap/template.list.js":"/*!\n * Module dependencies.\n */\n\nvar Command = require('./util/command'),\n    templates = require('../../package.json').templates,\n    util = require('util');\n\n/*!\n * Command setup.\n */\n\nmodule.exports = {\n    create: function(phonegap) {\n        return new TemplateListCommand(phonegap);\n    }\n};\n\nfunction TemplateListCommand(phonegap) {\n    return Command.apply(this, arguments);\n}\n\nutil.inherits(TemplateListCommand, Command);\n\n/**\n * List Available Templates.\n *\n * Lists the templates available to the user.\n *\n * Options:\n *\n *   - `options` {Object} is currently unused (but required for consistency).\n *   - [`callback`] {Function} is triggered after completion\n *     - `e` {Error} is null unless there is an error.\n *     - `data` {Object}\n *       - `templates` {Array} is a list of the template names\n *\n * Returns:\n *\n *   {PhoneGap} for chaining.\n */\n\nTemplateListCommand.prototype.run = function(options, callback) {\n    var self = this;\n\n    // require options\n    if (!options) throw new Error('requires options parameter');\n\n    // optional callback\n    callback = callback || function() {};\n\n    // collect the templates\n    var data = { templates: [] };\n    for (var key in templates) {\n        var template = templates[key];\n        template.name = key;\n        data.templates.push(template);\n    }\n\n    // trigger async callback\n    process.nextTick(function() {\n        callback(null, data);\n    });\n\n    return self.phonegap;\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/phonegap/lib/phonegap/template.search.js":"/*!\n * Module dependencies.\n */\n\nvar Command = require('./util/command'),\n    util = require('util'),\n    opener = require('./util/opener');\n\n/*!\n * Command setup.\n */\n\nmodule.exports = {\n    create: function(phonegap) {\n        return new TemplateSearchCommand(phonegap);\n    }\n};\n\nfunction TemplateSearchCommand(phonegap) {\n    return Command.apply(this, arguments);\n}\n\nutil.inherits(TemplateSearchCommand, Command);\n\n/**\n * Search the available templates.\n *\n * At the moment, there is no way to filter templates by name. Instead,\n * we must show all templates that use the keyword `cordova:template`.\n * The Apache Cordova project will be adding template search functionality\n * to their plugin website soon.\n *\n * Options:\n *\n *   - `options` {Object} is currently unused (but required for consistency).\n *   - [`callback`] {Function} is triggered after completion\n *     - `e` {Error} is null unless there is an error.\n *     - `data` {Object}\n *\n * Returns:\n *\n *   {PhoneGap} for chaining.\n */\n\nTemplateSearchCommand.prototype.run = function(options, callback) {\n    var self = this,\n        data = {};\n\n    // require options\n    if (!options) throw new Error('requires options parameter');\n\n    // optional callback\n    callback = callback || function() {};\n\n    // npmjs.com URL to filter by keyword\n    var url = 'https://www.npmjs.com/browse/keyword/cordova:template';\n\n    // open the URL to filter by keywords. This isn't ideal, but it's\n    // the best that we can do until Apache Cordova improves plugins.cordova.io\n    opener.open(url);\n\n    // trigger async callback\n    process.nextTick(function() {\n        callback(null, data);\n    });\n\n    return self.phonegap;\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/phonegap/lib/phonegap/util/opener.js":"/*\n * Module dependencies.\n */\n\nvar opener = require('opener');\n\n/**\n * Export opener in a way that we can test using `spyOn`.\n */\n\nmodule.exports.open = opener;\n","/home/travis/build/npmtest/node-npmtest-phonegap/phonegap/lib/phonegap/remote.build.js":"/*!\n * Module dependencies\n */\n\nvar Command = require('./util/command'),\n    project = require('./util/project'),\n    platforms = require('./util/platform'),\n    phonegapbuild = require('./util/phonegap-build'),\n    util = require('util');\n\n/*!\n * Command setup.\n */\n\nmodule.exports = {\n    create: function(phonegap) {\n        return new RemoteBuildCommand(phonegap);\n    }\n};\n\nfunction RemoteBuildCommand(phonegap) {\n    return Command.apply(this, arguments);\n}\n\nutil.inherits(RemoteBuildCommand, Command);\n\n/**\n * Build an App Remotely.\n *\n * Uses PhoneGap/Build to build the application.\n *\n * Options:\n *\n *   - `options` {Object}\n *   - `options.platforms` {Array} is a list of platforms (limited to 1).\n *   - [`options.protocol`] {String} is the protocol, e.g. 'http' or 'https'.\n *   - [`options.host`] {String} is the host address, e.g. 'build.phonegap.com'.\n *   - [`options.port`] {String} is the port, e.g. '80' or '443'.\n *   - [`options.path`] {String} is the api path, e.g. '/api/v1'\n *   - [`options.proxy`] {String} is proxy for requests through, e.g. 'http://myproxy.com'\n *   - [`callback`] {Function} is triggered after completion.\n *     - `e` {Error} is null unless there is an error.\n *     - `data` {Object} data returned by PhoneGap/Build API.\n *\n * Returns:\n *\n *   {PhoneGap} for chaining.\n */\n\nRemoteBuildCommand.prototype.run = function(options, callback) {\n    // require options\n    if (!options) throw new Error('requires option parameter');\n    if (!options.platforms) throw new Error('requires option.platforms parameter');\n\n    // optional callback\n    callback = callback || function() {};\n\n    // build app\n    this.execute(options, callback);\n\n    return this.phonegap;\n};\n\n/*!\n * Execute.\n */\n\nRemoteBuildCommand.prototype.execute = function(options, callback) {\n    var self = this,\n        platform = platforms.names(options.platforms)[0];\n\n    // change to project directory and delegate errors\n    if (!project.cd({ emitter: self.phonegap, callback: callback })) return;\n\n    // add platforms argument but keep the other options\n    options.platforms = [ platform.remote ];\n\n    phonegapbuild.build(options, function(e, data) {\n        if (e) {\n            callback(e);\n            return;\n        }\n\n        self.phonegap.emit('log', platform.human, 'build complete');\n        callback(null, data);\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/phonegap/lib/phonegap/util/project.js":"/*!\n * Module dependencies.\n */\n\nvar fs = require('fs'),\n    path = require('path'),\n    cordova = require('../cordova').cordova,\n    cdvutil = require('../../cordova').util;\n\n/*!\n * Global constants.\n */\n\nvar HOME = process.env[(process.platform == 'win32') ? 'USERPROFILE' : 'HOME'];\n\n/**\n * Change Process to Project Root.\n *\n * Options:\n *\n *   - `delegate` {Object} error delegate.\n *     - `emitter` {EventEmitter} will emit an `error` event on error.\n *     - `callback` {Function} will be called on an error.\n *       - `e` {Error} describes the error.\n *\n * Returns:\n *\n *   - `null` {Object} if the project root is not found.\n *   - `path` {String} is the full path to the project root.\n */\n\nmodule.exports.cd = function(delegate) {\n    var currentPath = process.cwd();\n\n    // is the current working directory the PhoneGap project?\n    if (cdvutil.isCordova(currentPath)) {\n        return currentPath;\n    }\n\n    // if not, step back a directory\n    process.chdir(path.join(currentPath, '..'));\n\n    // recursively try again, unless we're not at the system root (/ or C:/ or whatever)\n    if (process.cwd() !== currentPath) {\n        return module.exports.cd(delegate);\n    }\n\n    // notify delegate of error because we are at the system root\n    var e = new Error('project directory could not be found');\n    delegate.emitter.emit('error', e);\n    delegate.callback(e);\n\n    return null;\n};\n\n/**\n * Check Path to be a Cordova Project.\n *\n * Options:\n *\n *   - `projectPath` {String} is path checked.\n *\n * Returns:\n *\n *   - {Boolean} true if valid Cordova project.\n */\n\n/**\n *  Read Phonegap's package.json file and return as an object\n *\n *  Options:\n *\n *    -  none\n *\n *  Returns\n *\n *    - {object} containing package.json data\n */\nmodule.exports.readPackage = function() {\n    // load package.json\n    var packagePath = path.join(__dirname, '..', '..', '..', 'package.json');\n\n    return packageJSON = JSON.parse(fs.readFileSync(packagePath), 'utf8');\n};\n\n/**\n * list installed platforms\n *\n *\n * Returns\n *\n *  - {array} containing names of installed platforms\n */\nlistPlatforms = function () {\n    var platforms = cdvutil.listPlatforms('.');\n    return platforms;\n};\n\n\n/**\n * check to see if a platform is installed\n *\n *\n * Returns\n *\n *  - {boolean} true if platform is installed\n */\ncheckPlatform = function (plat) {\n    var detected = listPlatforms();\n\n    if (detected.indexOf(plat) > -1) {\n        return true;\n    }\n    return false;\n};\n\n\n/**\n * Check Path to be User Home Directory.\n *\n * Options:\n *\n *   - `homePath` {String} is path checked.\n *\n * Returns:\n *\n *   - {Boolean} true if path is user's home directory.\n */\n\nmodule.exports.isHome = function(homePath) {\n    return (homePath === HOME);\n};\n\n\nmodule.exports.clobberProjectConfig = function(configPath,clobbertargets) {\n    var fs = require('fs');\n\n    fs.open(configPath,'r+', function(err,fd) {\n        if (err) {\n            return;\n        }\n        fs.readFile(configPath, function(err, data) {\n            if(err) {\n                return;\n            }\n            for (each in clobbertargets) {\n                data.replace(each, clobbertargets[each]);\n            }\n        });\n    });\n    return configPath;\n};\n\n\n/**\n * Madule Exports\n */\nmodule.exports.listPlatforms = listPlatforms;\nmodule.exports.checkPlatform = checkPlatform;\n","/home/travis/build/npmtest/node-npmtest-phonegap/phonegap/lib/phonegap/util/platform.js":"/*!\n * Module dependencies.\n */\n\n/**\n * Get Platform Names for each Environment.\n *\n * Options:\n *\n *   - `platforms` {Array} of {String} platform keywords.\n *\n * Returns:\n *\n *   - {Array} of {Object} that contain keywords for each environment.\n */\n\nmodule.exports.names = function(platforms) {\n    platforms = platforms || [];\n\n    // filter out unsupported platforms\n    platforms = platforms.filter(function(platform) {\n        return module.exports.map[platform];\n    });\n\n    // map platform names\n    return platforms.map(function(platform) {\n        return module.exports.map[platform];\n    });\n};\n\n/**\n * Platform Environment Names.\n *\n * Mapping:\n *   'local'  => cordova-cli\n *   'remote' => PhoneGap/Build\n *   'human'  => Human readable name\n */\n\nmodule.exports.map = {\n    android: {\n        local: 'android',\n        remote: 'android',\n        human: 'Android'\n    },\n    blackberry: {\n        local: 'blackberry10',\n        remote: 'blackberry',\n        human: 'BlackBerry'\n    },\n    ios: {\n        local: 'ios',\n        remote: 'ios',\n        human: 'iOS'\n    },\n    wp7: {\n        local: 'wp7',\n        remote: null,\n        human: 'Windows Phone 7'\n    },\n    wp8: {\n        local: 'wp8',\n        remote: 'winphone',\n        human: 'Windows Phone 8'\n    },\n    windows: {\n        local: 'windows',\n        remote: 'windows',\n        human: 'Windows'\n    },\n    firefoxos: {\n        local: 'firefoxos',\n        remote: null,\n        human: 'Firefox OS'\n    }\n};\n\n/**\n * check to see if a given set of platform labels are supported\n *\n * @param platforms to check, can be a platform label string or an array of platform label strings\n * @return array of valid platforms\n */\nmodule.exports.supports = function (platforms) {\n    var results = [];\n    var supported = module.exports.map;\n    var check = function(value) {\n        for (var i in supported) {\n            var plat = supported[i];\n            if (plat.local === value) {\n                return true;\n            }\n        }\n        return false;\n    };\n\n    if (!platforms.length) {\n        if (check(platforms)) {\n            results.push(platforms);\n        };\n    } else {\n        results = platforms.filter(function(value) {\n            return check(value);\n        });\n    }\n    return results;\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/phonegap/lib/phonegap/remote.install.js":"/*!\n * Module dependencies\n */\n\nvar Command = require('./util/command'),\n    project = require('./util/project'),\n    platforms = require('./util/platform'),\n    phonegapbuild = require('./util/phonegap-build'),\n    qrcode = require('qrcode-terminal'),\n    util = require('util');\n\n/*!\n * Command setup.\n */\n\nmodule.exports = {\n    create: function(phonegap) {\n        return new RemoteInstallCommand(phonegap);\n    }\n};\n\nfunction RemoteInstallCommand(phonegap) {\n    return Command.apply(this, arguments);\n}\n\nutil.inherits(RemoteInstallCommand, Command);\n\n/**\n * Run a Remote App.\n *\n * Run is defined as a build and install.\n *\n * Options:\n *\n *   - `options` {Object}\n *   - `options.platforms` {Array} is a list of platforms (limited to 1).\n *   - [`options.protocol`] {String} is the protocol, e.g. 'http' or 'https'.\n *   - [`options.host`] {String} is the host address, e.g. 'build.phonegap.com'.\n *   - [`options.port`] {String} is the port, e.g. '80' or '443'.\n *   - [`options.path`] {String} is the api path, e.g. '/api/v1'\n *   - [`options.proxy`] {String} is proxy for requests through, e.g. 'http://myproxy.com'\n *   - [`callback`] {Function} is triggered after completion.\n *     - `e` {Error} is null unless there is an error.\n *\n * Returns:\n *\n *   {PhoneGap} for chaining.\n */\n\nRemoteInstallCommand.prototype.run = function(options, callback) {\n    // require options\n    if (!options) throw new Error('requires option parameter');\n    if (!options.platforms) throw new Error('requires option.platforms parameter');\n\n    // optional callback\n    callback = callback || function() {};\n\n    // build app\n    this.execute(options, callback);\n\n    return this.phonegap;\n};\n\n/*!\n * Execute.\n */\n\nRemoteInstallCommand.prototype.execute = function(options, callback) {\n    var self = this,\n        platform = platforms.names(options.platforms)[0];\n\n    // change to project directory and delegate errors\n    if (!project.cd({ emitter: self.phonegap, callback: callback })) return;\n\n    // require options.data (for now)\n    if (!options.data) {\n        var e = new Error('missing app data');\n        self.phonegap.emit('error', e);\n        callback(e);\n        return;\n    }\n\n    // url components\n    var protocol = options.protocol || 'https:',\n        host = options.host || 'build.phonegap.com',\n        port = options.port || '443';\n\n    // qrcode is url to download app\n    var url = protocol + '//' + host + ':' + port +\n              options.data.download[platform.remote] +\n              '?auth_token=' + options.data.token;\n\n    // output url\n    self.phonegap.emit('log','url: ' + url);\n    // generate qrcode\n    self.phonegap.emit('log', 'generating the QRCode...');\n\n    qrcode.generate(url, function(qrcode) {\n        self.phonegap.emit('raw', qrcode);\n        self.phonegap.emit('log', 'install the app by scanning the QRCode');\n\n        // add URL to returned data\n        options.data.url = url;\n\n        callback(null, options.data);\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/phonegap/lib/phonegap/remote.login.js":"/*!\n * Module dependencies.\n */\n\nvar Command = require('./util/command'),\n    phonegapbuild = require('./util/phonegap-build'),\n    util = require('util');\n\n/*!\n * Command setup.\n */\n\nmodule.exports = {\n    create: function(phonegap) {\n        return new RemoteLoginCommand(phonegap);\n    }\n};\n\nfunction RemoteLoginCommand(phonegap) {\n    var self = this;\n\n    // bind PhoneGapBuild \"login\" event to this instance\n    phonegapbuild.on('login', function(options, callback) {\n        self.phonegap.emit('login', options, callback);\n    });\n\n    return Command.apply(this, arguments);\n}\n\nutil.inherits(RemoteLoginCommand, Command);\n\n/**\n * Login.\n *\n * Authenticates with PhoneGap Build, saves the token, and return an API object.\n * When the save token exists, the authentication step is skipped.\n *\n * Options:\n *\n *   - `options` {Object} contains the login credentials.\n *   - [`options.username`] {String} is the username.\n *   - [`options.password`] {String} is the password.\n *   - [`options.protocol`] {String} is the protocol, e.g. 'http' or 'https'.\n *   - [`options.host`] {String} is the host address, e.g. 'build.phonegap.com'.\n *   - [`options.port`] {String} is the port, e.g. '80' or '443'.\n *   - [`options.path`] {String} is the api path, e.g. '/api/v1'\n *   - [`options.proxy`] {String} is proxy for requests through, e.g. 'http://myproxy.com'\n *   - `[callback]` {Function} is called after the login.\n *     - `e` {Error} is null on a successful login attempt.\n *     - `api` {Object} the API object defined by phonegap-build-rest\n *\n * Returns:\n *\n *   {PhoneGap} for chaining.\n */\n\nRemoteLoginCommand.prototype.run = function(options, callback) {\n    var self = this;\n\n    // require options\n    if (!options) throw new Error('requires options parameter');\n\n    // optional callback\n    callback = callback || function() {};\n\n    // try to login; the event will fire if credentials are needed\n    phonegapbuild.login(options, function(e, api) {\n        if (!e) {\n            self.phonegap.emit('log', 'you are logged in');\n        }\n        callback(e, api);\n    });\n\n    return self.phonegap;\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/phonegap/lib/phonegap/remote.logout.js":"/*!\n * Module dependencies.\n */\n\nvar Command = require('./util/command'),\n    phonegapbuild = require('./util/phonegap-build'),\n    util = require('util');\n\n/*!\n * Command setup.\n */\n\nmodule.exports = {\n    create: function(phonegap) {\n        return new RemoteLogoutCommand(phonegap);\n    }\n};\n\nfunction RemoteLogoutCommand(phonegap) {\n    return Command.apply(this, arguments);\n}\n\nutil.inherits(RemoteLogoutCommand, Command);\n\n/**\n * Logout.\n *\n * Logout of PhoneGap/Build.\n *\n * Options:\n *\n *   - `options` {Object} is unused and should be `{}`.\n *   - [`callback`] {Function} is a callback function.\n *     - `e` {Error} is null unless there is an error.\n *\n * Returns:\n *\n *   {PhoneGap} for chaining.\n */\n\nRemoteLogoutCommand.prototype.run = function(options, callback) {\n    var self = this;\n\n    // require options\n    if (!options) throw new Error('requires options parameter');\n\n    // optional callback\n    callback = callback || function() {};\n\n    // logout\n    phonegapbuild.logout(options, function(e) {\n        callback(e);\n    });\n\n    return self.phonegap;\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/phonegap/lib/phonegap/remote.run.js":"/*!\n * Module dependencies\n */\n\nvar Command = require('./util/command'),\n    project = require('./util/project'),\n    platforms = require('./util/platform'),\n    phonegapbuild = require('./util/phonegap-build'),\n    config = require('../common/config'),\n    qrcode = require('qrcode-terminal'),\n    util = require('util');\n\n/*!\n * Command setup.\n */\n\nmodule.exports = {\n    create: function(phonegap) {\n        return new RemoteRunCommand(phonegap);\n    }\n};\n\nfunction RemoteRunCommand(phonegap) {\n    return Command.apply(this, arguments);\n}\n\nutil.inherits(RemoteRunCommand, Command);\n\n/**\n * Run a Remote App.\n *\n * Run is defined as a build and install.\n *\n * Options:\n *\n *   - `options` {Object}\n *   - `options.platforms` {Array} is a list of platforms (limited to 1).\n *   - [`options.protocol`] {String} is the protocol, e.g. 'http' or 'https'.\n *   - [`options.host`] {String} is the host address, e.g. 'build.phonegap.com'.\n *   - [`options.port`] {String} is the port, e.g. '80' or '443'.\n *   - [`options.path`] {String} is the api path, e.g. '/api/v1'\n *   - [`options.proxy`] {String} is proxy for requests through, e.g. 'http://myproxy.com'\n *   - [`callback`] {Function} is triggered after completion.\n *     - `e` {Error} is null unless there is an error.\n *\n * Returns:\n *\n *   {PhoneGap} for chaining.\n */\n\nRemoteRunCommand.prototype.run = function(options, callback) {\n    // require options\n    if (!options) throw new Error('requires option parameter');\n    if (!options.platforms) throw new Error('requires option.platforms parameter');\n\n    // optional callback\n    callback = callback || function() {};\n\n    // build app\n    this.execute(options, callback);\n\n    return this.phonegap;\n};\n\n/*!\n * Execute.\n */\n\nRemoteRunCommand.prototype.execute = function(options, callback) {\n    var self = this,\n        platform = platforms.names(options.platforms)[0];\n\n    // change to project directory and delegate errors\n    if (!project.cd({ emitter: self.phonegap, callback: callback })) return;\n\n    // build the app\n    self.phonegap.remote.build(options, function(e, data) {\n        if (e) {\n            callback(e);\n            return;\n        }\n\n        config.global.load(function(e, configData) {\n            if (e) {\n                callback(e);\n                return;\n            }\n\n            // qrcode is url to download app\n            var url = 'https://build.phonegap.com' +\n                      data.download[platform.remote] +\n                      '?auth_token=' + configData.phonegap.token;\n\n            // output url\n            self.phonegap.emit('log','url: ' + url);\n\n            // generate qrcode\n            self.phonegap.emit('log', 'generating the QRCode...');\n            qrcode.generate(url, function(qrcode) {\n                self.phonegap.emit('raw', qrcode);\n                self.phonegap.emit('log', 'install the app by scanning the QRCode');\n                callback(null, data);\n            });\n        });\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/phonegap/lib/phonegap/serve.js":"/*!\n * Module dependencies.\n */\n\nvar Command         = require('./util/command'),\n    cordova         = require('../cordova').cordova,\n    project         = require('./util/project'),\n    server          = require('connect-phonegap'),\n    proxy           = require('./util/connect-proxy'),\n    util            = require('util');\n\n/**\n * Server Default Settings\n */\nvar ServeDefaults = {\n    port: 3000,\n    autoreload: true,\n    browser: true,\n    console: true,\n    deploy: true,\n    homepage: true,\n    localtunnel: false,\n    proxy: true,\n    push: true,\n    refresh: true,\n    connect: false\n};\n\n/*!\n * Command setup.\n */\n\nmodule.exports = {\n    create: function(phonegap) {\n        return new AppCommand(phonegap);\n    },\n    default_settings: ServeDefaults\n};\n\nfunction AppCommand(phonegap) {\n    return Command.apply(this, arguments);\n}\n\nutil.inherits(AppCommand, Command);\n\n/**\n * Serve the App.\n *\n * Creates a local server to serve up the project. The intended\n * receiver is the PhoneGap App but any browser can consume the\n * content.\n *\n * Options:\n *\n *   - `options` {Object}\n *     - `[port]` {Number} is the server port (default: 3000).\n *     - `[autoreload]` {Boolean} refreshes app on file system changes (default: true)\n *   - `[callback]` {Function} is triggered when server starts.\n *     - `e` {Error} is null unless there is an error.\n *\n * Returns:\n *\n *   {PhoneGap} for chaining.\n */\n\nAppCommand.prototype.run = function(options, callback) {\n    // require options\n    if (!options) throw new Error('requires option parameter');\n\n    // optional parameters\n    options.port = options.port || ServeDefaults.port;\n    options.autoreload = (typeof options.autoreload === 'boolean') ? options.autoreload : ServeDefaults.autoreload;\n    options.browser = (typeof options.browser === 'boolean') ? options.browser : ServeDefaults.browser;\n    options.console = (typeof options.console === 'boolean') ? options.console : ServeDefaults.console;\n    options.deploy = (typeof options.deploy === 'boolean') ? options.deploy : ServeDefaults.deploy;\n    options.homepage = (typeof options.homepage === 'boolean') ? options.homepage : ServeDefaults.homepage;\n    options.localtunnel = (typeof options.localtunnel === 'boolean') ? options.localtunnel : ServeDefaults.localtunnel;\n    options.proxy = (typeof options.proxy === 'boolean') ? options.proxy : ServeDefaults.proxy;\n    options.push = (typeof options.push === 'boolean') ? options.push : ServeDefaults.push;\n    options.refresh = (typeof options.refresh === 'boolean') ? options.refresh : ServeDefaults.refresh;\n    options.connect = (typeof options.connect === 'boolean') ? options.connect : ServeDefaults.connect;\n    options.phonegap = this.phonegap;\n    callback = callback || function() {};\n\n    // start app\n    this.execute(options, callback);\n\n    return this.phonegap;\n};\n\n/*!\n * Execute command.\n */\n\nAppCommand.prototype.execute = function(options, callback) {\n    var self = this;\n\n    // change to project directory and delegate errors\n    if (!project.cd({ emitter: self.phonegap, callback: callback })) return;\n\n    var _errorHandler = function(err) {\n        self.phonegap.emit('error', err);\n        callback(err);\n    };\n\n    /**\n     * Start Server\n     */\n    var startServer = function (self, options) {\n        self.phonegap.emit('log', 'starting app server...');\n\n        server.listen(options)\n              .on('browserAdded', function() {\n                  self.phonegap.emit('browserAdded');\n              })\n              .on('deviceConnected', function() {\n                  self.phonegap.emit('deviceConnected');\n              })\n              .on('error', _errorHandler)\n              .on('log', function(statusCode, url) {\n                  self.phonegap.emit('log', statusCode, url);\n              })\n              .on('update', function(c) {\n                  if(options.connect === true) proxy.uploadUpdatedZip(options);\n              })\n              .on('complete', function(data) {\n                  callback(null, data);\n                  if(options.connect === true) proxy.uploadAppZip(options);\n              });\n    };\n\n    // prepare to execute appropriate cordova hooks\n    // try because cordova is shitting the bed on promise fulfillment\n    try {\n        cordova.prepare([], function(err, data) {\n            startServer(self, options);\n        });\n    } catch (e) {\n        startServer(self, options);\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/phonegap/lib/phonegap/util/connect-proxy.js":"var http = require('http'),\n    path = require('path'),\n    fs = require('fs'),\n    local_opt = {\n        hostname: '127.0.0.1',\n        method: \"GET\"\n    },\n    remote_opt = {\n        hostname: 'connect.phonegap.com',\n        port: 80\n            // hostname: '127.0.0.1',\n            // port: 1234\n    };\n\nfunction _settings(data) {\n    var projectRootPath = require('../../cordova').util.isCordova();\n    var settings = projectRootPath ? path.join(projectRootPath, \".connectrc\") : null;\n    return new Promise(\n        function(resolve, reject) {\n            if (settings && fs.existsSync(settings) && data === undefined) {\n                fs.readFile(settings, (err, data) => {\n                    if (err) throw err;\n                    resolve(JSON.parse(data));\n                });\n            } else if (data !== undefined) {\n                fs.writeFile(settings, JSON.stringify(data, null, 4), (err) => {\n                    if (err) throw err;\n                    resolve(data);\n                });\n            } else {\n                resolve(null);\n            }\n        }\n    );\n}\nmodule.exports = {\n\n    uploadStatic: function(archive, options) {\n        _settings().then(settings => {\n            remote_opt.method = \"POST\";\n            remote_opt.path = \"/\";\n\n            function upload() {\n                if (!settings) throw new Error(\"Not settings found. An error occurred\");\n                var upload_req = http.request(remote_opt);\n                settings.chrome = true;\n                upload_req.setHeader('Connect-API-Arg', JSON.stringify(settings));\n                upload_req.on('response', (response) => {\n                    var data = '';\n                    response.on('data', chunk => {\n                        data += chunk;\n                    });\n                    response.on('end', () => {\n                        var result = JSON.parse(data);\n                        if (response.statusCode === 200 && result && result.uploaded === true) {\n                            console.log(`Your app will be available at http://share.phonegap.com/${settings.id} in a few minutes`);\n                        } else {\n                            console.log(result.message);\n                        }\n                    });\n                });\n                archive.pipe(upload_req);\n                archive.finalize();\n            }\n\n\n            if (settings) {\n                upload();\n            } else {\n                var remote_req = http.request(remote_opt);\n                remote_req.on('response', response => {\n                    var data = '';\n                    response.on('data', chunk => {\n                        data += chunk;\n                    });\n                    response.on('end', chunk => {\n                        if (response.statusCode === 200) {\n                            settings = JSON.parse(data);\n                            _settings(settings);\n                            upload();\n                        } else {\n                            console.error('an error occurred', data);\n                        }\n                    });\n                });\n                remote_req.end();\n            }\n        });\n    },\n\n    uploadAppZip: function(options) {\n        _settings().then(settings => {\n            local_opt.path = \"/__api__/appzip\";\n            local_opt.port = options.port || 3000;\n\n            remote_opt.method = \"POST\";\n            remote_opt.path = \"/\";\n\n            var local_req = http.request(local_opt),\n                remote_req = http.request(remote_opt);\n\n            if (settings) {\n                remote_req.setHeader('Connect-API-Arg', JSON.stringify(settings));\n            }\n\n\n            remote_req.on('response', response => {\n                var data = '';\n                response.on('data', chunk => {\n                    data += chunk;\n                });\n                response.on('end', chunk => {\n                    if (response.statusCode === 200) {\n                        settings = JSON.parse(data);\n                        _settings(settings);\n                        if (settings.uploaded === true) {\n                            console.log(`Updating your app with ID ${settings.id}`);\n                        }\n                        local_req.setHeader('Host', `${remote_opt.hostname}:${remote_opt.port}/${settings.id}`);\n                        local_req.end();\n                    } else {\n                        console.error('an error occurred', data);\n                    }\n                });\n            });\n            local_req.on('response', (response) => {\n                remote_req = http.request(remote_opt);\n                if (!settings) {\n                    throw new Error(\"No settings set. An error occurred\");\n                }\n                remote_req.setHeader('Connect-API-Arg', JSON.stringify(settings));\n                remote_req.on('response', (response) => {\n                    var data = '';\n                    response.on('data', chunk => {\n                        data += chunk;\n                    });\n                    response.on('end', () => {\n                        var result = JSON.parse(data);\n                        if (response.statusCode === 200 && result && result.uploaded === true) {\n                            console.log(`Your app is available at http://${remote_opt.hostname}:${remote_opt.port}/${settings.id}`);\n                        }\n                    });\n                });\n                response.pipe(remote_req);\n            });\n            remote_req.end();\n        });\n    },\n\n    uploadUpdatedZip: function(options) {\n        _settings().then(settings => {\n            if (!settings || !settings.id) throw new Error('Settings file could not be found!');\n            local_opt.path = \"/__api__/update\";\n            local_opt.port = options.port || 3000;\n            remote_opt.method = \"PUT\";\n            remote_opt.path = `/${settings.id}`;\n\n            var local_req = http.request(local_opt);\n\n            local_req.setHeader('Host', `${remote_opt.hostname}:${remote_opt.port}/${settings.id}`);\n\n            local_req.on('response', function(response) {\n                var remote_req = http.request(remote_opt);\n                remote_req.on('response', response => {\n                    var data = '';\n                    response.on('data', chunk => {\n                        data += chunk;\n                    });\n                    response.on('end', chunk => {\n                        settings = JSON.parse(data);\n                        if (settings && settings.id) {\n                            _settings(settings);\n                            console.log(`Your app has been updated at http://${remote_opt.hostname}:${remote_opt.port}/${settings.id}`);\n                        } else {\n                            console.error(data);\n                        }\n                    });\n                });\n                if (response.statusCode === 200) {\n                    remote_req.setHeader('Connect-API-Arg', JSON.stringify(settings));\n                    response.pipe(remote_req);\n                }\n            });\n            local_req.end();\n        });\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/phonegap/lib/phonegap/version.js":"/*!\n * Module dependencies.\n */\n\nvar Command = require('./util/command'),\n    path = require('path'),\n    util = require('util'),\n    fs = require('fs'),\n    project = require('./util/project');\n\n/*!\n * Command setup.\n */\n\nmodule.exports = {\n    create: function(phonegap) {\n        return new VersionCommand(phonegap);\n    }\n};\n\nfunction VersionCommand(phonegap) {\n    return Command.apply(this, arguments);\n}\n\nutil.inherits(VersionCommand, Command);\n\n/**\n * Version reporter.\n *\n * Report the version of npm package, npm module, or PhoneGap.\n *\n * Example:\n *\n *   => 2.8.0-0.10.6\n *\n *   {\n *       npm:      '2.8.0-0.10.6',\n *       module:   '0.10.6',\n *       phonegap: '2.8.0'\n *   }\n *\n * Returns:\n *\n *   {Object} that contains the versions.\n */\n\nVersionCommand.prototype.run = function(options, callback) {\n    // parse package.json\n    var packageJSON = project.readPackage();\n\n    // get version\n    var version = packageJSON.version;\n\n    // parse version types\n    return {\n        npm: version,\n        phonegap: version.split('-')[0],\n        module: version.split('-')[1]\n    };\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/phonegap/lib/phonegap/push.js":"/*!\n * Module dependencies.\n */\n\nvar Command = require('./util/command'),\n    path = require('path'),\n    util = require('util'),\n    fs = require('fs'),\n    http = require('http'),\n    querystring = require('querystring'),\n    project = require('./util/project');\n\n/**\n * Server Default Settings\n */\nvar PushServerDefaults = {\n    port: 80,\n    host: 'push.api.phonegap.com'\n};\n\n/*!\n * Command setup.\n */\n\nmodule.exports = {\n    create: function(phonegap) {\n        return new PushCommand(phonegap);\n    },\n    default_settings: PushServerDefaults\n};\n\nfunction PushCommand(phonegap) {\n    return Command.apply(this, arguments);\n}\n\nutil.inherits(PushCommand, Command);\n\n/**\n * Push.\n *\n */\n\nPushCommand.prototype.run = function(options, callback) {\n    // require options\n    if (!options) throw new Error('requires option parameter');\n\n    // optional parameters\n    options.port = options.port || PushServerDefaults.port;\n    options.host = options.host || PushServerDefaults.host;\n    options.phonegap = this.phonegap;\n    callback = callback || function() {};\n\n    // send push\n    this.execute(options, callback);\n\n    return this.phonegap;\n};\n/*!\n * Execute command.\n */\n\nPushCommand.prototype.execute = function(options, callback) {\n    var self = this;\n\n    if (options.file) {\n        var payload = fs.readFileSync(options.file, 'utf8');\n        options.payload = payload;\n    }\n\n    if (!options.payload) throw new Error('requires payload parameter');\n\n    var data = JSON.stringify({\n      'deviceID': options.deviceID,\n      'type': options.service,\n      'appID': 'com.adobe.phonegap.app',\n      'payload': JSON.parse(options.payload)\n    });\n\n    var postOptions = {\n        host: options.host,\n        port: options.port,\n        path: '/v1/push',\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'Content-Length': Buffer.byteLength(data)\n        }\n    };\n\n    var req = http.request(postOptions, function(res) {\n        //res.setEncoding('utf8');\n        res.on('data', function (chunk) {\n            console.log(\"body: \" + chunk);\n        });\n        res.on('error', function (e) {\n            console.log(\"error: \" + e);\n        });\n    });\n\n    req.write(data);\n    req.end();\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/phonegap/lib/phonegap/share.js":"var util = require('util');\nvar path = require('path');\nvar Command = require('./util/command');\nvar dropbox = require('./util/dropbox');\nvar proxy = require('./util/connect-proxy');\nvar serve = require('./serve');\nvar cordova = require('../cordova').cordova;\nvar fs = require('fs');\n\n/*\n *\n * Shares the app, valid options are\n * 1) dropbox\n * 2) connect.phonegap.com\n *\n */\n\nvar ShareDefaults = {};\n\nmodule.exports = {\n    create: function(phonegap) {\n        return new ShareCommand(phonegap);\n    },\n    default_settings: ShareDefaults\n};\n\nfunction ShareCommand(phonegap) {\n    return Command.apply(this, arguments);\n}\n\nutil.inherits(ShareCommand, Command);\n\nShareCommand.prototype.run = function(options, callback) {\n    options.phonegap = this.phonegap;\n    callback = callback || function() {};\n\n    this.execute(options, callback);\n\n    return this.phonegap;\n};\n\nShareCommand.prototype.execute = function(options, callback) {\n    if (options.dropbox === true) {\n        dropbox.upload();\n    } else if (options.connect === true) {\n        serve.create(options.phonegap)(options);\n    } else {\n        var projectRootPath = require('../cordova').util.isCordova();\n        if (projectRootPath === false) {\n            throw new Error(\"This is not a phonegap project\");\n        }\n        cordova.prepare({\n            verbose: true,\n            platforms: [\"browser\"]\n        }, function(err, data) {\n            dropbox.createZipArchive(path.join(projectRootPath, \"platforms/browser/www\")).then((archive) => {\n                proxy.uploadStatic(archive, {});\n            }, (err) => {\n                console.log(err);\n            });\n        });\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/phonegap/lib/phonegap/util/dropbox.js":"var http = require('http');\nvar https = require('https');\nvar spawn = require('child_process').spawn;\nvar opn = require('opn');\nvar util = require('util');\nvar fs = require('fs');\nvar path = require('path');\nvar qs = require('querystring');\nvar homedir = process.env['HOME'];\nvar projectRootPath = require('../../cordova').util.isCordova();\nvar settings = projectRootPath ? path.join(projectRootPath, \".dropboxrc\") : null;\n\nfunction authenticate() {\n    return new Promise(\n        function(resolve, reject) {\n            _getToken().then((token) => {\n                resolve(token);\n            }).catch(() => {\n                const auth_url = \"https://www.dropbox.com/oauth2/authorize\";\n\n                const PORT = 1234;\n\n                var state = require('./util/hex').randomValueHex(12);\n                var redirect_uri = \"http://localhost:\" + PORT;\n                const app_key = \"2f1ec7whk04rhuq\";\n\n                var params = util.format(`?response_type=token&client_id=%s\\\n&redirect_uri=%s&\\\nstate=%s`,\n                    app_key, redirect_uri, state);\n\n                var server;\n                var browser;\n\n                function handleRequest(request, response) {\n                    if (request.url === \"/token\" && request.method === \"POST\") {\n                        var body = [];\n                        request.on('data', (chunk) => {\n                            body.push(chunk);\n                            if (body.length > 1e6) {\n                                request.connection.destroy();\n                            }\n                        });\n                        request.on('end', () => {\n                            body = Buffer.concat(body).toString();\n                            var params = qs.parse(body);\n                            if (params.state !== state) {\n                                console.error(\"Wrong state. CSRF forged\");\n                                process.exit(69);\n                            }\n                            // TODO write token and shit to local file\n                            if (settings === null) reject(new Error(\"Settings file not configured\"));\n                            fs.writeFile(settings, JSON.stringify(params, null, 4), () => {\n                                //console.log(\"Config file written successfully\");\n                                request.connection.destroy();\n                                server.close(function(err) {\n                                    resolve(params.access_token);\n                                });\n                            });\n                        });\n                        response.end();\n                    } else {\n                        response.setHeader('Content-Type', 'text/html');\n                        response.end(fs.readFileSync(path.join(__dirname, \"./util/public/index.html\")));\n                    }\n                }\n                    //console.log(auth_url + params);\n\n                server = http.createServer(handleRequest);\n\n                server.listen(PORT, () => {\n                    //console.log(\"Server listening on: http://localhost:%s\", PORT);\n                    console.log(\"waiting for API authorization...\");\n                    // Dropbox authentication\n\n                    opn(auth_url + params, {\n                        app: 'firefox',\n                        wait: false\n                    }).then((browser) => {\n                        // TODO\n                    });\n                });\n            });\n        }\n    );\n}\n\nfunction _getToken() {\n    return new Promise(\n        function(resolve, reject) {\n            if (settings && fs.existsSync(settings)) {\n                resolve(JSON.parse(fs.readFileSync(settings)).access_token);\n            }\n            reject(new Error(\"Dropbox config file does not exist. Please authenticate\"));\n        }\n    );\n}\n\nfunction getPublicLinkUrl() {\n    return new Promise(\n        function(resolve, reject) {\n            authenticate().then((token) => {\n                var options = {\n                    hostname: 'api.dropboxapi.com',\n                    port: 443,\n                    path: '/1/account/info',\n                    method: 'POST',\n                    headers: {\n                        'Authorization': 'Bearer ' + token\n                    }\n                };\n\n                var account = https.request(options, (res) => {\n                    // console.log(`STATUS: ${res.statusCode}`);\n                    // console.log(`HEADERS: ${JSON.stringify(res.headers)}`);\n                    var body = '';\n                    res.setEncoding('utf8');\n                    res.on('data', (chunk) => {\n                        body += chunk;\n                        //console.log(`BODY: ${chunk}`);\n                    });\n                    res.on('end', () => {\n                        resolve(`https://dl.dropboxusercontent.com/u/${JSON.parse(body).uid}/pgdevapp/`);\n                    });\n                });\n                account.end();\n            });\n        }\n    );\n}\n\nfunction upload(archive) {\n    return authenticate().then((token) => {\n        var api_args = {\n            \"path\": \"/Public/pgdevapp/__api__/appzip\",\n            \"mode\": \"overwrite\",\n            \"autorename\": true,\n            \"mute\": false\n        };\n\n\n        var options = {\n            hostname: 'content.dropboxapi.com',\n            port: 443,\n            path: '/2/files/upload',\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/octet-stream',\n                'Authorization': 'Bearer ' + token,\n                'Dropbox-API-Arg': JSON.stringify(api_args)\n            }\n        };\n\n        var up = https.request(options, (res) => {\n            //console.log(`STATUS: ${res.statusCode}`);\n            //console.log(`HEADERS: ${JSON.stringify(res.headers)}`);\n            res.setEncoding('utf8');\n            res.on('data', (chunk) => {\n                //console.log(`BODY: ${chunk}`);\n            });\n            res.on('end', () => {\n                getPublicLinkUrl().then((link) => {\n                    console.log(`your app will is available here ${link}`);\n                    resolve(link);\n                });\n            });\n        });\n        console.log(`uploading archive to Dropbox...`);\n        // TODO pipe directly from archiver\n        // TODO handle 150M+ cases\n        archive.pipe(up);\n        archive.finalize();\n    }).catch((e) => {\n        console.error(e.message);\n    });\n}\n\nfunction createZipArchive(dir) {\n    return new Promise(function(resolve, reject) {\n        var archiver = require('archiver');\n\n        var archive = archiver('zip');\n\n        archive.on('error', function(err) {\n            reject(err);\n            throw err;\n        });\n        archive.directory(dir, 'www');\n        resolve(archive);\n    });\n}\n\nmodule.exports = {\n    upload: function(callback) {\n        createZipArchive(path.join(projectRootPath, 'www')).then((archive) => {\n            upload(archive).then(() => {\n                callback();\n            });\n        });\n    },\n    createZipArchive: createZipArchive\n};\n"}