{"/home/travis/build/npmtest/node-npmtest-phonegap/test.js":"/* istanbul instrument in package npmtest_phonegap */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-phonegap/lib.npmtest_phonegap.js":"/* istanbul instrument in package npmtest_phonegap */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_phonegap = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_phonegap = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-phonegap/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-phonegap && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_phonegap */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_phonegap\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_phonegap.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_phonegap.rollup.js'] =\n            local.assetsDict['/assets.npmtest_phonegap.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_phonegap.__dirname + '/lib.npmtest_phonegap.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/lib/main.js":"/*!\n * Module dependencies.\n */\n\nvar PhoneGap = require('./phonegap');\n\n/**\n * Expose npm main module.\n */\n\nmodule.exports = new PhoneGap();\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/lib/phonegap.js":"/*!\n * Module dependencies.\n */\n\nvar phonegapbuild = require('phonegap-build'),\n    events = require('events'),\n    util = require('util');\n\n/**\n * PhoneGap object.\n *\n * Events:\n *\n *   - `error` {Event} triggered with info compatible with console.error.\n *     - `e` {Error} describes the error.\n *   - `log` {Event} triggered with info compatible with console.log.\n *   - `warn` {Event} triggered with info compatible with console.warn.\n *   - `raw` {Event} trigger with info that should not be formatted.\n *   - `login` {Event} triggered when login credentials are needed.\n *     - `callback` {Function} is triggered with user credentials\n *       - `username` {String}\n *       - `password` {String}\n */\n\nfunction PhoneGap() {\n    // initialize PhoneGap\n    initialize.call(this);\n\n    // initialize each command and inject the `phonegap` dependency.\n    this.cordova = require('./phonegap/cordova').create(this);\n    this.create = require('./phonegap/create').create(this);\n    this.mode = require('./phonegap/mode').create(this);\n    this.template.list = require('./phonegap/template.list').create(this);\n    this.template.search = require('./phonegap/template.search').create(this);\n    this.remote.build = require('./phonegap/remote.build').create(this);\n    this.remote.install = require('./phonegap/remote.install').create(this);\n    this.remote.login = require('./phonegap/remote.login').create(this);\n    this.remote.logout = require('./phonegap/remote.logout').create(this);\n    this.remote.run = require('./phonegap/remote.run').create(this);\n    this.serve = require('./phonegap/serve').create(this);\n    this.app = this.serve;\n    this.version = require('./phonegap/version').create(this);\n    this.push = require('./phonegap/push').create(this);\n    this.share = require('./phonegap/share').create(this);\n\n    // set normal mode (not verbose and not quiet)\n    this.mode({ verbose: false });\n\n    // utility methods\n    this.util = {};\n    this.util.cordova = require('./cordova').cordova;\n}\n\nutil.inherits(PhoneGap, events.EventEmitter);\n\n/*!\n * PhoneGap prototype chain.\n */\n\nPhoneGap.prototype.remote = {};\nPhoneGap.prototype.template = {};\n\n/*!\n * Initialize PhoneGap.\n */\n\nfunction initialize() {\n    var self = this;\n\n    // error events must always have a listener.\n    // this should be an empty listener that quietly captures errors.\n    // users can also subscribe to the error event to receive and handle it.\n    self.on('error', function(e) {});\n\n    // reset all phonegapbuild event listeners\n    phonegapbuild.removeAllListeners();\n}\n\n/*!\n * Expose the PhoneGap object.\n */\n\nmodule.exports = PhoneGap;\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap-build/lib/main.js":"/*!\n * Module dependencies.\n */\n\nvar PhoneGapBuild = require('./phonegap-build');\n\n/*!\n * Expose the package library.\n */\n\nmodule.exports = new PhoneGapBuild();\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap-build/lib/phonegap-build.js":"/*!\n * Module dependencies.\n */\n\nvar events = require('events'),\n    util = require('util');\n\n/**\n * PhoneGap Build object.\n *\n * Events:\n *\n *   - `error` {Event} triggered with info compatible with console.error.\n *     - `e` {Error} describes the error.\n *   - `log` {Event} triggered with info compatible with console.log.\n *   - `warn` {Event} triggered with info compatible with console.warn.\n *   - `raw` {Event} trigger with info that should not be formatted.\n *   - `login` {Event} triggered when login credentials are needed.\n *     - `callback` {Function} is triggered with user credentials\n *       - `username` {String}\n *       - `password` {String}\n */\n\nfunction PhoneGapBuild() {\n    // error events must always have a listener.\n    this.on('error', function(e) {});\n}\n\nutil.inherits(PhoneGapBuild, events.EventEmitter);\n\n/*\n * PhoneGap Build prototype chain composed of isolated actions.\n */\n\nPhoneGapBuild.prototype.login = require('./phonegap-build/login');\nPhoneGapBuild.prototype.logout = require('./phonegap-build/logout');\nPhoneGapBuild.prototype.create = require('./phonegap-build/create');\nPhoneGapBuild.prototype.build = require('./phonegap-build/build');\n\n/*\n * Expose the PhoneGapBuild object.\n */\n\nmodule.exports = PhoneGapBuild;\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap-build/lib/phonegap-build/login.js":"/*!\n * Module dependencies\n */\n\nvar events = require('events'),\n    client = require('phonegap-build-api'),\n    config = require('../common/config'),\n    extend = require('../common/extend');\n\n/**\n * Login.\n *\n * Authenticates with PhoneGap Build, saves the token, and return an API object.\n * When the save token exists, the authentication step is skipped.\n *\n * Options:\n *\n *   - `options` {Object} contains the login credentials.\n *   - [`options.username`] {String} is the username.\n *   - [`options.password`] {String} is the password.\n *   - [`callback`] {Function} is called after the login.\n *     - `e` {Error} is null on a successful login attempt.\n *     - `api` {Object} the API object defined by phonegap-build-rest\n *\n * Events:\n *\n *   - `error` is triggered on an error.\n *     - `e` {Error} details the error.\n *   - `login` is triggered when login credentials are required.\n *     - `options.username` is the known username or undefined.\n *     - `options.password` is the known password or undefined.\n *     - `callback` is called with credentials to log in.\n *       - `e` is undefined unless the creds cannot be provided.\n *       - `options.username` is the username to use.\n *       - `options.password` is the password to use.\n *   - `log` is triggered with log messages.\n *   - `warn` is triggered with warning messages.\n */\n\nmodule.exports = function(options, callback) {\n    // require options\n    if (!options) throw new Error('requires options parameter');\n\n    // callback is optional\n    callback = callback || function() {};\n\n    // login\n    execute.call(this, options, callback);\n\n    return this;\n};\n\n/*!\n * Execute Login.\n */\n\nvar execute = function(options, callback) {\n    var self = this;\n\n    // check if account exists\n    config.global.load(function(e, data) {\n        // account exists with an auth token\n        if (!e && data && data.phonegap && data.phonegap.token) {\n            var apiOptions = extend(data.phonegap, options);\n\n            // login with saved account\n            var api = new client.API(apiOptions);\n\n            callback(null, api);\n        }\n        // account does not exist\n        else {\n            // authenticate with given username and password\n            if (options.username && options.password) {\n                authenticate(options, callback);\n            }\n            // authenticate after retrieving missing username and/or password\n            else {\n                var loginOptions = {\n                    username: options.username,\n                    password: options.password\n                };\n\n                // console output\n                self.emit('log', 'PhoneGap/Build Login');\n                self.emit('log', 'Sign up at', 'build.phonegap.com'.underline);\n                self.emit('warn', 'GitHub accounts are unsupported');\n\n                // retrieve username and/or password\n                self.emit('login', loginOptions, function(e, data) {\n                    if (e) {\n                        self.emit('error', e);\n                        callback(e);\n                        return;\n                    }\n                    authenticate(data, callback);\n                });\n            }\n        }\n\n        // authenticate with phonegap build api\n        function authenticate(options, callback) {\n            client.auth(options, function(e, api) {\n                if (e) {\n                    self.emit('error', e);\n                    callback(e);\n                    return;\n                }\n\n                // data\n                data = data || {};\n                data.phonegap = data.phonegap || {};\n                data.phonegap.token = api.token;\n\n                // save the data\n                config.global.save(data, function(e) {\n                    // do not provide api on error\n                    if (e) {\n                        self.emit('error', e);\n                        callback(e);\n                        return;\n                    }\n\n                    // complete\n                    self.emit('log', 'logged in as', options.username);\n                    callback(null, api);\n                });\n            });\n        }\n    });\n};\n\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap-build-api/lib/client.js":"module.exports = {\n    auth: require('./auth'),\n    API: require('./api')\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap-build-api/lib/auth.js":"/*\n * Module dependencies.\n */\n\nvar request = require('request'),\n    defaults = require('./defaults'),\n    extend = require('./extend'),\n    API = require('./api');\n\n/**\n * Authentication for PhoneGap Build.\n *\n * Authenticates with PhoneGap Build to obtain an auth token. With the auth\n * token, an API instance in created and returned via the callback.\n *\n * Options:\n *\n *   - `options` {Object} is the authentication settings.\n *   - `options.username` {String} is the phonegap build username.\n *   - `options.password` {String} is the phonegap build password.\n *   - `options.token` {String} can be used instead of username and password.\n *   - `callback` {Function} is trigger after the authentication.\n *     - `e` {Error} is null unless there is an error.\n *     - `api` {Object} is the `API` instance to interact with phonegap build.\n */\n\nmodule.exports = function(options, callback) {\n    options = extend(defaults, options);\n\n    // require options parameter\n    if (!options) throw new Error('missing options argument');\n\n    // return API if token parameter given\n    if (options.token) {\n        callback(null, new API(options));\n        return;\n    }\n\n    // require options parameter credentials\n    if (!options.username) throw new Error('missing options.name argument');\n    if (!options.password) throw new Error('missing options.password argument');\n\n    // require callback parameter\n    if (!callback) throw new Error('missing callback argument');\n\n    // url for authentication\n    var uri = options.protocol + '//' + options.host + ':' + options.port + '/token';\n\n    // post headers for authentication\n    var opts = {\n        headers: {\n            'Authorization': headers.auth(options.username, options.password)\n        },\n        proxy: options.proxy\n    };\n\n    // try to authenticate\n    request.post(uri, opts, function(e, response, body) {\n        // failed request\n        if (e) {\n            callback(e);\n            return;\n        }\n\n        // failed response\n        if (response.statusCode !== 200) {\n            // provide a default message when none is provided\n            body = body || 'server returned status code ' + response.statusCode;\n            callback(new Error(body));\n            return;\n        }\n\n        // parse phonegap build response\n        var data = JSON.parse(body);\n\n        // failed api validation\n        if (data.error) {\n            callback(new Error(data.error));\n            return;\n        }\n\n        // create API object\n        options.token = data.token;\n        options.username = undefined;\n        options.password = undefined;\n        callback(null, new API(options));\n    });\n};\n\nvar headers = {\n    // Header for basic authorization\n    auth: function(username, password) {\n        var string = username + ':' + password;\n        var buffer = new Buffer(string).toString('base64');\n        return 'Basic ' + buffer;\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap-build-api/node_modules/request/main.js":"// Copyright 2010-2012 Mikeal Rogers\n//\n//    Licensed under the Apache License, Version 2.0 (the \"License\");\n//    you may not use this file except in compliance with the License.\n//    You may obtain a copy of the License at\n//\n//        http://www.apache.org/licenses/LICENSE-2.0\n//\n//    Unless required by applicable law or agreed to in writing, software\n//    distributed under the License is distributed on an \"AS IS\" BASIS,\n//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n//    See the License for the specific language governing permissions and\n//    limitations under the License.\n\nvar http = require('http')\n  , https = false\n  , tls = false\n  , url = require('url')\n  , util = require('util')\n  , stream = require('stream')\n  , qs = require('querystring')\n  , oauth = require('./oauth')\n  , uuid = require('./uuid')\n  , ForeverAgent = require('./forever')\n  , Cookie = require('./vendor/cookie')\n  , CookieJar = require('./vendor/cookie/jar')\n  , cookieJar = new CookieJar\n  , tunnel = require('./tunnel')\n  , aws = require('./aws')\n  \n  , mime = require('mime')\n  , FormData = require('form-data')\n  ;\n  \nif (process.logging) {\n  var log = process.logging('request')\n}\n\ntry {\n  https = require('https')\n} catch (e) {}\n\ntry {\n  tls = require('tls')\n} catch (e) {}\n\nfunction toBase64 (str) {\n  return (new Buffer(str || \"\", \"ascii\")).toString(\"base64\")\n}\n\n// Hacky fix for pre-0.4.4 https\nif (https && !https.Agent) {\n  https.Agent = function (options) {\n    http.Agent.call(this, options)\n  }\n  util.inherits(https.Agent, http.Agent)\n  https.Agent.prototype._getConnection = function (host, port, cb) {\n    var s = tls.connect(port, host, this.options, function () {\n      // do other checks here?\n      if (cb) cb()\n    })\n    return s\n  }\n}\n\nfunction isReadStream (rs) {\n  if (rs.readable && rs.path && rs.mode) {\n    return true\n  }\n}\n\nfunction copy (obj) {\n  var o = {}\n  Object.keys(obj).forEach(function (i) {\n    o[i] = obj[i]\n  })\n  return o\n}\n\nvar isUrl = /^https?:/\n\nvar globalPool = {}\n\nfunction Request (options) {\n  stream.Stream.call(this)\n  this.readable = true\n  this.writable = true\n\n  if (typeof options === 'string') {\n    options = {uri:options}\n  }\n  \n  var reserved = Object.keys(Request.prototype)\n  for (var i in options) {\n    if (reserved.indexOf(i) === -1) {\n      this[i] = options[i]\n    } else {\n      if (typeof options[i] === 'function') {\n        delete options[i]\n      }\n    }\n  }\n  options = copy(options)\n  \n  this.init(options)\n}\nutil.inherits(Request, stream.Stream)\nRequest.prototype.init = function (options) {\n  var self = this\n  \n  if (!options) options = {}\n  if (process.env.NODE_DEBUG && /request/.test(process.env.NODE_DEBUG)) console.error('REQUEST', options)\n  if (!self.pool && self.pool !== false) self.pool = globalPool\n  self.dests = []\n  self.__isRequestRequest = true\n  \n  // Protect against double callback\n  if (!self._callback && self.callback) {\n    self._callback = self.callback\n    self.callback = function () {\n      if (self._callbackCalled) return // Print a warning maybe?\n      self._callback.apply(self, arguments)\n      self._callbackCalled = true\n    }\n    self.on('error', self.callback.bind())\n    self.on('complete', self.callback.bind(self, null))\n  }\n\n  if (self.url) {\n    // People use this property instead all the time so why not just support it.\n    self.uri = self.url\n    delete self.url\n  }\n\n  if (!self.uri) {\n    throw new Error(\"options.uri is a required argument\")\n  } else {\n    if (typeof self.uri == \"string\") self.uri = url.parse(self.uri)\n  }\n  if (self.proxy) {\n    if (typeof self.proxy == 'string') self.proxy = url.parse(self.proxy)\n\n    // do the HTTP CONNECT dance using koichik/node-tunnel\n    if (http.globalAgent && self.uri.protocol === \"https:\") {\n      var tunnelFn = self.proxy.protocol === \"http:\"\n                   ? tunnel.httpsOverHttp : tunnel.httpsOverHttps\n\n      var tunnelOptions = { proxy: { host: self.proxy.hostname\n                                   , port: +self.proxy.port\n                                   , proxyAuth: self.proxy.auth }\n                          , ca: this.ca }\n\n      self.agent = tunnelFn(tunnelOptions)\n      self.tunnel = true\n    }\n  }\n\n  if (!self.uri.host || !self.uri.pathname) {\n    // Invalid URI: it may generate lot of bad errors, like \"TypeError: Cannot call method 'indexOf' of undefined\" in CookieJar\n    // Detect and reject it as soon as possible\n    var faultyUri = url.format(self.uri)\n    var message = 'Invalid URI \"' + faultyUri + '\"'\n    if (Object.keys(options).length === 0) {\n      // No option ? This can be the sign of a redirect\n      // As this is a case where the user cannot do anything (he didn't call request directly with this URL)\n      // he should be warned that it can be caused by a redirection (can save some hair)\n      message += '. This can be caused by a crappy redirection.'\n    }\n    self.emit('error', new Error(message))\n    return // This error was fatal\n  }\n\n  self._redirectsFollowed = self._redirectsFollowed || 0\n  self.maxRedirects = (self.maxRedirects !== undefined) ? self.maxRedirects : 10\n  self.followRedirect = (self.followRedirect !== undefined) ? self.followRedirect : true\n  self.followAllRedirects = (self.followAllRedirects !== undefined) ? self.followAllRedirects : false;\n  if (self.followRedirect || self.followAllRedirects)\n    self.redirects = self.redirects || []\n\n  self.headers = self.headers ? copy(self.headers) : {}\n\n  self.setHost = false\n  if (!self.headers.host) {\n    self.headers.host = self.uri.hostname\n    if (self.uri.port) {\n      if ( !(self.uri.port === 80 && self.uri.protocol === 'http:') &&\n           !(self.uri.port === 443 && self.uri.protocol === 'https:') )\n      self.headers.host += (':'+self.uri.port)\n    }\n    self.setHost = true\n  }\n  \n  self.jar(self._jar || options.jar)\n\n  if (!self.uri.pathname) {self.uri.pathname = '/'}\n  if (!self.uri.port) {\n    if (self.uri.protocol == 'http:') {self.uri.port = 80}\n    else if (self.uri.protocol == 'https:') {self.uri.port = 443}\n  }\n\n  if (self.proxy && !self.tunnel) {\n    self.port = self.proxy.port\n    self.host = self.proxy.hostname\n  } else {\n    self.port = self.uri.port\n    self.host = self.uri.hostname\n  }\n\n  self.clientErrorHandler = function (error) {\n    if (self._aborted) return\n    \n    if (self.setHost) delete self.headers.host\n    if (self.req._reusedSocket && error.code === 'ECONNRESET'\n        && self.agent.addRequestNoreuse) {\n      self.agent = { addRequest: self.agent.addRequestNoreuse.bind(self.agent) }\n      self.start()\n      self.req.end()\n      return\n    }\n    if (self.timeout && self.timeoutTimer) {\n      clearTimeout(self.timeoutTimer)\n      self.timeoutTimer = null\n    }\n    self.emit('error', error)\n  }\n\n  self._parserErrorHandler = function (error) {\n    if (this.res) {\n      if (this.res.request) {\n        this.res.request.emit('error', error)\n      } else {\n        this.res.emit('error', error)\n      }\n    } else {\n      this._httpMessage.emit('error', error)\n    }\n  }\n\n  if (options.form) {\n    self.form(options.form)\n  }\n\n  if (options.oauth) {\n    self.oauth(options.oauth)\n  }\n  \n  if (options.aws) {\n    self.aws(options.aws)\n  }\n\n  if (self.uri.auth && !self.headers.authorization) {\n    self.headers.authorization = \"Basic \" + toBase64(self.uri.auth.split(':').map(function(item){ return qs.unescape(item)}).join(':'))\n  }\n  if (self.proxy && self.proxy.auth && !self.headers['proxy-authorization'] && !self.tunnel) {\n    self.headers['proxy-authorization'] = \"Basic \" + toBase64(self.proxy.auth.split(':').map(function(item){ return qs.unescape(item)}).join(':'))\n  }\n\n  if (options.qs) self.qs(options.qs)\n\n  if (self.uri.path) {\n    self.path = self.uri.path\n  } else {\n    self.path = self.uri.pathname + (self.uri.search || \"\")\n  }\n\n  if (self.path.length === 0) self.path = '/'\n\n  if (self.proxy && !self.tunnel) self.path = (self.uri.protocol + '//' + self.uri.host + self.path)\n\n  if (options.json) {\n    self.json(options.json)\n  } else if (options.multipart) {\n    self.boundary = uuid()\n    self.multipart(options.multipart)\n  }\n\n  if (self.body) {\n    var length = 0\n    if (!Buffer.isBuffer(self.body)) {\n      if (Array.isArray(self.body)) {\n        for (var i = 0; i < self.body.length; i++) {\n          length += self.body[i].length\n        }\n      } else {\n        self.body = new Buffer(self.body)\n        length = self.body.length\n      }\n    } else {\n      length = self.body.length\n    }\n    if (length) {\n      self.headers['content-length'] = length\n    } else {\n      throw new Error('Argument error, options.body.')\n    }\n  }\n\n  var protocol = self.proxy && !self.tunnel ? self.proxy.protocol : self.uri.protocol\n    , defaultModules = {'http:':http, 'https:':https}\n    , httpModules = self.httpModules || {}\n    ;\n  self.httpModule = httpModules[protocol] || defaultModules[protocol]\n\n  if (!self.httpModule) throw new Error(\"Invalid protocol\")\n\n  if (options.ca) self.ca = options.ca\n\n  if (!self.agent) {\n    if (options.agentOptions) self.agentOptions = options.agentOptions\n\n    if (options.agentClass) {\n      self.agentClass = options.agentClass\n    } else if (options.forever) {\n      self.agentClass = protocol === 'http:' ? ForeverAgent : ForeverAgent.SSL\n    } else {\n      self.agentClass = self.httpModule.Agent\n    }\n  }\n\n  if (self.pool === false) {\n    self.agent = false\n  } else {\n    self.agent = self.agent || self.getAgent()\n    if (self.maxSockets) {\n      // Don't use our pooling if node has the refactored client\n      self.agent.maxSockets = self.maxSockets\n    }\n    if (self.pool.maxSockets) {\n      // Don't use our pooling if node has the refactored client\n      self.agent.maxSockets = self.pool.maxSockets\n    }\n  }\n\n  self.once('pipe', function (src) {\n    if (self.ntick && self._started) throw new Error(\"You cannot pipe to this stream after the outbound request has started.\")\n    self.src = src\n    if (isReadStream(src)) {\n      if (!self.headers['content-type'] && !self.headers['Content-Type'])\n        self.headers['content-type'] = mime.lookup(src.path)\n    } else {\n      if (src.headers) {\n        for (var i in src.headers) {\n          if (!self.headers[i]) {\n            self.headers[i] = src.headers[i]\n          }\n        }\n      }\n      if (src.method && !self.method) {\n        self.method = src.method\n      }\n    }\n\n    self.on('pipe', function () {\n      console.error(\"You have already piped to this stream. Pipeing twice is likely to break the request.\")\n    })\n  })\n\n  process.nextTick(function () {\n    if (self._aborted) return\n    \n    if (self._form) {\n      self.setHeaders(self._form.getHeaders())\n      self._form.pipe(self)\n    }\n    if (self.body) {\n      if (Array.isArray(self.body)) {\n        self.body.forEach(function (part) {\n          self.write(part)\n        })\n      } else {\n        self.write(self.body)\n      }\n      self.end()\n    } else if (self.requestBodyStream) {\n      console.warn(\"options.requestBodyStream is deprecated, please pass the request object to stream.pipe.\")\n      self.requestBodyStream.pipe(self)\n    } else if (!self.src) {\n      if (self.method !== 'GET' && typeof self.method !== 'undefined') {\n        self.headers['content-length'] = 0;\n      }\n      self.end();\n    }\n    self.ntick = true\n  })\n}\n\n// Must call this when following a redirect from https to http or vice versa\n// Attempts to keep everything as identical as possible, but update the\n// httpModule, Tunneling agent, and/or Forever Agent in use.\nRequest.prototype._updateProtocol = function () {\n  var self = this\n  var protocol = self.uri.protocol\n\n  if (protocol === 'https:') {\n    // previously was doing http, now doing https\n    // if it's https, then we might need to tunnel now.\n    if (self.proxy) {\n      self.tunnel = true\n      var tunnelFn = self.proxy.protocol === 'http:'\n                   ? tunnel.httpsOverHttp : tunnel.httpsOverHttps\n      var tunnelOptions = { proxy: { host: self.proxy.hostname\n                                   , post: +self.proxy.port\n                                   , proxyAuth: self.proxy.auth }\n                          , ca: self.ca }\n      self.agent = tunnelFn(tunnelOptions)\n      return\n    }\n\n    self.httpModule = https\n    switch (self.agentClass) {\n      case ForeverAgent:\n        self.agentClass = ForeverAgent.SSL\n        break\n      case http.Agent:\n        self.agentClass = https.Agent\n        break\n      default:\n        // nothing we can do.  Just hope for the best.\n        return\n    }\n\n    // if there's an agent, we need to get a new one.\n    if (self.agent) self.agent = self.getAgent()\n\n  } else {\n    if (log) log('previously https, now http')\n    // previously was doing https, now doing http\n    // stop any tunneling.\n    if (self.tunnel) self.tunnel = false\n    self.httpModule = http\n    switch (self.agentClass) {\n      case ForeverAgent.SSL:\n        self.agentClass = ForeverAgent\n        break\n      case https.Agent:\n        self.agentClass = http.Agent\n        break\n      default:\n        // nothing we can do.  just hope for the best\n        return\n    }\n\n    // if there's an agent, then get a new one.\n    if (self.agent) {\n      self.agent = null\n      self.agent = self.getAgent()\n    }\n  }\n}\n\nRequest.prototype.getAgent = function () {\n  var Agent = this.agentClass\n  var options = {}\n  if (this.agentOptions) {\n    for (var i in this.agentOptions) {\n      options[i] = this.agentOptions[i]\n    }\n  }\n  if (this.ca) options.ca = this.ca\n\n  var poolKey = ''\n\n  // different types of agents are in different pools\n  if (Agent !== this.httpModule.Agent) {\n    poolKey += Agent.name\n  }\n\n  if (!this.httpModule.globalAgent) {\n    // node 0.4.x\n    options.host = this.host\n    options.port = this.port\n    if (poolKey) poolKey += ':'\n    poolKey += this.host + ':' + this.port\n  }\n\n  // ca option is only relevant if proxy or destination are https\n  var proxy = this.proxy\n  if (typeof proxy === 'string') proxy = url.parse(proxy)\n  var caRelevant = (proxy && proxy.protocol === 'https:') || this.uri.protocol === 'https:'\n  if (options.ca && caRelevant) {\n    if (poolKey) poolKey += ':'\n    poolKey += options.ca\n  }\n\n  if (!poolKey && Agent === this.httpModule.Agent && this.httpModule.globalAgent) {\n    // not doing anything special.  Use the globalAgent\n    return this.httpModule.globalAgent\n  }\n\n  // we're using a stored agent.  Make sure it's protocol-specific\n  poolKey = this.uri.protocol + poolKey\n\n  // already generated an agent for this setting\n  if (this.pool[poolKey]) return this.pool[poolKey]\n\n  return this.pool[poolKey] = new Agent(options)\n}\n\nRequest.prototype.start = function () {\n  var self = this\n\n  if (self._aborted) return\n\n  self._started = true\n  self.method = self.method || 'GET'\n  self.href = self.uri.href\n  if (log) log('%method %href', self)\n\n  if (self.src && self.src.stat && self.src.stat.size) {\n    self.headers['content-length'] = self.src.stat.size\n  }\n  if (self._aws) {\n    self.aws(self._aws, true)\n  }\n\n  self.req = self.httpModule.request(self, function (response) {\n    if (response.connection.listeners('error').indexOf(self._parserErrorHandler) === -1) {\n      response.connection.once('error', self._parserErrorHandler)\n    }\n    if (self._aborted) return\n    if (self._paused) response.pause()\n\n    self.response = response\n    response.request = self\n    response.toJSON = toJSON\n\n    if (self.httpModule === https &&\n        self.strictSSL &&\n        !response.client.authorized) {\n      var sslErr = response.client.authorizationError\n      self.emit('error', new Error('SSL Error: '+ sslErr))\n      return\n    }\n\n    if (self.setHost) delete self.headers.host\n    if (self.timeout && self.timeoutTimer) {\n      clearTimeout(self.timeoutTimer)\n      self.timeoutTimer = null\n    }  \n\n    var addCookie = function (cookie) {\n      if (self._jar) self._jar.add(new Cookie(cookie))\n      else cookieJar.add(new Cookie(cookie))\n    }\n\n    if (response.headers['set-cookie'] && (!self._disableCookies)) {\n      if (Array.isArray(response.headers['set-cookie'])) response.headers['set-cookie'].forEach(addCookie)\n      else addCookie(response.headers['set-cookie'])\n    }\n\n    if (response.statusCode >= 300 && response.statusCode < 400  &&\n        (self.followAllRedirects ||\n         (self.followRedirect && (self.method !== 'PUT' && self.method !== 'POST' && self.method !== 'DELETE'))) &&\n        response.headers.location) {\n      if (self._redirectsFollowed >= self.maxRedirects) {\n        self.emit('error', new Error(\"Exceeded maxRedirects. Probably stuck in a redirect loop \"+self.uri.href))\n        return\n      }\n      self._redirectsFollowed += 1\n\n      if (!isUrl.test(response.headers.location)) {\n        response.headers.location = url.resolve(self.uri.href, response.headers.location)\n      }\n\n      var uriPrev = self.uri\n      self.uri = url.parse(response.headers.location)\n\n      // handle the case where we change protocol from https to http or vice versa\n      if (self.uri.protocol !== uriPrev.protocol) {\n        self._updateProtocol()\n      }\n\n      self.redirects.push(\n        { statusCode : response.statusCode\n        , redirectUri: response.headers.location \n        }\n      )\n      if (self.followAllRedirects) self.method = 'GET'\n      // self.method = 'GET'; // Force all redirects to use GET || commented out fixes #215\n      delete self.src\n      delete self.req\n      delete self.agent\n      delete self._started\n      delete self.body\n      if (self.headers) {\n        delete self.headers.host\n      }\n      if (log) log('Redirect to %uri', self)\n      self.init()\n      return // Ignore the rest of the response\n    } else {\n      self._redirectsFollowed = self._redirectsFollowed || 0\n      // Be a good stream and emit end when the response is finished.\n      // Hack to emit end on close because of a core bug that never fires end\n      response.on('close', function () {\n        if (!self._ended) self.response.emit('end')\n      })\n\n      if (self.encoding) {\n        if (self.dests.length !== 0) {\n          console.error(\"Ingoring encoding parameter as this stream is being piped to another stream which makes the encoding option invalid.\")\n        } else {\n          response.setEncoding(self.encoding)\n        }\n      }\n\n      self.dests.forEach(function (dest) {\n        self.pipeDest(dest)\n      })\n\n      response.on(\"data\", function (chunk) {\n        self._destdata = true\n        self.emit(\"data\", chunk)\n      })\n      response.on(\"end\", function (chunk) {\n        self._ended = true\n        self.emit(\"end\", chunk)\n      })\n      response.on(\"close\", function () {self.emit(\"close\")})\n\n      self.emit('response', response)\n\n      if (self.callback) {\n        var buffer = []\n        var bodyLen = 0\n        self.on(\"data\", function (chunk) {\n          buffer.push(chunk)\n          bodyLen += chunk.length\n        })\n        self.on(\"end\", function () {\n          if (self._aborted) return\n          \n          if (buffer.length && Buffer.isBuffer(buffer[0])) {\n            var body = new Buffer(bodyLen)\n            var i = 0\n            buffer.forEach(function (chunk) {\n              chunk.copy(body, i, 0, chunk.length)\n              i += chunk.length\n            })\n            if (self.encoding === null) {\n              response.body = body\n            } else {\n              response.body = body.toString(self.encoding)\n            }\n          } else if (buffer.length) {\n            response.body = buffer.join('')\n          }\n\n          if (self._json) {\n            try {\n              response.body = JSON.parse(response.body)\n            } catch (e) {}\n          }\n          \n          self.emit('complete', response, response.body)\n        })\n      }\n    }\n  })\n\n  if (self.timeout && !self.timeoutTimer) {\n    self.timeoutTimer = setTimeout(function () {\n      self.req.abort()\n      var e = new Error(\"ETIMEDOUT\")\n      e.code = \"ETIMEDOUT\"\n      self.emit(\"error\", e)\n    }, self.timeout)\n    \n    // Set additional timeout on socket - in case if remote\n    // server freeze after sending headers\n    if (self.req.setTimeout) { // only works on node 0.6+\n      self.req.setTimeout(self.timeout, function () {\n        if (self.req) {\n          self.req.abort()\n          var e = new Error(\"ESOCKETTIMEDOUT\")\n          e.code = \"ESOCKETTIMEDOUT\"\n          self.emit(\"error\", e)\n        }\n      })\n    }\n  }\n  \n  self.req.on('error', self.clientErrorHandler)\n  self.req.on('drain', function() {\n    self.emit('drain')\n  })\n  self.on('end', function() {\n    if ( self.req.connection ) self.req.connection.removeListener('error', self._parserErrorHandler)\n  })\n  self.emit('request', self.req)\n}\n\nRequest.prototype.abort = function () {\n  this._aborted = true;\n  \n  if (this.req) {\n    this.req.abort()\n  }\n  else if (this.response) {\n    this.response.abort()\n  }\n  \n  this.emit(\"abort\")\n}\n\nRequest.prototype.pipeDest = function (dest) {\n  var response = this.response\n  // Called after the response is received\n  if (dest.headers) {\n    dest.headers['content-type'] = response.headers['content-type']\n    if (response.headers['content-length']) {\n      dest.headers['content-length'] = response.headers['content-length']\n    }\n  }\n  if (dest.setHeader) {\n    for (var i in response.headers) {\n      dest.setHeader(i, response.headers[i])\n    }\n    dest.statusCode = response.statusCode\n  }\n  if (this.pipefilter) this.pipefilter(response, dest)\n}\n\n// Composable API\nRequest.prototype.setHeader = function (name, value, clobber) {\n  if (clobber === undefined) clobber = true\n  if (clobber || !this.headers.hasOwnProperty(name)) this.headers[name] = value\n  else this.headers[name] += ',' + value\n  return this\n}\nRequest.prototype.setHeaders = function (headers) {\n  for (var i in headers) {this.setHeader(i, headers[i])}\n  return this\n}\nRequest.prototype.qs = function (q, clobber) {\n  var base\n  if (!clobber && this.uri.query) base = qs.parse(this.uri.query)\n  else base = {}\n  \n  for (var i in q) {\n    base[i] = q[i]\n  }\n  \n  this.uri = url.parse(this.uri.href.split('?')[0] + '?' + qs.stringify(base))\n  this.url = this.uri\n  \n  return this\n}\nRequest.prototype.form = function (form) {\n  if (form) {\n    this.headers['content-type'] = 'application/x-www-form-urlencoded; charset=utf-8'\n    this.body = qs.stringify(form).toString('utf8')\n    return this\n  } \n  // create form-data object\n  this._form = new FormData()\n  return this._form\n}\nRequest.prototype.multipart = function (multipart) {\n  var self = this\n  self.body = []\n\n  if (!self.headers['content-type']) {\n    self.headers['content-type'] = 'multipart/related; boundary=' + self.boundary;\n  } else {\n    self.headers['content-type'] = self.headers['content-type'].split(';')[0] + '; boundary=' + self.boundary;\n  }\n\n  if (!multipart.forEach) throw new Error('Argument error, options.multipart.')\n\n  if (self.preambleCRLF) {\n    self.body.push(new Buffer('\\r\\n'))\n  }\n  \n  multipart.forEach(function (part) {\n    var body = part.body\n    if(body == null) throw Error('Body attribute missing in multipart.')\n    delete part.body\n    var preamble = '--' + self.boundary + '\\r\\n'\n    Object.keys(part).forEach(function (key) {\n      preamble += key + ': ' + part[key] + '\\r\\n'\n    })\n    preamble += '\\r\\n'\n    self.body.push(new Buffer(preamble))\n    self.body.push(new Buffer(body))\n    self.body.push(new Buffer('\\r\\n'))\n  })\n  self.body.push(new Buffer('--' + self.boundary + '--'))\n  return self\n}\nRequest.prototype.json = function (val) {\n  this.setHeader('content-type', 'application/json')\n  this.setHeader('accept', 'application/json')\n  this._json = true\n  if (typeof val === 'boolean') {\n    if (typeof this.body === 'object') this.body = JSON.stringify(this.body)\n  } else {\n    this.body = JSON.stringify(val)\n  }\n  return this\n}\nRequest.prototype.aws = function (opts, now) {\n  if (!now) {\n    this._aws = opts\n    return this\n  }\n  var date = new Date()\n  this.setHeader('date', date.toUTCString())\n  this.setHeader('authorization', aws.authorization(\n    { key: opts.key\n    , secret: opts.secret\n    , verb: this.method\n    , date: date\n    , resource: aws.canonicalizeResource('/' + opts.bucket + this.path)\n    , contentType: this.headers['content-type'] || ''\n    , md5: this.headers['content-md5'] || ''\n    , amazonHeaders: aws.canonicalizeHeaders(this.headers)\n    }\n  ))\n  \n  return this\n}\n\nRequest.prototype.oauth = function (_oauth) {\n  var form\n  if (this.headers['content-type'] && \n      this.headers['content-type'].slice(0, 'application/x-www-form-urlencoded'.length) ===\n        'application/x-www-form-urlencoded' \n     ) {\n    form = qs.parse(this.body)\n  }\n  if (this.uri.query) {\n    form = qs.parse(this.uri.query)\n  } \n  if (!form) form = {}\n  var oa = {}\n  for (var i in form) oa[i] = form[i]\n  for (var i in _oauth) oa['oauth_'+i] = _oauth[i]\n  if (!oa.oauth_version) oa.oauth_version = '1.0'\n  if (!oa.oauth_timestamp) oa.oauth_timestamp = Math.floor( (new Date()).getTime() / 1000 ).toString()\n  if (!oa.oauth_nonce) oa.oauth_nonce = uuid().replace(/-/g, '')\n  \n  oa.oauth_signature_method = 'HMAC-SHA1'\n  \n  var consumer_secret = oa.oauth_consumer_secret\n  delete oa.oauth_consumer_secret\n  var token_secret = oa.oauth_token_secret\n  delete oa.oauth_token_secret\n  \n  var baseurl = this.uri.protocol + '//' + this.uri.host + this.uri.pathname\n  var signature = oauth.hmacsign(this.method, baseurl, oa, consumer_secret, token_secret)\n  \n  // oa.oauth_signature = signature\n  for (var i in form) {\n    if ( i.slice(0, 'oauth_') in _oauth) {\n      // skip \n    } else {\n      delete oa['oauth_'+i]\n      delete oa[i]\n    }\n  }\n  this.headers.Authorization = \n    'OAuth '+Object.keys(oa).sort().map(function (i) {return i+'=\"'+oauth.rfc3986(oa[i])+'\"'}).join(',')\n  this.headers.Authorization += ',oauth_signature=\"'+oauth.rfc3986(signature)+'\"'\n  return this\n}\nRequest.prototype.jar = function (jar) {\n  var cookies\n  \n  if (this._redirectsFollowed === 0) {\n    this.originalCookieHeader = this.headers.cookie\n  }\n  \n  if (jar === false) {\n    // disable cookies\n    cookies = false;\n    this._disableCookies = true;\n  } else if (jar) {\n    // fetch cookie from the user defined cookie jar\n    cookies = jar.get({ url: this.uri.href })\n  } else {\n    // fetch cookie from the global cookie jar\n    cookies = cookieJar.get({ url: this.uri.href })\n  }\n  \n  if (cookies && cookies.length) {\n    var cookieString = cookies.map(function (c) {\n      return c.name + \"=\" + c.value\n    }).join(\"; \")\n\n    if (this.originalCookieHeader) {\n      // Don't overwrite existing Cookie header\n      this.headers.cookie = this.originalCookieHeader + '; ' + cookieString\n    } else {\n      this.headers.cookie = cookieString\n    }\n  }\n  this._jar = jar\n  return this\n}\n\n\n// Stream API\nRequest.prototype.pipe = function (dest, opts) {\n  if (this.response) {\n    if (this._destdata) {\n      throw new Error(\"You cannot pipe after data has been emitted from the response.\")\n    } else if (this._ended) {\n      throw new Error(\"You cannot pipe after the response has been ended.\")\n    } else {\n      stream.Stream.prototype.pipe.call(this, dest, opts)\n      this.pipeDest(dest)\n      return dest\n    }\n  } else {\n    this.dests.push(dest)\n    stream.Stream.prototype.pipe.call(this, dest, opts)\n    return dest\n  }\n}\nRequest.prototype.write = function () {\n  if (!this._started) this.start()\n  return this.req.write.apply(this.req, arguments)\n}\nRequest.prototype.end = function (chunk) {\n  if (chunk) this.write(chunk)\n  if (!this._started) this.start()\n  this.req.end()\n}\nRequest.prototype.pause = function () {\n  if (!this.response) this._paused = true\n  else this.response.pause.apply(this.response, arguments)\n}\nRequest.prototype.resume = function () {\n  if (!this.response) this._paused = false\n  else this.response.resume.apply(this.response, arguments)\n}\nRequest.prototype.destroy = function () {\n  if (!this._ended) this.end()\n}\n\n// organize params for post, put, head, del\nfunction initParams(uri, options, callback) {\n  if ((typeof options === 'function') && !callback) callback = options;\n  if (options && typeof options === 'object') {\n    options.uri = uri;\n  } else if (typeof uri === 'string') {\n    options = {uri:uri};\n  } else {\n    options = uri;\n    uri = options.uri;\n  }\n  return { uri: uri, options: options, callback: callback };\n}\n\nfunction request (uri, options, callback) {\n  if (typeof uri === 'undefined') throw new Error('undefined is not a valid uri or options object.')\n  if ((typeof options === 'function') && !callback) callback = options;\n  if (options && typeof options === 'object') {\n    options.uri = uri;\n  } else if (typeof uri === 'string') {\n    options = {uri:uri};\n  } else {\n    options = uri;\n  }\n\n  if (callback) options.callback = callback;\n  var r = new Request(options)\n  return r\n}\n\nmodule.exports = request\n\nrequest.initParams = initParams;\n\nrequest.defaults = function (options, requester) {\n  var def = function (method) {\n    var d = function (uri, opts, callback) {\n      var params = initParams(uri, opts, callback);\n      for (var i in options) {\n        if (params.options[i] === undefined) params.options[i] = options[i]\n      }\n      if(typeof requester === 'function') {\n        if(method === request) {\n          method = requester;\n        } else {\n          params.options._requester = requester;\n        }\n      }\n      return method(params.options, params.callback);\n    }\n    return d;\n  }\n  var de = def(request)\n  de.get = def(request.get)\n  de.post = def(request.post)\n  de.put = def(request.put)\n  de.head = def(request.head)\n  de.del = def(request.del)\n  de.cookie = def(request.cookie)\n  de.jar = def(request.jar)\n  return de\n}\n\nrequest.forever = function (agentOptions, optionsArg) {\n  var options = {}\n  if (optionsArg) {\n    for (option in optionsArg) {\n      options[option] = optionsArg[option]\n    }\n  }\n  if (agentOptions) options.agentOptions = agentOptions\n  options.forever = true\n  return request.defaults(options)\n}\n\nrequest.get = request\nrequest.post = function (uri, options, callback) {\n  var params = initParams(uri, options, callback);\n  params.options.method = 'POST';\n  return request(params.uri || null, params.options, params.callback)\n}\nrequest.put = function (uri, options, callback) {\n  var params = initParams(uri, options, callback);\n  params.options.method = 'PUT'\n  return request(params.uri || null, params.options, params.callback)\n}\nrequest.head = function (uri, options, callback) {\n  var params = initParams(uri, options, callback);\n  params.options.method = 'HEAD'\n  if (params.options.body || \n      params.options.requestBodyStream || \n      (params.options.json && typeof params.options.json !== 'boolean') || \n      params.options.multipart) {\n    throw new Error(\"HTTP HEAD requests MUST NOT include a request body.\")\n  }\n  return request(params.uri || null, params.options, params.callback)\n}\nrequest.del = function (uri, options, callback) {\n  var params = initParams(uri, options, callback);\n  params.options.method = 'DELETE'\n  if(typeof params.options._requester === 'function') {\n    request = params.options._requester;\n  }\n  return request(params.uri || null, params.options, params.callback)\n}\nrequest.jar = function () {\n  return new CookieJar\n}\nrequest.cookie = function (str) {\n  if (str && str.uri) str = str.uri\n  if (typeof str !== 'string') throw new Error(\"The cookie function only accepts STRING as param\")\n  return new Cookie(str)\n}\n\n// Safe toJSON\n\nfunction getSafe (self, uuid) {  \n  if (typeof self === 'object' || typeof self === 'function') var safe = {}\n  if (Array.isArray(self)) var safe = []\n\n  var recurse = []\n  \n  Object.defineProperty(self, uuid, {})\n  \n  var attrs = Object.keys(self).filter(function (i) {\n    if (i === uuid) return false \n    if ( (typeof self[i] !== 'object' && typeof self[i] !== 'function') || self[i] === null) return true\n    return !(Object.getOwnPropertyDescriptor(self[i], uuid))\n  })\n  \n  \n  for (var i=0;i<attrs.length;i++) {\n    if ( (typeof self[attrs[i]] !== 'object' && typeof self[attrs[i]] !== 'function') || \n          self[attrs[i]] === null\n        ) {\n      safe[attrs[i]] = self[attrs[i]]\n    } else {\n      recurse.push(attrs[i])\n      Object.defineProperty(self[attrs[i]], uuid, {})\n    }\n  }\n\n  for (var i=0;i<recurse.length;i++) {\n    safe[recurse[i]] = getSafe(self[recurse[i]], uuid)\n  }\n  \n  return safe\n}\n\nfunction toJSON () {\n  return getSafe(this, (((1+Math.random())*0x10000)|0).toString(16))\n}\n\nRequest.prototype.toJSON = toJSON\n\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap-build-api/node_modules/request/oauth.js":"var crypto = require('crypto')\n  , qs = require('querystring')\n  ;\n\nfunction sha1 (key, body) {\n  return crypto.createHmac('sha1', key).update(body).digest('base64')\n}\n\nfunction rfc3986 (str) {\n  return encodeURIComponent(str)\n    .replace(/!/g,'%21')\n    .replace(/\\*/g,'%2A')\n    .replace(/\\(/g,'%28')\n    .replace(/\\)/g,'%29')\n    .replace(/'/g,'%27')\n    ;\n}\n\nfunction hmacsign (httpMethod, base_uri, params, consumer_secret, token_secret, body) {\n  // adapted from https://dev.twitter.com/docs/auth/oauth\n  var base = \n    (httpMethod || 'GET') + \"&\" +\n    encodeURIComponent(  base_uri ) + \"&\" +\n    Object.keys(params).sort().map(function (i) {\n      // big WTF here with the escape + encoding but it's what twitter wants\n      return escape(rfc3986(i)) + \"%3D\" + escape(rfc3986(params[i]))\n    }).join(\"%26\")\n  var key = encodeURIComponent(consumer_secret) + '&'\n  if (token_secret) key += encodeURIComponent(token_secret)\n  return sha1(key, base)\n}\n\nexports.hmacsign = hmacsign\nexports.rfc3986 = rfc3986","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap-build-api/node_modules/request/uuid.js":"module.exports = function () {\n  var s = [], itoh = '0123456789ABCDEF';\n \n  // Make array of random hex digits. The UUID only has 32 digits in it, but we\n  // allocate an extra items to make room for the '-'s we'll be inserting.\n  for (var i = 0; i <36; i++) s[i] = Math.floor(Math.random()*0x10);\n \n  // Conform to RFC-4122, section 4.4\n  s[14] = 4;  // Set 4 high bits of time_high field to version\n  s[19] = (s[19] & 0x3) | 0x8;  // Specify 2 high bits of clock sequence\n \n  // Convert to hex chars\n  for (var i = 0; i <36; i++) s[i] = itoh[s[i]];\n \n  // Insert '-'s\n  s[8] = s[13] = s[18] = s[23] = '-';\n \n  return s.join('');\n}\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap-build-api/node_modules/request/forever.js":"module.exports = ForeverAgent\nForeverAgent.SSL = ForeverAgentSSL\n\nvar util = require('util')\n  , Agent = require('http').Agent\n  , net = require('net')\n  , tls = require('tls')\n  , AgentSSL = require('https').Agent\n\nfunction ForeverAgent(options) {\n  var self = this\n  self.options = options || {}\n  self.requests = {}\n  self.sockets = {}\n  self.freeSockets = {}\n  self.maxSockets = self.options.maxSockets || Agent.defaultMaxSockets\n  self.minSockets = self.options.minSockets || ForeverAgent.defaultMinSockets\n  self.on('free', function(socket, host, port) {\n    var name = host + ':' + port\n    if (self.requests[name] && self.requests[name].length) {\n      self.requests[name].shift().onSocket(socket)\n    } else if (self.sockets[name].length < self.minSockets) {\n      if (!self.freeSockets[name]) self.freeSockets[name] = []\n      self.freeSockets[name].push(socket)\n      \n      // if an error happens while we don't use the socket anyway, meh, throw the socket away\n      function onIdleError() {\n        socket.destroy()\n      }\n      socket._onIdleError = onIdleError\n      socket.on('error', onIdleError)\n    } else {\n      // If there are no pending requests just destroy the\n      // socket and it will get removed from the pool. This\n      // gets us out of timeout issues and allows us to\n      // default to Connection:keep-alive.\n      socket.destroy();\n    }\n  })\n\n}\nutil.inherits(ForeverAgent, Agent)\n\nForeverAgent.defaultMinSockets = 5\n\n\nForeverAgent.prototype.createConnection = net.createConnection\nForeverAgent.prototype.addRequestNoreuse = Agent.prototype.addRequest\nForeverAgent.prototype.addRequest = function(req, host, port) {\n  var name = host + ':' + port\n  if (this.freeSockets[name] && this.freeSockets[name].length > 0 && !req.useChunkedEncodingByDefault) {\n    var idleSocket = this.freeSockets[name].pop()\n    idleSocket.removeListener('error', idleSocket._onIdleError)\n    delete idleSocket._onIdleError\n    req._reusedSocket = true\n    req.onSocket(idleSocket)\n  } else {\n    this.addRequestNoreuse(req, host, port)\n  }\n}\n\nForeverAgent.prototype.removeSocket = function(s, name, host, port) {\n  if (this.sockets[name]) {\n    var index = this.sockets[name].indexOf(s);\n    if (index !== -1) {\n      this.sockets[name].splice(index, 1);\n    }\n  } else if (this.sockets[name] && this.sockets[name].length === 0) {\n    // don't leak\n    delete this.sockets[name];\n    delete this.requests[name];\n  }\n  \n  if (this.freeSockets[name]) {\n    var index = this.freeSockets[name].indexOf(s)\n    if (index !== -1) {\n      this.freeSockets[name].splice(index, 1)\n      if (this.freeSockets[name].length === 0) {\n        delete this.freeSockets[name]\n      }\n    }\n  }\n\n  if (this.requests[name] && this.requests[name].length) {\n    // If we have pending requests and a socket gets closed a new one\n    // needs to be created to take over in the pool for the one that closed.\n    this.createSocket(name, host, port).emit('free');\n  }\n}\n\nfunction ForeverAgentSSL (options) {\n  ForeverAgent.call(this, options)\n}\nutil.inherits(ForeverAgentSSL, ForeverAgent)\n\nForeverAgentSSL.prototype.createConnection = createConnectionSSL\nForeverAgentSSL.prototype.addRequestNoreuse = AgentSSL.prototype.addRequest\n\nfunction createConnectionSSL (port, host, options) {\n  options.port = port\n  options.host = host\n  return tls.connect(options)\n}\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap-build-api/node_modules/request/vendor/cookie/index.js":"/*!\n * Tobi - Cookie\n * Copyright(c) 2010 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\n\nvar url = require('url');\n\n/**\n * Initialize a new `Cookie` with the given cookie `str` and `req`.\n *\n * @param {String} str\n * @param {IncomingRequest} req\n * @api private\n */\n\nvar Cookie = exports = module.exports = function Cookie(str, req) {\n  this.str = str;\n\n  // Map the key/val pairs\n  str.split(/ *; */).reduce(function(obj, pair){\n   var p = pair.indexOf('=');\n   var key = p > 0 ? pair.substring(0, p).trim() : pair.trim();\n   var lowerCasedKey = key.toLowerCase();\n   var value = p > 0 ? pair.substring(p + 1).trim() : true;\n\n   if (!obj.name) {\n    // First key is the name\n    obj.name = key;\n    obj.value = value;\n   }\n   else if (lowerCasedKey === 'httponly') {\n    obj.httpOnly = value;\n   }\n   else {\n    obj[lowerCasedKey] = value;\n   }\n   return obj;\n  }, this);\n\n  // Expires\n  this.expires = this.expires\n    ? new Date(this.expires)\n    : Infinity;\n\n  // Default or trim path\n  this.path = this.path\n    ? this.path.trim(): req \n    ? url.parse(req.url).pathname: '/';\n};\n\n/**\n * Return the original cookie string.\n *\n * @return {String}\n * @api public\n */\n\nCookie.prototype.toString = function(){\n  return this.str;\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap-build-api/node_modules/request/vendor/cookie/jar.js":"/*!\n* Tobi - CookieJar\n* Copyright(c) 2010 LearnBoost <dev@learnboost.com>\n* MIT Licensed\n*/\n\n/**\n* Module dependencies.\n*/\n\nvar url = require('url');\n\n/**\n* Initialize a new `CookieJar`.\n*\n* @api private\n*/\n\nvar CookieJar = exports = module.exports = function CookieJar() {\n  this.cookies = [];\n};\n\n/**\n* Add the given `cookie` to the jar.\n*\n* @param {Cookie} cookie\n* @api private\n*/\n\nCookieJar.prototype.add = function(cookie){\n  this.cookies = this.cookies.filter(function(c){\n    // Avoid duplication (same path, same name)\n    return !(c.name == cookie.name && c.path == cookie.path);\n  });\n  this.cookies.push(cookie);\n};\n\n/**\n* Get cookies for the given `req`.\n*\n* @param {IncomingRequest} req\n* @return {Array}\n* @api private\n*/\n\nCookieJar.prototype.get = function(req){\n  var path = url.parse(req.url).pathname\n    , now = new Date\n    , specificity = {};\n  return this.cookies.filter(function(cookie){\n    if (0 == path.indexOf(cookie.path) && now < cookie.expires\n      && cookie.path.length > (specificity[cookie.name] || 0))\n      return specificity[cookie.name] = cookie.path.length;\n  });\n};\n\n/**\n* Return Cookie string for the given `req`.\n*\n* @param {IncomingRequest} req\n* @return {String}\n* @api private\n*/\n\nCookieJar.prototype.cookieString = function(req){\n  var cookies = this.get(req);\n  if (cookies.length) {\n    return cookies.map(function(cookie){\n      return cookie.name + '=' + cookie.value;\n    }).join('; ');\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap-build-api/node_modules/request/tunnel.js":"'use strict';\n\nvar net = require('net');\nvar tls = require('tls');\nvar http = require('http');\nvar https = require('https');\nvar events = require('events');\nvar assert = require('assert');\nvar util = require('util');\n\n\nexports.httpOverHttp = httpOverHttp;\nexports.httpsOverHttp = httpsOverHttp;\nexports.httpOverHttps = httpOverHttps;\nexports.httpsOverHttps = httpsOverHttps;\n\n\nfunction httpOverHttp(options) {\n  var agent = new TunnelingAgent(options);\n  agent.request = http.request;\n  return agent;\n}\n\nfunction httpsOverHttp(options) {\n  var agent = new TunnelingAgent(options);\n  agent.request = http.request;\n  agent.createSocket = createSecureSocket;\n  return agent;\n}\n\nfunction httpOverHttps(options) {\n  var agent = new TunnelingAgent(options);\n  agent.request = https.request;\n  return agent;\n}\n\nfunction httpsOverHttps(options) {\n  var agent = new TunnelingAgent(options);\n  agent.request = https.request;\n  agent.createSocket = createSecureSocket;\n  return agent;\n}\n\n\nfunction TunnelingAgent(options) {\n  var self = this;\n  self.options = options || {};\n  self.proxyOptions = self.options.proxy || {};\n  self.maxSockets = self.options.maxSockets || http.Agent.defaultMaxSockets;\n  self.requests = [];\n  self.sockets = [];\n\n  self.on('free', function onFree(socket, host, port) {\n    for (var i = 0, len = self.requests.length; i < len; ++i) {\n      var pending = self.requests[i];\n      if (pending.host === host && pending.port === port) {\n        // Detect the request to connect same origin server,\n        // reuse the connection.\n        self.requests.splice(i, 1);\n        pending.request.onSocket(socket);\n        return;\n      }\n    }\n    socket.destroy();\n    self.removeSocket(socket);\n  });\n}\nutil.inherits(TunnelingAgent, events.EventEmitter);\n\nTunnelingAgent.prototype.addRequest = function addRequest(req, host, port) {\n  var self = this;\n\n  if (self.sockets.length >= this.maxSockets) {\n    // We are over limit so we'll add it to the queue.\n    self.requests.push({host: host, port: port, request: req});\n    return;\n  }\n\n  // If we are under maxSockets create a new one.\n  self.createSocket({host: host, port: port, request: req}, function(socket) {\n    socket.on('free', onFree);\n    socket.on('close', onCloseOrRemove);\n    socket.on('agentRemove', onCloseOrRemove);\n    req.onSocket(socket);\n\n    function onFree() {\n      self.emit('free', socket, host, port);\n    }\n\n    function onCloseOrRemove(err) {\n      self.removeSocket();\n      socket.removeListener('free', onFree);\n      socket.removeListener('close', onCloseOrRemove);\n      socket.removeListener('agentRemove', onCloseOrRemove);\n    }\n  });\n};\n\nTunnelingAgent.prototype.createSocket = function createSocket(options, cb) {\n  var self = this;\n  var placeholder = {};\n  self.sockets.push(placeholder);\n\n  var connectOptions = mergeOptions({}, self.proxyOptions, {\n    method: 'CONNECT',\n    path: options.host + ':' + options.port,\n    agent: false\n  });\n  if (connectOptions.proxyAuth) {\n    connectOptions.headers = connectOptions.headers || {};\n    connectOptions.headers['Proxy-Authorization'] = 'Basic ' +\n        new Buffer(connectOptions.proxyAuth).toString('base64');\n  }\n\n  debug('making CONNECT request');\n  var connectReq = self.request(connectOptions);\n  connectReq.useChunkedEncodingByDefault = false; // for v0.6\n  connectReq.once('response', onResponse); // for v0.6\n  connectReq.once('upgrade', onUpgrade);   // for v0.6\n  connectReq.once('connect', onConnect);   // for v0.7 or later\n  connectReq.once('error', onError);\n  connectReq.end();\n\n  function onResponse(res) {\n    // Very hacky. This is necessary to avoid http-parser leaks.\n    res.upgrade = true;\n  }\n\n  function onUpgrade(res, socket, head) {\n    // Hacky.\n    process.nextTick(function() {\n      onConnect(res, socket, head);\n    });\n  }\n\n  function onConnect(res, socket, head) {\n    connectReq.removeAllListeners();\n    socket.removeAllListeners();\n\n    if (res.statusCode === 200) {\n      assert.equal(head.length, 0);\n      debug('tunneling connection has established');\n      self.sockets[self.sockets.indexOf(placeholder)] = socket;\n      cb(socket);\n    } else {\n      debug('tunneling socket could not be established, statusCode=%d',\n            res.statusCode);\n      var error = new Error('tunneling socket could not be established, ' +\n                            'sutatusCode=' + res.statusCode);\n      error.code = 'ECONNRESET';\n      options.request.emit('error', error);\n      self.removeSocket(placeholder);\n    }\n  }\n\n  function onError(cause) {\n    connectReq.removeAllListeners();\n\n    debug('tunneling socket could not be established, cause=%s\\n',\n          cause.message, cause.stack);\n    var error = new Error('tunneling socket could not be established, ' +\n                          'cause=' + cause.message);\n    error.code = 'ECONNRESET';\n    options.request.emit('error', error);\n    self.removeSocket(placeholder);\n  }\n};\n\nTunnelingAgent.prototype.removeSocket = function removeSocket(socket) {\n  var pos = this.sockets.indexOf(socket)\n  if (pos === -1) {\n    return;\n  }\n  this.sockets.splice(pos, 1);\n\n  var pending = this.requests.shift();\n  if (pending) {\n    // If we have pending requests and a socket gets closed a new one\n    // needs to be created to take over in the pool for the one that closed.\n    this.createSocket(pending, function(socket) {\n      pending.request.onSocket(socket);\n    });\n  }\n};\n\nfunction createSecureSocket(options, cb) {\n  var self = this;\n  TunnelingAgent.prototype.createSocket.call(self, options, function(socket) {\n    // 0 is dummy port for v0.6\n    var secureSocket = tls.connect(0, mergeOptions({}, self.options, {\n      servername: options.host,\n      socket: socket\n    }));\n    cb(secureSocket);\n  });\n}\n\n\nfunction mergeOptions(target) {\n  for (var i = 1, len = arguments.length; i < len; ++i) {\n    var overrides = arguments[i];\n    if (typeof overrides === 'object') {\n      var keys = Object.keys(overrides);\n      for (var j = 0, keyLen = keys.length; j < keyLen; ++j) {\n        var k = keys[j];\n        if (overrides[k] !== undefined) {\n          target[k] = overrides[k];\n        }\n      }\n    }\n  }\n  return target;\n}\n\n\nvar debug;\nif (process.env.NODE_DEBUG && /\\btunnel\\b/.test(process.env.NODE_DEBUG)) {\n  debug = function() {\n    var args = Array.prototype.slice.call(arguments);\n    if (typeof args[0] === 'string') {\n      args[0] = 'TUNNEL: ' + args[0];\n    } else {\n      args.unshift('TUNNEL:');\n    }\n    console.error.apply(console, args);\n  }\n} else {\n  debug = function() {};\n}\nexports.debug = debug; // for test\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap-build-api/node_modules/request/aws.js":"\n/*!\n * knox - auth\n * Copyright(c) 2010 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\n\nvar crypto = require('crypto')\n  , parse = require('url').parse;\n\n/**\n * Valid keys.\n */\n\nvar keys = [\n    'acl'\n  , 'location'\n  , 'logging'\n  , 'notification'\n  , 'partNumber'\n  , 'policy'\n  , 'requestPayment'\n  , 'torrent'\n  , 'uploadId'\n  , 'uploads'\n  , 'versionId'\n  , 'versioning'\n  , 'versions'\n  , 'website'\n];\n\n/**\n * Return an \"Authorization\" header value with the given `options`\n * in the form of \"AWS <key>:<signature>\"\n *\n * @param {Object} options\n * @return {String}\n * @api private\n */\n\nexports.authorization = function(options){\n  return 'AWS ' + options.key + ':' + exports.sign(options);\n};\n\n/**\n * Simple HMAC-SHA1 Wrapper\n *\n * @param {Object} options\n * @return {String}\n * @api private\n */ \n\nexports.hmacSha1 = function(options){\n  return crypto.createHmac('sha1', options.secret).update(options.message).digest('base64');\n};\n\n/**\n * Create a base64 sha1 HMAC for `options`. \n * \n * @param {Object} options\n * @return {String}\n * @api private\n */\n\nexports.sign = function(options){\n  options.message = exports.stringToSign(options);\n  return exports.hmacSha1(options);\n};\n\n/**\n * Create a base64 sha1 HMAC for `options`. \n *\n * Specifically to be used with S3 presigned URLs\n * \n * @param {Object} options\n * @return {String}\n * @api private\n */\n\nexports.signQuery = function(options){\n  options.message = exports.queryStringToSign(options);\n  return exports.hmacSha1(options);\n};\n\n/**\n * Return a string for sign() with the given `options`.\n *\n * Spec:\n * \n *    <verb>\\n\n *    <md5>\\n\n *    <content-type>\\n\n *    <date>\\n\n *    [headers\\n]\n *    <resource>\n *\n * @param {Object} options\n * @return {String}\n * @api private\n */\n\nexports.stringToSign = function(options){\n  var headers = options.amazonHeaders || '';\n  if (headers) headers += '\\n';\n  return [\n      options.verb\n    , options.md5\n    , options.contentType\n    , options.date.toUTCString()\n    , headers + options.resource\n  ].join('\\n');\n};\n\n/**\n * Return a string for sign() with the given `options`, but is meant exclusively\n * for S3 presigned URLs\n *\n * Spec:\n * \n *    <date>\\n\n *    <resource>\n *\n * @param {Object} options\n * @return {String}\n * @api private\n */\n\nexports.queryStringToSign = function(options){\n  return 'GET\\n\\n\\n' +\n    options.date + '\\n' +\n    options.resource;\n};\n\n/**\n * Perform the following:\n *\n *  - ignore non-amazon headers\n *  - lowercase fields\n *  - sort lexicographically\n *  - trim whitespace between \":\"\n *  - join with newline\n *\n * @param {Object} headers\n * @return {String}\n * @api private\n */\n\nexports.canonicalizeHeaders = function(headers){\n  var buf = []\n    , fields = Object.keys(headers);\n  for (var i = 0, len = fields.length; i < len; ++i) {\n    var field = fields[i]\n      , val = headers[field]\n      , field = field.toLowerCase();\n    if (0 !== field.indexOf('x-amz')) continue;\n    buf.push(field + ':' + val);\n  }\n  return buf.sort().join('\\n');\n};\n\n/**\n * Perform the following:\n *\n *  - ignore non sub-resources\n *  - sort lexicographically\n *\n * @param {String} resource\n * @return {String}\n * @api private\n */\n\nexports.canonicalizeResource = function(resource){\n  var url = parse(resource, true)\n    , path = url.pathname\n    , buf = [];\n\n  Object.keys(url.query).forEach(function(key){\n    if (!~keys.indexOf(key)) return;\n    var val = '' == url.query[key] ? '' : '=' + encodeURIComponent(url.query[key]);\n    buf.push(key + val);\n  });\n\n  return path + (buf.length\n    ? '?' + buf.sort().join('&')\n    : '');\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap-build-api/node_modules/request/node_modules/mime/mime.js":"var path = require('path');\nvar fs = require('fs');\n\nfunction Mime() {\n  // Map of extension -> mime type\n  this.types = Object.create(null);\n\n  // Map of mime type -> extension\n  this.extensions = Object.create(null);\n}\n\n/**\n * Define mimetype -> extension mappings.  Each key is a mime-type that maps\n * to an array of extensions associated with the type.  The first extension is\n * used as the default extension for the type.\n *\n * e.g. mime.define({'audio/ogg', ['oga', 'ogg', 'spx']});\n *\n * @param map (Object) type definitions\n */\nMime.prototype.define = function (map) {\n  for (var type in map) {\n    var exts = map[type];\n\n    for (var i = 0; i < exts.length; i++) {\n      this.types[exts[i]] = type;\n    }\n\n    // Default extension is the first one we encounter\n    if (!this.extensions[type]) {\n      this.extensions[type] = exts[0];\n    }\n  }\n};\n\n/**\n * Load an Apache2-style \".types\" file\n *\n * This may be called multiple times (it's expected).  Where files declare\n * overlapping types/extensions, the last file wins.\n *\n * @param file (String) path of file to load.\n */\nMime.prototype.load = function(file) {\n  // Read file and split into lines\n  var map = {},\n      content = fs.readFileSync(file, 'ascii'),\n      lines = content.split(/[\\r\\n]+/);\n\n  lines.forEach(function(line) {\n    // Clean up whitespace/comments, and split into fields\n    var fields = line.replace(/\\s*#.*|^\\s*|\\s*$/g, '').split(/\\s+/);\n    map[fields.shift()] = fields;\n  });\n\n  this.define(map);\n};\n\n/**\n * Lookup a mime type based on extension\n */\nMime.prototype.lookup = function(path, fallback) {\n  var ext = path.replace(/.*[\\.\\/]/, '').toLowerCase();\n\n  return this.types[ext] || fallback || this.default_type;\n};\n\n/**\n * Return file extension associated with a mime type\n */\nMime.prototype.extension = function(mimeType) {\n  return this.extensions[mimeType];\n};\n\n// Default instance\nvar mime = new Mime();\n\n// Load local copy of\n// http://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types\nmime.load(path.join(__dirname, 'types/mime.types'));\n\n// Load additional types from node.js community\nmime.load(path.join(__dirname, 'types/node.types'));\n\n// Default type\nmime.default_type = mime.lookup('bin');\n\n//\n// Additional API specific to the default instance\n//\n\nmime.Mime = Mime;\n\n/**\n * Lookup a charset based on mime type.\n */\nmime.charsets = {\n  lookup: function(mimeType, fallback) {\n    // Assume text types are utf8\n    return (/^text\\//).test(mimeType) ? 'UTF-8' : fallback;\n  }\n}\n\nmodule.exports = mime;\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap-build-api/node_modules/request/node_modules/form-data/lib/form_data.js":"var CombinedStream = require('combined-stream');\nvar util = require('util');\nvar path = require('path');\nvar http = require('http');\nvar https = require('https');\nvar parseUrl = require('url').parse;\nvar fs = require('fs');\nvar mime = require('mime');\nvar async = require('async');\n\nmodule.exports = FormData;\nfunction FormData() {\n  this._overheadLength = 0;\n  this._valueLength = 0;\n  this._lengthRetrievers = [];\n\n  CombinedStream.call(this);\n}\nutil.inherits(FormData, CombinedStream);\n\nFormData.LINE_BREAK = '\\r\\n';\n\nFormData.prototype.append = function(field, value) {\n  var append = CombinedStream.prototype.append.bind(this);\n\n  // all that streamy business can't handle numbers\n  if (typeof value == 'number') value = ''+value;\n\n  var header = this._multiPartHeader(field, value);\n  var footer = this._multiPartFooter(field, value);\n\n  append(header);\n  append(value);\n  append(footer);\n\n  this._trackLength(header, value)\n};\n\nFormData.prototype._trackLength = function(header, value) {\n  var valueLength = 0;\n  if (Buffer.isBuffer(value)) {\n    valueLength = value.length;\n  } else if (typeof value === 'string') {\n    valueLength = Buffer.byteLength(value);\n  }\n\n  this._valueLength += valueLength;\n  this._overheadLength +=\n    Buffer.byteLength(header) +\n    + FormData.LINE_BREAK.length;\n\n  // empty or ethier doesn't have path or not an http response\n  if (!value || ( !value.path && !(value.readable && value.hasOwnProperty('httpVersion')) )) {\n    return;\n  }\n\n  this._lengthRetrievers.push(function(next) {\n\n    // check if it's local file\n    if (value.hasOwnProperty('fd')) {\n      fs.stat(value.path, function(err, stat) {\n        if (err) {\n          next(err);\n          return;\n        }\n\n        next(null, stat.size);\n      });\n\n    // or http response\n    } else if (value.hasOwnProperty('httpVersion')) {\n      next(null, +value.headers['content-length']);\n\n    // or request stream http://github.com/mikeal/request\n    } else if (value.hasOwnProperty('httpModule')) {\n      // wait till response come back\n      value.on('response', function(response) {\n        value.pause();\n        next(null, +response.headers['content-length']);\n      });\n      value.resume();\n\n    // something else\n    } else {\n      next('Unknown stream');\n    }\n  });\n};\n\nFormData.prototype._multiPartHeader = function(field, value) {\n  var boundary = this.getBoundary();\n  var header =\n    '--' + boundary + FormData.LINE_BREAK +\n    'Content-Disposition: form-data; name=\"' + field + '\"';\n\n  // fs- and request- streams have path property\n  // TODO: Use request's response mime-type\n  if (value.path) {\n    header +=\n      '; filename=\"' + path.basename(value.path) + '\"' + FormData.LINE_BREAK +\n      'Content-Type: ' + mime.lookup(value.path);\n\n  // http response has not\n  } else if (value.readable && value.hasOwnProperty('httpVersion')) {\n    header +=\n      '; filename=\"' + path.basename(value.client._httpMessage.path) + '\"' + FormData.LINE_BREAK +\n      'Content-Type: ' + value.headers['content-type'];\n  }\n\n  header += FormData.LINE_BREAK + FormData.LINE_BREAK;\n  return header;\n};\n\nFormData.prototype._multiPartFooter = function(field, value) {\n  return function(next) {\n    var footer = FormData.LINE_BREAK;\n\n    var lastPart = (this._streams.length === 0);\n    if (lastPart) {\n      footer += this._lastBoundary();\n    }\n\n    next(footer);\n  }.bind(this);\n};\n\nFormData.prototype._lastBoundary = function() {\n  return '--' + this.getBoundary() + '--';\n};\n\nFormData.prototype.getHeaders = function(userHeaders) {\n  var formHeaders = {\n    'content-type': 'multipart/form-data; boundary=' + this.getBoundary()\n  };\n\n  for (var header in userHeaders) {\n    formHeaders[header.toLowerCase()] = userHeaders[header];\n  }\n\n  return formHeaders;\n}\n\nFormData.prototype.getCustomHeaders = function(contentType) {\n    contentType = contentType ? contentType : 'multipart/form-data';\n\n    var formHeaders = {\n        'content-type': contentType + '; boundary=' + this.getBoundary(),\n        'content-length': this.getLengthSync()\n    };\n\n    return formHeaders;\n}\n\nFormData.prototype.getBoundary = function() {\n  if (!this._boundary) {\n    this._generateBoundary();\n  }\n\n  return this._boundary;\n};\n\nFormData.prototype._generateBoundary = function() {\n  // This generates a 50 character boundary similar to those used by Firefox.\n  // They are optimized for boyer-moore parsing.\n  var boundary = '--------------------------';\n  for (var i = 0; i < 24; i++) {\n    boundary += Math.floor(Math.random() * 10).toString(16);\n  }\n\n  this._boundary = boundary;\n};\n\nFormData.prototype.getLengthSync = function() {\n    var knownLength = this._overheadLength + this._valueLength;\n\n    if (this._streams.length) {\n        knownLength += this._lastBoundary().length;\n    }\n\n    return knownLength;\n};\n\nFormData.prototype.getLength = function(cb) {\n  var knownLength = this._overheadLength + this._valueLength;\n\n  if (this._streams.length) {\n    knownLength += this._lastBoundary().length;\n  }\n\n  if (!this._lengthRetrievers.length) {\n    process.nextTick(cb.bind(this, null, knownLength));\n    return;\n  }\n\n  async.parallel(this._lengthRetrievers, function(err, values) {\n    if (err) {\n      cb(err);\n      return;\n    }\n\n    values.forEach(function(length) {\n      knownLength += length;\n    });\n\n    cb(null, knownLength);\n  });\n};\n\nFormData.prototype.submit = function(url, cb) {\n  this.getLength(function(err, length) {\n    var request\n      , parsedUrl = parseUrl(url)\n      , options = {\n          method: 'post',\n          port: parsedUrl.port || 80,\n          path: parsedUrl.pathname,\n          headers: this.getHeaders({'Content-Length': length}),\n          host: parsedUrl.hostname\n        };\n\n    if (parsedUrl.protocol == 'https:') {\n      // override default port\n      if (!parsedUrl.port) options.port = 443;\n      request = https.request(options);\n    } else {\n      request = http.request(options);\n    }\n\n    this.pipe(request);\n    if (cb) {\n      request.on('error', cb);\n      request.on('response', cb.bind(this, null));\n    }\n\n    return request;\n  }.bind(this));\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap-build-api/node_modules/request/node_modules/form-data/node_modules/combined-stream/lib/combined_stream.js":"var util = require('util');\nvar Stream = require('stream').Stream;\nvar DelayedStream = require('delayed-stream');\n\nmodule.exports = CombinedStream;\nfunction CombinedStream() {\n  this.writable = false;\n  this.readable = true;\n  this.dataSize = 0;\n  this.maxDataSize = 2 * 1024 * 1024;\n  this.pauseStreams = true;\n\n  this._released = false;\n  this._streams = [];\n  this._currentStream = null;\n}\nutil.inherits(CombinedStream, Stream);\n\nCombinedStream.create = function(options) {\n  var combinedStream = new this();\n\n  options = options || {};\n  for (var option in options) {\n    combinedStream[option] = options[option];\n  }\n\n  return combinedStream;\n};\n\nCombinedStream.isStreamLike = function(stream) {\n  return (typeof stream !== 'function')\n    && (typeof stream !== 'string')\n    && (!Buffer.isBuffer(stream));\n};\n\nCombinedStream.prototype.append = function(stream) {\n  var isStreamLike = CombinedStream.isStreamLike(stream);\n\n  if (isStreamLike) {\n    if (!(stream instanceof DelayedStream)) {\n      stream.on('data', this._checkDataSize.bind(this));\n\n      stream = DelayedStream.create(stream, {\n        maxDataSize: Infinity,\n        pauseStream: this.pauseStreams,\n      });\n    }\n\n    this._handleErrors(stream);\n\n    if (this.pauseStreams) {\n      stream.pause();\n    }\n  }\n\n  this._streams.push(stream);\n  return this;\n};\n\nCombinedStream.prototype.pipe = function(dest, options) {\n  Stream.prototype.pipe.call(this, dest, options);\n  this.resume();\n};\n\nCombinedStream.prototype._getNext = function() {\n  this._currentStream = null;\n  var stream = this._streams.shift();\n\n\n  if (!stream) {\n    this.end();\n    return;\n  }\n\n  if (typeof stream !== 'function') {\n    this._pipeNext(stream);\n    return;\n  }\n\n  var getStream = stream;\n  getStream(function(stream) {\n    var isStreamLike = CombinedStream.isStreamLike(stream);\n    if (isStreamLike) {\n      stream.on('data', this._checkDataSize.bind(this));\n      this._handleErrors(stream);\n    }\n\n    this._pipeNext(stream);\n  }.bind(this));\n};\n\nCombinedStream.prototype._pipeNext = function(stream) {\n  this._currentStream = stream;\n\n  var isStreamLike = CombinedStream.isStreamLike(stream);\n  if (isStreamLike) {\n    stream.on('end', this._getNext.bind(this))\n    stream.pipe(this, {end: false});\n    return;\n  }\n\n  var value = stream;\n  this.write(value);\n  this._getNext();\n};\n\nCombinedStream.prototype._handleErrors = function(stream) {\n  var self = this;\n  stream.on('error', function(err) {\n    self._emitError(err);\n  });\n};\n\nCombinedStream.prototype.write = function(data) {\n  this.emit('data', data);\n};\n\nCombinedStream.prototype.pause = function() {\n  if (!this.pauseStreams) {\n    return;\n  }\n\n  this.emit('pause');\n};\n\nCombinedStream.prototype.resume = function() {\n  if (!this._released) {\n    this._released = true;\n    this.writable = true;\n    this._getNext();\n  }\n\n  this.emit('resume');\n};\n\nCombinedStream.prototype.end = function() {\n  this._reset();\n  this.emit('end');\n};\n\nCombinedStream.prototype.destroy = function() {\n  this._reset();\n  this.emit('close');\n};\n\nCombinedStream.prototype._reset = function() {\n  this.writable = false;\n  this._streams = [];\n  this._currentStream = null;\n};\n\nCombinedStream.prototype._checkDataSize = function() {\n  this._updateDataSize();\n  if (this.dataSize <= this.maxDataSize) {\n    return;\n  }\n\n  var message =\n    'DelayedStream#maxDataSize of ' + this.maxDataSize + ' bytes exceeded.'\n  this._emitError(new Error(message));\n};\n\nCombinedStream.prototype._updateDataSize = function() {\n  this.dataSize = 0;\n\n  var self = this;\n  this._streams.forEach(function(stream) {\n    if (!stream.dataSize) {\n      return;\n    }\n\n    self.dataSize += stream.dataSize;\n  });\n\n  if (this._currentStream && this._currentStream.dataSize) {\n    this.dataSize += this._currentStream.dataSize;\n  }\n};\n\nCombinedStream.prototype._emitError = function(err) {\n  this._reset();\n  this.emit('error', err);\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap-build-api/node_modules/request/node_modules/form-data/node_modules/combined-stream/node_modules/delayed-stream/lib/delayed_stream.js":"var Stream = require('stream').Stream;\nvar util = require('util');\n\nmodule.exports = DelayedStream;\nfunction DelayedStream() {\n  this.source = null;\n  this.dataSize = 0;\n  this.maxDataSize = 1024 * 1024;\n  this.pauseStream = true;\n\n  this._maxDataSizeExceeded = false;\n  this._released = false;\n  this._bufferedEvents = [];\n}\nutil.inherits(DelayedStream, Stream);\n\nDelayedStream.create = function(source, options) {\n  var delayedStream = new this();\n\n  options = options || {};\n  for (var option in options) {\n    delayedStream[option] = options[option];\n  }\n\n  delayedStream.source = source;\n\n  var realEmit = source.emit;\n  source.emit = function() {\n    delayedStream._handleEmit(arguments);\n    return realEmit.apply(source, arguments);\n  };\n\n  source.on('error', function() {});\n  if (delayedStream.pauseStream) {\n    source.pause();\n  }\n\n  return delayedStream;\n};\n\nDelayedStream.prototype.__defineGetter__('readable', function() {\n  return this.source.readable;\n});\n\nDelayedStream.prototype.resume = function() {\n  if (!this._released) {\n    this.release();\n  }\n\n  this.source.resume();\n};\n\nDelayedStream.prototype.pause = function() {\n  this.source.pause();\n};\n\nDelayedStream.prototype.release = function() {\n  this._released = true;\n\n  this._bufferedEvents.forEach(function(args) {\n    this.emit.apply(this, args);\n  }.bind(this));\n  this._bufferedEvents = [];\n};\n\nDelayedStream.prototype.pipe = function() {\n  var r = Stream.prototype.pipe.apply(this, arguments);\n  this.resume();\n  return r;\n};\n\nDelayedStream.prototype._handleEmit = function(args) {\n  if (this._released) {\n    this.emit.apply(this, args);\n    return;\n  }\n\n  if (args[0] === 'data') {\n    this.dataSize += args[1].length;\n    this._checkIfMaxDataSizeExceeded();\n  }\n\n  this._bufferedEvents.push(args);\n};\n\nDelayedStream.prototype._checkIfMaxDataSizeExceeded = function() {\n  if (this._maxDataSizeExceeded) {\n    return;\n  }\n\n  if (this.dataSize <= this.maxDataSize) {\n    return;\n  }\n\n  this._maxDataSizeExceeded = true;\n  var message =\n    'DelayedStream#maxDataSize of ' + this.maxDataSize + ' bytes exceeded.'\n  this.emit('error', new Error(message));\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap-build-api/node_modules/request/node_modules/form-data/node_modules/async/index.js":"// This file is just added for convenience so this repository can be\n// directly checked out into a project's deps folder\nmodule.exports = require('./lib/async');\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap-build-api/node_modules/request/node_modules/form-data/node_modules/async/lib/async.js":"/*global setTimeout: false, console: false */\n(function () {\n\n    var async = {};\n\n    // global on the server, window in the browser\n    var root = this,\n        previous_async = root.async;\n\n    if (typeof module !== 'undefined' && module.exports) {\n        module.exports = async;\n    }\n    else {\n        root.async = async;\n    }\n\n    async.noConflict = function () {\n        root.async = previous_async;\n        return async;\n    };\n\n    //// cross-browser compatiblity functions ////\n\n    var _forEach = function (arr, iterator) {\n        if (arr.forEach) {\n            return arr.forEach(iterator);\n        }\n        for (var i = 0; i < arr.length; i += 1) {\n            iterator(arr[i], i, arr);\n        }\n    };\n\n    var _map = function (arr, iterator) {\n        if (arr.map) {\n            return arr.map(iterator);\n        }\n        var results = [];\n        _forEach(arr, function (x, i, a) {\n            results.push(iterator(x, i, a));\n        });\n        return results;\n    };\n\n    var _reduce = function (arr, iterator, memo) {\n        if (arr.reduce) {\n            return arr.reduce(iterator, memo);\n        }\n        _forEach(arr, function (x, i, a) {\n            memo = iterator(memo, x, i, a);\n        });\n        return memo;\n    };\n\n    var _keys = function (obj) {\n        if (Object.keys) {\n            return Object.keys(obj);\n        }\n        var keys = [];\n        for (var k in obj) {\n            if (obj.hasOwnProperty(k)) {\n                keys.push(k);\n            }\n        }\n        return keys;\n    };\n\n    var _indexOf = function (arr, item) {\n        if (arr.indexOf) {\n            return arr.indexOf(item);\n        }\n        for (var i = 0; i < arr.length; i += 1) {\n            if (arr[i] === item) {\n                return i;\n            }\n        }\n        return -1;\n    };\n\n    //// exported async module functions ////\n\n    //// nextTick implementation with browser-compatible fallback ////\n    if (typeof process === 'undefined' || !(process.nextTick)) {\n        async.nextTick = function (fn) {\n            setTimeout(fn, 0);\n        };\n    }\n    else {\n        async.nextTick = process.nextTick;\n    }\n\n    async.forEach = function (arr, iterator, callback) {\n        if (!arr.length) {\n            return callback();\n        }\n        var completed = 0;\n        _forEach(arr, function (x) {\n            iterator(x, function (err) {\n                if (err) {\n                    callback(err);\n                    callback = function () {};\n                }\n                else {\n                    completed += 1;\n                    if (completed === arr.length) {\n                        callback();\n                    }\n                }\n            });\n        });\n    };\n\n    async.forEachSeries = function (arr, iterator, callback) {\n        if (!arr.length) {\n            return callback();\n        }\n        var completed = 0;\n        var iterate = function () {\n            iterator(arr[completed], function (err) {\n                if (err) {\n                    callback(err);\n                    callback = function () {};\n                }\n                else {\n                    completed += 1;\n                    if (completed === arr.length) {\n                        callback();\n                    }\n                    else {\n                        iterate();\n                    }\n                }\n            });\n        };\n        iterate();\n    };\n\n\n    var doParallel = function (fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [async.forEach].concat(args));\n        };\n    };\n    var doSeries = function (fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [async.forEachSeries].concat(args));\n        };\n    };\n\n\n    var _asyncMap = function (eachfn, arr, iterator, callback) {\n        var results = [];\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        eachfn(arr, function (x, callback) {\n            iterator(x.value, function (err, v) {\n                results[x.index] = v;\n                callback(err);\n            });\n        }, function (err) {\n            callback(err, results);\n        });\n    };\n    async.map = doParallel(_asyncMap);\n    async.mapSeries = doSeries(_asyncMap);\n\n\n    // reduce only has a series version, as doing reduce in parallel won't\n    // work in many situations.\n    async.reduce = function (arr, memo, iterator, callback) {\n        async.forEachSeries(arr, function (x, callback) {\n            iterator(memo, x, function (err, v) {\n                memo = v;\n                callback(err);\n            });\n        }, function (err) {\n            callback(err, memo);\n        });\n    };\n    // inject alias\n    async.inject = async.reduce;\n    // foldl alias\n    async.foldl = async.reduce;\n\n    async.reduceRight = function (arr, memo, iterator, callback) {\n        var reversed = _map(arr, function (x) {\n            return x;\n        }).reverse();\n        async.reduce(reversed, memo, iterator, callback);\n    };\n    // foldr alias\n    async.foldr = async.reduceRight;\n\n    var _filter = function (eachfn, arr, iterator, callback) {\n        var results = [];\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        eachfn(arr, function (x, callback) {\n            iterator(x.value, function (v) {\n                if (v) {\n                    results.push(x);\n                }\n                callback();\n            });\n        }, function (err) {\n            callback(_map(results.sort(function (a, b) {\n                return a.index - b.index;\n            }), function (x) {\n                return x.value;\n            }));\n        });\n    };\n    async.filter = doParallel(_filter);\n    async.filterSeries = doSeries(_filter);\n    // select alias\n    async.select = async.filter;\n    async.selectSeries = async.filterSeries;\n\n    var _reject = function (eachfn, arr, iterator, callback) {\n        var results = [];\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        eachfn(arr, function (x, callback) {\n            iterator(x.value, function (v) {\n                if (!v) {\n                    results.push(x);\n                }\n                callback();\n            });\n        }, function (err) {\n            callback(_map(results.sort(function (a, b) {\n                return a.index - b.index;\n            }), function (x) {\n                return x.value;\n            }));\n        });\n    };\n    async.reject = doParallel(_reject);\n    async.rejectSeries = doSeries(_reject);\n\n    var _detect = function (eachfn, arr, iterator, main_callback) {\n        eachfn(arr, function (x, callback) {\n            iterator(x, function (result) {\n                if (result) {\n                    main_callback(x);\n                }\n                else {\n                    callback();\n                }\n            });\n        }, function (err) {\n            main_callback();\n        });\n    };\n    async.detect = doParallel(_detect);\n    async.detectSeries = doSeries(_detect);\n\n    async.some = function (arr, iterator, main_callback) {\n        async.forEach(arr, function (x, callback) {\n            iterator(x, function (v) {\n                if (v) {\n                    main_callback(true);\n                    main_callback = function () {};\n                }\n                callback();\n            });\n        }, function (err) {\n            main_callback(false);\n        });\n    };\n    // any alias\n    async.any = async.some;\n\n    async.every = function (arr, iterator, main_callback) {\n        async.forEach(arr, function (x, callback) {\n            iterator(x, function (v) {\n                if (!v) {\n                    main_callback(false);\n                    main_callback = function () {};\n                }\n                callback();\n            });\n        }, function (err) {\n            main_callback(true);\n        });\n    };\n    // all alias\n    async.all = async.every;\n\n    async.sortBy = function (arr, iterator, callback) {\n        async.map(arr, function (x, callback) {\n            iterator(x, function (err, criteria) {\n                if (err) {\n                    callback(err);\n                }\n                else {\n                    callback(null, {value: x, criteria: criteria});\n                }\n            });\n        }, function (err, results) {\n            if (err) {\n                return callback(err);\n            }\n            else {\n                var fn = function (left, right) {\n                    var a = left.criteria, b = right.criteria;\n                    return a < b ? -1 : a > b ? 1 : 0;\n                };\n                callback(null, _map(results.sort(fn), function (x) {\n                    return x.value;\n                }));\n            }\n        });\n    };\n\n    async.auto = function (tasks, callback) {\n        callback = callback || function () {};\n        var keys = _keys(tasks);\n        if (!keys.length) {\n            return callback(null);\n        }\n\n        var completed = [];\n\n        var listeners = [];\n        var addListener = function (fn) {\n            listeners.unshift(fn);\n        };\n        var removeListener = function (fn) {\n            for (var i = 0; i < listeners.length; i += 1) {\n                if (listeners[i] === fn) {\n                    listeners.splice(i, 1);\n                    return;\n                }\n            }\n        };\n        var taskComplete = function () {\n            _forEach(listeners, function (fn) {\n                fn();\n            });\n        };\n\n        addListener(function () {\n            if (completed.length === keys.length) {\n                callback(null);\n            }\n        });\n\n        _forEach(keys, function (k) {\n            var task = (tasks[k] instanceof Function) ? [tasks[k]]: tasks[k];\n            var taskCallback = function (err) {\n                if (err) {\n                    callback(err);\n                    // stop subsequent errors hitting callback multiple times\n                    callback = function () {};\n                }\n                else {\n                    completed.push(k);\n                    taskComplete();\n                }\n            };\n            var requires = task.slice(0, Math.abs(task.length - 1)) || [];\n            var ready = function () {\n                return _reduce(requires, function (a, x) {\n                    return (a && _indexOf(completed, x) !== -1);\n                }, true);\n            };\n            if (ready()) {\n                task[task.length - 1](taskCallback);\n            }\n            else {\n                var listener = function () {\n                    if (ready()) {\n                        removeListener(listener);\n                        task[task.length - 1](taskCallback);\n                    }\n                };\n                addListener(listener);\n            }\n        });\n    };\n\n    async.waterfall = function (tasks, callback) {\n        if (!tasks.length) {\n            return callback();\n        }\n        callback = callback || function () {};\n        var wrapIterator = function (iterator) {\n            return function (err) {\n                if (err) {\n                    callback(err);\n                    callback = function () {};\n                }\n                else {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    var next = iterator.next();\n                    if (next) {\n                        args.push(wrapIterator(next));\n                    }\n                    else {\n                        args.push(callback);\n                    }\n                    async.nextTick(function () {\n                        iterator.apply(null, args);\n                    });\n                }\n            };\n        };\n        wrapIterator(async.iterator(tasks))();\n    };\n\n    async.parallel = function (tasks, callback) {\n        callback = callback || function () {};\n        if (tasks.constructor === Array) {\n            async.map(tasks, function (fn, callback) {\n                if (fn) {\n                    fn(function (err) {\n                        var args = Array.prototype.slice.call(arguments, 1);\n                        if (args.length <= 1) {\n                            args = args[0];\n                        }\n                        callback.call(null, err, args);\n                    });\n                }\n            }, callback);\n        }\n        else {\n            var results = {};\n            async.forEach(_keys(tasks), function (k, callback) {\n                tasks[k](function (err) {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    if (args.length <= 1) {\n                        args = args[0];\n                    }\n                    results[k] = args;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n\n    async.series = function (tasks, callback) {\n        callback = callback || function () {};\n        if (tasks.constructor === Array) {\n            async.mapSeries(tasks, function (fn, callback) {\n                if (fn) {\n                    fn(function (err) {\n                        var args = Array.prototype.slice.call(arguments, 1);\n                        if (args.length <= 1) {\n                            args = args[0];\n                        }\n                        callback.call(null, err, args);\n                    });\n                }\n            }, callback);\n        }\n        else {\n            var results = {};\n            async.forEachSeries(_keys(tasks), function (k, callback) {\n                tasks[k](function (err) {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    if (args.length <= 1) {\n                        args = args[0];\n                    }\n                    results[k] = args;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n\n    async.iterator = function (tasks) {\n        var makeCallback = function (index) {\n            var fn = function () {\n                if (tasks.length) {\n                    tasks[index].apply(null, arguments);\n                }\n                return fn.next();\n            };\n            fn.next = function () {\n                return (index < tasks.length - 1) ? makeCallback(index + 1): null;\n            };\n            return fn;\n        };\n        return makeCallback(0);\n    };\n\n    async.apply = function (fn) {\n        var args = Array.prototype.slice.call(arguments, 1);\n        return function () {\n            return fn.apply(\n                null, args.concat(Array.prototype.slice.call(arguments))\n            );\n        };\n    };\n\n    var _concat = function (eachfn, arr, fn, callback) {\n        var r = [];\n        eachfn(arr, function (x, cb) {\n            fn(x, function (err, y) {\n                r = r.concat(y || []);\n                cb(err);\n            });\n        }, function (err) {\n            callback(err, r);\n        });\n    };\n    async.concat = doParallel(_concat);\n    async.concatSeries = doSeries(_concat);\n\n    async.whilst = function (test, iterator, callback) {\n        if (test()) {\n            iterator(function (err) {\n                if (err) {\n                    return callback(err);\n                }\n                async.whilst(test, iterator, callback);\n            });\n        }\n        else {\n            callback();\n        }\n    };\n\n    async.until = function (test, iterator, callback) {\n        if (!test()) {\n            iterator(function (err) {\n                if (err) {\n                    return callback(err);\n                }\n                async.until(test, iterator, callback);\n            });\n        }\n        else {\n            callback();\n        }\n    };\n\n    async.queue = function (worker, concurrency) {\n        var workers = 0;\n        var tasks = [];\n        var q = {\n            concurrency: concurrency,\n            saturated: null,\n            empty: null,\n            drain: null,\n            push: function (data, callback) {\n                tasks.push({data: data, callback: callback});\n                if(q.saturated && tasks.length == concurrency) q.saturated();\n                async.nextTick(q.process);\n            },\n            process: function () {\n                if (workers < q.concurrency && tasks.length) {\n                    var task = tasks.splice(0, 1)[0];\n                    if(q.empty && tasks.length == 0) q.empty();\n                    workers += 1;\n                    worker(task.data, function () {\n                        workers -= 1;\n                        if (task.callback) {\n                            task.callback.apply(task, arguments);\n                        }\n                        if(q.drain && tasks.length + workers == 0) q.drain();\n                        q.process();\n                    });\n                }\n            },\n            length: function () {\n                return tasks.length;\n            },\n            running: function () {\n                return workers;\n            }\n        };\n        return q;\n    };\n\n    var _console_fn = function (name) {\n        return function (fn) {\n            var args = Array.prototype.slice.call(arguments, 1);\n            fn.apply(null, args.concat([function (err) {\n                var args = Array.prototype.slice.call(arguments, 1);\n                if (typeof console !== 'undefined') {\n                    if (err) {\n                        if (console.error) {\n                            console.error(err);\n                        }\n                    }\n                    else if (console[name]) {\n                        _forEach(args, function (x) {\n                            console[name](x);\n                        });\n                    }\n                }\n            }]));\n        };\n    };\n    async.log = _console_fn('log');\n    async.dir = _console_fn('dir');\n    /*async.info = _console_fn('info');\n    async.warn = _console_fn('warn');\n    async.error = _console_fn('error');*/\n\n    async.memoize = function (fn, hasher) {\n        var memo = {};\n        hasher = hasher || function (x) {\n            return x;\n        };\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            var key = hasher.apply(null, args);\n            if (key in memo) {\n                callback.apply(null, memo[key]);\n            }\n            else {\n                fn.apply(null, args.concat([function () {\n                    memo[key] = arguments;\n                    callback.apply(null, arguments);\n                }]));\n            }\n        };\n    };\n\n}());\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap-build-api/lib/defaults.js":"module.exports = {\n    protocol: 'https:',\n    host: 'build.phonegap.com',\n    port: '443',\n    path: '/api/v1'\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap-build-api/lib/extend.js":"/**\n * Extend an object.\n *\n * Creates a new object that merges the `overrides` into\n * the `defaults` object.\n *\n * Options:\n *\n *   - `defaults` {Object} is the default values to return.\n *   - `overrides` {Object} will be merged into `defaults`.\n *\n * Returns:\n *\n *   A new {Object}.\n */\n\nmodule.exports = function extend(defaults, overrides) {\n    var result = {},\n        key;\n\n    for (key in defaults) {\n        result[key] = defaults[key];\n    }\n\n    for (key in overrides) {\n        if (overrides[key] !== undefined) {\n            result[key] = overrides[key];\n        }\n    }\n\n    return result;\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap-build-api/lib/api.js":"/*\n * Module dependencies.\n */\n\nvar request = require('./request'),\n    Arguments = require('./arguments'),\n    defaults = require('./defaults'),\n    extend = require('./extend'),\n    fs = require('fs'),\n    p = require('path');\n\n/**\n * API Request Constructor.\n *\n * Creating an instance of the API Request will enable the RESTful access\n * to a PhoneGap Build API.\n *\n * Options:\n *\n *   - `options` {Object} defines the API server that has been authenticated.\n *   - `api.token` {String} is the user token for authentication.\n *   - `api.protocol` {String} is the protocol, e.g. 'http' or 'https'.\n *   - `api.host` {String} is the host address, e.g. 'build.phonegap.com'.\n *   - `api.port` {String} is the port, e.g. '80' or '443'.\n *   - `api.path` {String} is the api path, e.g. '/api/v1'\n *   - [`api.proxy`] {String} is a proxy to forward requests, e.g. 'http://myproxy.com'\n */\n\nmodule.exports = function(options) {\n    // require options argument\n    if (!options) throw new Error('missing options argument');\n    if (!options.token) throw new Error('missing options.token argument');\n\n    // extend with defaults\n    options = extend(defaults, options);\n\n    /**\n     * API Request.\n     *\n     * Sends an HTTP request to the PhoneGap Build API.\n     *\n     * By default, the request method is `GET` but can be changed\n     * in the `options` parameters (e.g. `{ method: 'POST' }`).\n     *\n     * Options:\n     *\n     *   - `path` {String} is a resource path (e.g. `\"/apps\"`).\n     *   - `[options]` {Object} is a request options object.\n     *   - `[callback]` {Function} is trigger after the request\n     *     - `e` {Error} is null unless there is an error\n     *     - `data` {Object} is the JSON response.\n     */\n\n    var api = function(path, options, callback) {\n        var args = new Arguments(path, options, callback);\n        args.options.method = args.options.method || 'GET';\n        return api.request(args.path, args.options, args.callback);\n    };\n\n    /**\n     * GET API Request.\n     *\n     * Options:\n     *\n     *   - `path` {String} is a resource path (e.g. `\"/apps\"`).\n     *   - `[options]` {Object} is a request options object.\n     *   - `[callback]` {Function} is trigger after the request\n     *     - `e` {Error} is null unless there is an error\n     *     - `data` {Object} is the JSON response.\n     */\n\n    api.get = function(path, options, callback) {\n        var args = new Arguments(path, options, callback);\n        args.options.method = 'GET';\n        return api.request(args.path, args.options, args.callback);\n    };\n\n    /**\n     * POST API Request.\n     *\n     * Options:\n     *\n     *   - `path` {String} is a resource path (e.g. `\"/apps\"`).\n     *   - `[options]` {Object} is a request options object.\n     *   - `[callback]` {Function} is trigger after the request\n     *     - `e` {Error} is null unless there is an error\n     *     - `data` {Object} is the JSON response.\n     */\n\n    api.post = function(path, options, callback) {\n        var args = new Arguments(path, options, callback);\n        args.options.method = 'POST';\n        return api.request(args.path, args.options, args.callback);\n    };\n\n    /**\n     * PUT API Request.\n     *\n     * Options:\n     *\n     *   - `path` {String} is a resource path (e.g. `\"/apps\"`).\n     *   - `[options]` {Object} is a request options object.\n     *   - `[callback]` {Function} is trigger after the request\n     *     - `e` {Error} is null unless there is an error\n     *     - `data` {Object} is the JSON response.\n     */\n\n    api.put = function(path, options, callback) {\n        var args = new Arguments(path, options, callback);\n        args.options.method = 'PUT';\n        return api.request(args.path, args.options, args.callback);\n    };\n\n    /**\n     * DELETE API Request.\n     *\n     * Options:\n     *\n     *   - `path` {String} is a resource path (e.g. `\"/apps\"`).\n     *   - `[options]` {Object} is a request options object.\n     *   - `[callback]` {Function} is trigger after the request\n     *     - `e` {Error} is null unless there is an error\n     *     - `data` {Object} is the JSON response.\n     */\n\n    api.del = function(path, options, callback) {\n        var args = new Arguments(path, options, callback);\n        args.options.method = 'DELETE';\n        return api.request(args.path, args.options, args.callback);\n    };\n\n    /**\n     * API Request Defaults.\n     *\n     * The method simply forwards to [requests](https://github.com/mikeal/request)\n     * default method.\n     */\n\n    api.defaults = function(options, requester) {\n        return request.defaults(options, requester);\n    };\n\n    /*\n     * API Configuration.\n     *\n     * Internal configuration values for constructing an API request.\n     *\n     * Values:\n     *\n     *   - `api.token` {String} is the user token for authentication.\n     *   - `api.protocol` {String} is the protocol, e.g. 'http' or 'https'.\n     *   - `api.host` {String} is the host address, e.g. 'build.phonegap.com'.\n     *   - `api.port` {String} is the port, e.g. '80' or '443'.\n     *   - `api.path` {String} is the api path, e.g. '/api/v1'\n     *   - [`api.proxy`] {String} is proxy for requests through, e.g. 'http://myproxy.com'\n     */\n\n    api.token = options.token;\n    api.protocol = options.protocol;\n    api.host = options.host;\n    api.port = options.port;\n    api.path = options.path;\n    api.defaults.version = options.version;\n    api.proxy = options.proxy;\n\n    /*\n     * API Request Handler.\n     *\n     * Private method that handles all types of API requests.\n     *\n     * Options:\n     *\n     *   - `path` {String} is a resource path (e.g. `\"/apps\"`).\n     *   - `[options]` {Object} is a request options object.\n     *   - `[callback]` {Function} is trigger after the request\n     *     - `e` {Error} is null unless there is an error\n     *     - `data` {Object} is the JSON response.\n     */\n\n    api.request = function(path, options, callback) {\n        // require arguments\n        if (!path) throw new Error('missing path argument');\n        if (!options) throw new Error('missing options argument');\n\n        // optional arguments\n        callback = callback || function() {};\n\n        var args = new Arguments(path, callback);\n        var uri = api.protocol + '//' +\n                  api.host + ':' +\n                  api.port +\n                  api.path +\n                  args.path + '?auth_token=' + api.token;\n\n        // hijack the form option.\n        // this is a clean interface to define form data, but the\n        // phonegap build api does not support encoded querystring data.\n        var data = options.form;\n        options.form = undefined;\n\n        // use proxy when provided\n        options.proxy = api.proxy;\n\n        var r = request.send(uri, options, function(e, res, body) {\n            if (e) {\n                // error in request\n                args.callback(e);\n            }\n            else if (res.statusCode !== 200 && res.statusCode !== 201 && res.statusCode !== 202) {\n                // provide a default message when none is provided\n                body = body || 'server returned status code ' + res.statusCode;\n\n                // eror in response\n                args.callback(new Error(body));\n            }\n            else {\n                try {\n                    body = JSON.parse(body);\n                }\n                catch(err) {\n                    // continue but data untouched (likely image data)\n                }\n\n                if (typeof body.error === 'string') {\n                    // api response includes an error\n                    args.callback(new Error(body.error));\n                }\n                else {\n                    // api response is successful\n                    args.callback(null, body);\n                }\n            }\n        });\n\n        // form-data support as content-type multipart/form-data\n        if (data) {\n            var form = r.form(),\n                key,\n                value;\n\n            // handle each key in the form object:\n            //   - `data` {Object} is handled as JSON.\n            //   - `*` {String} is handled as a file path.\n            for(key in data) {\n                if (key === 'data') {\n                    value = JSON.stringify(data[key]);\n                }\n                else {\n                    value = fs.createReadStream(p.normalize(data[key]));\n                }\n\n                form.append(key, value);\n            }\n        }\n\n        return r;\n    };\n\n    return api;\n};\n\nmodule.exports.prototype = {\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap-build-api/lib/request.js":"var request = require('request');\n\nmodule.exports = {\n    send: function(uri, options, callback) {\n        return request(uri, options, callback);\n    },\n    defaults: request.defaults\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap-build-api/lib/arguments.js":"/**\n * Parse API Arguments.\n *\n * Parses in the following order:\n *\n *   - `path` {String} is required.\n *   - `options` {Object} is optional and defaults to `{}`.\n *   - `callback` {Function} is optional and defaults to `function(e, data) {}`.\n *\n * Options:\n *\n *   - `arguments` {Arguments} is the arguments object or comma-separated list\n *     of arguments.\n *\n * Returns:\n *\n *   - {Object} where the key is the name of each argument.\n */\n\nmodule.exports = function() {\n    // cast arguments to Array\n    var inputArgs = Array.prototype.slice.call(arguments);\n\n    // default arguments\n    var outputArgs = {\n        path: undefined,\n        options: {},\n        callback: function(e, data) {}\n    };\n\n    // path argument\n    if (typeof inputArgs[0] === 'string') {\n        outputArgs.path = inputArgs.shift();\n    }\n\n    // options argument\n    if (typeof inputArgs[0] === 'object') {\n        outputArgs.options = inputArgs.shift();\n    }\n\n    // callback argument\n    if (typeof inputArgs[0] === 'function') {\n        outputArgs.callback = inputArgs.shift();\n    }\n\n    // require path argument\n    if (typeof outputArgs.path !== 'string') {\n        throw new Error('Path is missing');\n    }\n\n    // in path, replace :placeholders with variables\n    //while(args[0] && typeof args[0] !== 'function') {\n    //    var value = args.shift().toString();\n    //    output.path = output.path.replace(/:\\w+/, value);\n    //}\n\n    // trim whitespace and slashes\n    outputArgs.path = '/' + outputArgs.path.replace(/^[\\/ ]*/, '').replace(/[\\/ ]*$/, '');\n\n    return outputArgs;\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap-build/lib/common/config.js":"/**\n * Configuration Files.\n *\n * Access configuration files on the local (project) and global (system) level.\n */\n\nmodule.exports = {\n    local: require('./config/local'),\n    global: require('./config/global')\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap-build/lib/common/config/local.js":"/*\n * Module dependencies.\n */\n\nvar fs = require('fs'),\n    path = require('path'),\n    shell = require('shelljs');\n\n/**\n * Load the project configuration file.\n *\n * Loads the project configuration file as a JSON object.\n *\n * Options:\n *\n *   - `callback` {Function} is triggered after loading the configuration file.\n *     - `e` {Error} is null unless there is an error.\n *     - `data` {Object} is a JSON representation of the configuration file.\n */\n\nmodule.exports.load = function(callback) {\n    // require callback parameter\n    if (!callback) throw new Error('missing callback parameter');\n\n    var filepath = path.join(process.cwd(), '.cordova', 'config.json');\n\n    fs.readFile(filepath, function(e, data) {\n        // when the file does not exist, return an empty data object\n        data = JSON.parse(data || '{}');\n        callback(null, data);\n    });\n};\n\n/**\n * Save the project configuration file.\n *\n * Saves the project configuration file as a stringified representation of\n * the JSON object.\n *\n * Options:\n *\n *   - `data` {Object} is the configuration data to save.\n *   - `callback` {Object} is trigger after the file is saved.\n *     - `e` {Error} is null unless there is an error.\n */\n\nmodule.exports.save = function(data, callback) {\n    // required parameters\n    if (!data) throw new Error('missing data parameter');\n    if (!callback) throw new Error('missing callback parameter');\n\n    var filepath = path.join(process.cwd(), '.cordova', 'config.json');\n\n    // create the directory path when it does not exist\n    shell.mkdir('-p', path.dirname(filepath));\n\n    fs.writeFile(filepath, JSON.stringify(data), function(e) {\n        callback(e);\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap-build/node_modules/shelljs/shell.js":"//\n// ShellJS\n// Unix shell commands on top of Node's API\n//\n// Copyright (c) 2012 Artur Adib\n// http://github.com/arturadib/shelljs\n//\n\nvar fs = require('fs'),\n    path = require('path'),\n    util = require('util'),\n    vm = require('vm'),\n    child = require('child_process'),\n    os = require('os');\n\n// Node shims for < v0.7\nfs.existsSync = fs.existsSync || path.existsSync;\n\nvar config = {\n  silent: false,\n  fatal: false\n}\n\nvar state = {\n      error: null,\n      currentCmd: 'shell.js',\n      tempDir: null\n    },\n    platform = os.type().match(/^Win/) ? 'win' : 'unix';\n\n\n//@\n//@ All commands run synchronously, unless otherwise stated.\n//@ \n\n\n//@\n//@ ### cd('dir')\n//@ Changes to directory `dir` for the duration of the script\nfunction _cd(options, dir) {\n  if (!dir)\n    error('directory not specified');\n\n  if (!fs.existsSync(dir))\n    error('no such file or directory: ' + dir);\n\n  if (fs.existsSync(dir) && !fs.statSync(dir).isDirectory())\n    error('not a directory: ' + dir);\n\n  process.chdir(dir);\n};\nexports.cd = wrap('cd', _cd);\n\n//@\n//@ ### pwd()\n//@ Returns the current directory.\nfunction _pwd(options) {\n  var pwd = path.resolve(process.cwd());\n  return ShellString(pwd);\n};\nexports.pwd = wrap('pwd', _pwd);\n\n\n//@\n//@ ### ls([options ,] path [,path ...])\n//@ ### ls([options ,] path_array)\n//@ Available options:\n//@\n//@ + `-R`: recursive\n//@ + `-A`: all files (include files beginning with `.`, except for `.` and `..`)\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ ls('projs/*.js');\n//@ ls('-R', '/users/me', '/tmp');\n//@ ls('-R', ['/users/me', '/tmp']); // same as above\n//@ ```\n//@\n//@ Returns array of files in the given path, or in current directory if no path provided.\nfunction _ls(options, paths) {\n  options = parseOptions(options, {\n    'R': 'recursive',\n    'A': 'all',\n    'a': 'all_deprecated'\n  });\n\n  if (options.all_deprecated) {\n    // We won't support the -a option as it's hard to image why it's useful\n    // (it includes '.' and '..' in addition to '.*' files)\n    // For backwards compatibility we'll dump a deprecated message and proceed as before\n    log('ls: Option -a is deprecated. Use -A instead');\n    options.all = true;\n  }\n\n  if (!paths)\n    paths = ['.'];\n  else if (typeof paths === 'object')\n    paths = paths; // assume array\n  else if (typeof paths === 'string')\n    paths = [].slice.call(arguments, 1);\n\n  var list = [];\n\n  // Conditionally pushes file to list - returns true if pushed, false otherwise\n  // (e.g. prevents hidden files to be included unless explicitly told so)\n  function pushFile(file, query) {\n    // hidden file?\n    if (path.basename(file)[0] === '.') {\n      // not explicitly asking for hidden files?\n      if (!options.all && !(path.basename(query)[0] === '.' && path.basename(query).length > 1))\n        return false;\n    }\n\n    if (platform === 'win')\n      file = file.replace(/\\\\/g, '/');\n\n    list.push(file);\n    return true;\n  }\n\n  paths.forEach(function(p) {\n    if (fs.existsSync(p)) {\n      // Simple file?\n      if (fs.statSync(p).isFile()) {\n        pushFile(p, p);\n        return; // continue\n      }\n      \n      // Simple dir?\n      if (fs.statSync(p).isDirectory()) {\n        // Iterate over p contents\n        fs.readdirSync(p).forEach(function(file) {\n          if (!pushFile(file, p))\n            return;\n\n          // Recursive?\n          if (options.recursive) {\n            var oldDir = _pwd();\n            _cd('', p);\n            if (fs.statSync(file).isDirectory())\n              list = list.concat(_ls('-R'+(options.all?'A':''), file+'/*'));\n            _cd('', oldDir);\n          }\n        });\n        return; // continue\n      }\n    }\n\n    // p does not exist - possible wildcard present\n\n    var basename = path.basename(p);\n    var dirname = path.dirname(p);\n    // Wildcard present on an existing dir? (e.g. '/tmp/*.js')\n    if (basename.search(/\\*/) > -1 && fs.existsSync(dirname) && fs.statSync(dirname).isDirectory) {\n      // Escape special regular expression chars\n      var regexp = basename.replace(/(\\^|\\$|\\(|\\)|\\<|\\>|\\[|\\]|\\{|\\}|\\.|\\+|\\?)/g, '\\\\$1');\n      // Translates wildcard into regex\n      regexp = '^' + regexp.replace(/\\*/g, '.*') + '$';\n      // Iterate over directory contents\n      fs.readdirSync(dirname).forEach(function(file) {\n        if (file.match(new RegExp(regexp))) {\n          if (!pushFile(path.normalize(dirname+'/'+file), basename))\n            return;\n\n          // Recursive?\n          if (options.recursive) {\n            var pp = dirname + '/' + file;\n            if (fs.statSync(pp).isDirectory())\n              list = list.concat(_ls('-R'+(options.all?'A':''), pp+'/*'));\n          } // recursive\n        } // if file matches\n      }); // forEach\n      return;\n    }\n\n    error('no such file or directory: ' + p, true);\n  });\n\n  return list;\n};\nexports.ls = wrap('ls', _ls);\n\n\n//@\n//@ ### find(path [,path ...])\n//@ ### find(path_array)\n//@ Examples:\n//@\n//@ ```javascript\n//@ find('src', 'lib');\n//@ find(['src', 'lib']); // same as above\n//@ find('.').filter(function(file) { return file.match(/\\.js$/); });\n//@ ```\n//@\n//@ Returns array of all files (however deep) in the given paths.\n//@\n//@ The main difference from `ls('-R', path)` is that the resulting file names \n//@ include the base directories, e.g. `lib/resources/file1` instead of just `file1`.\nfunction _find(options, paths) {\n  if (!paths)\n    error('no path specified');\n  else if (typeof paths === 'object')\n    paths = paths; // assume array\n  else if (typeof paths === 'string')\n    paths = [].slice.call(arguments, 1);\n\n  var list = [];\n\n  function pushFile(file) {\n    if (platform === 'win')\n      file = file.replace(/\\\\/g, '/');\n    list.push(file);\n  }\n\n  // why not simply do ls('-R', paths)? because the output wouldn't give the base dirs\n  // to get the base dir in the output, we need instead ls('-R', 'dir/*') for every directory\n\n  paths.forEach(function(file) {\n    pushFile(file);\n\n    if (fs.statSync(file).isDirectory()) {\n      _ls('-RA', file+'/*').forEach(function(subfile) {\n        pushFile(subfile);\n      });\n    }\n  });\n\n  return list;\n}\nexports.find = wrap('find', _find);\n\n\n//@\n//@ ### cp([options ,] source [,source ...], dest)\n//@ ### cp([options ,] source_array, dest)\n//@ Available options:\n//@\n//@ + `-f`: force\n//@ + `-r, -R`: recursive\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ cp('file1', 'dir1');\n//@ cp('-Rf', '/tmp/*', '/usr/local/*', '/home/tmp');\n//@ cp('-Rf', ['/tmp/*', '/usr/local/*'], '/home/tmp'); // same as above\n//@ ```\n//@\n//@ Copies files. The wildcard `*` is accepted.\nfunction _cp(options, sources, dest) {\n  options = parseOptions(options, {\n    'f': 'force',\n    'R': 'recursive',\n    'r': 'recursive'\n  });\n\n  // Get sources, dest\n  if (arguments.length < 3) {\n    error('missing <source> and/or <dest>');\n  } else if (arguments.length > 3) {\n    sources = [].slice.call(arguments, 1, arguments.length - 1);\n    dest = arguments[arguments.length - 1];\n  } else if (typeof sources === 'string') {\n    sources = [sources];\n  } else if ('length' in sources) {\n    sources = sources; // no-op for array\n  } else {\n    error('invalid arguments');\n  }\n\n  // Dest is not existing dir, but multiple sources given\n  if ((!fs.existsSync(dest) || !fs.statSync(dest).isDirectory()) && sources.length > 1)\n    error('dest is not a directory (too many sources)');\n\n  // Dest is an existing file, but no -f given\n  if (fs.existsSync(dest) && fs.statSync(dest).isFile() && !options.force)\n    error('dest file already exists: ' + dest);\n\n  // Recursive allows the shortcut syntax \"sourcedir/\" for \"sourcedir/*\"\n  // (see Github issue #15)\n  if (options.recursive) {\n    sources.forEach(function(src, i) {\n      if (src[src.length - 1] === '/')\n        sources[i] += '*';\n    });\n  }\n\n  sources = expand(sources);\n\n  sources.forEach(function(src) {\n    if (!fs.existsSync(src)) {\n      error('no such file or directory: '+src, true);\n      return; // skip file\n    }\n\n    // If here, src exists\n\n    if (fs.statSync(src).isDirectory()) {\n      if (!options.recursive) {\n        // Non-Recursive\n        log(src + ' is a directory (not copied)');\n      } else {\n        // Recursive\n        // 'cp /a/source dest' should create 'source' in 'dest'\n        var newDest = dest+'/'+path.basename(src),\n            checkDir = fs.statSync(src);\n        try {\n          fs.mkdirSync(newDest, checkDir.mode);\n        } catch (e) {\n          //if the directory already exists, that's okay\n          if (e.code !== 'EEXIST') throw e;\n        }\n        cpdirSyncRecursive(src, newDest, {force: options.force});\n      }\n      return; // done with dir\n    }\n\n    // If here, src is a file\n\n    // When copying to '/path/dir':\n    //    thisDest = '/path/dir/file1'\n    var thisDest = dest;\n    if (fs.existsSync(dest) && fs.statSync(dest).isDirectory())\n      thisDest = path.normalize(dest + '/' + path.basename(src));\n\n    if (fs.existsSync(thisDest) && !options.force) {\n      error('dest file already exists: ' + thisDest, true);\n      return; // skip file\n    }\n\n    copyFileSync(src, thisDest);\n  }); // forEach(src)\n}; // cp\nexports.cp = wrap('cp', _cp);\n\n//@\n//@ ### rm([options ,] file [, file ...])\n//@ ### rm([options ,] file_array)\n//@ Available options:\n//@\n//@ + `-f`: force\n//@ + `-r, -R`: recursive\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ rm('-rf', '/tmp/*');\n//@ rm('some_file.txt', 'another_file.txt');\n//@ rm(['some_file.txt', 'another_file.txt']); // same as above\n//@ ```\n//@\n//@ Removes files. The wildcard `*` is accepted. \nfunction _rm(options, files) {\n  options = parseOptions(options, {\n    'f': 'force',\n    'r': 'recursive',\n    'R': 'recursive'\n  });\n  if (!files)\n    error('no paths given');\n\n  if (typeof files === 'string')\n    files = [].slice.call(arguments, 1);\n  // if it's array leave it as it is\n\n  files = expand(files);\n\n  files.forEach(function(file) {\n    if (!fs.existsSync(file)) {\n      // Path does not exist, no force flag given\n      if (!options.force)\n        error('no such file or directory: '+file, true);\n\n      return; // skip file\n    }\n\n    // If here, path exists\n\n    // Remove simple file\n    if (fs.statSync(file).isFile()) {\n\n      // Do not check for file writing permissions\n      if (options.force) {\n        _unlinkSync(file);\n        return;\n      }\n            \n      if (isWriteable(file))\n        _unlinkSync(file);\n      else\n        error('permission denied: '+file, true);\n\n      return;\n    } // simple file\n\n    // Path is an existing directory, but no -r flag given\n    if (fs.statSync(file).isDirectory() && !options.recursive) {\n      error('path is a directory', true);\n      return; // skip path\n    }\n\n    // Recursively remove existing directory\n    if (fs.statSync(file).isDirectory() && options.recursive) {\n      rmdirSyncRecursive(file, options.force);\n    }\n  }); // forEach(file)\n}; // rm\nexports.rm = wrap('rm', _rm);\n\n//@\n//@ ### mv(source [, source ...], dest')\n//@ ### mv(source_array, dest')\n//@ Available options:\n//@\n//@ + `f`: force\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ mv('-f', 'file', 'dir/');\n//@ mv('file1', 'file2', 'dir/');\n//@ mv(['file1', 'file2'], 'dir/'); // same as above\n//@ ```\n//@\n//@ Moves files. The wildcard `*` is accepted.\nfunction _mv(options, sources, dest) {\n  options = parseOptions(options, {\n    'f': 'force'\n  });\n\n  // Get sources, dest\n  if (arguments.length < 3) {\n    error('missing <source> and/or <dest>');\n  } else if (arguments.length > 3) {\n    sources = [].slice.call(arguments, 1, arguments.length - 1);\n    dest = arguments[arguments.length - 1];\n  } else if (typeof sources === 'string') {\n    sources = [sources];\n  } else if ('length' in sources) {\n    sources = sources; // no-op for array\n  } else {\n    error('invalid arguments');\n  }\n\n  sources = expand(sources);\n\n  // Dest is not existing dir, but multiple sources given\n  if ((!fs.existsSync(dest) || !fs.statSync(dest).isDirectory()) && sources.length > 1)\n    error('dest is not a directory (too many sources)');\n\n  // Dest is an existing file, but no -f given\n  if (fs.existsSync(dest) && fs.statSync(dest).isFile() && !options.force)\n    error('dest file already exists: ' + dest);\n\n  sources.forEach(function(src) {\n    if (!fs.existsSync(src)) {\n      error('no such file or directory: '+src, true);\n      return; // skip file\n    }\n\n    // If here, src exists\n\n    // When copying to '/path/dir':\n    //    thisDest = '/path/dir/file1'\n    var thisDest = dest;\n    if (fs.existsSync(dest) && fs.statSync(dest).isDirectory())\n      thisDest = path.normalize(dest + '/' + path.basename(src));\n\n    if (fs.existsSync(thisDest) && !options.force) {\n      error('dest file already exists: ' + thisDest, true);\n      return; // skip file\n    }\n\n    if (path.resolve(src) === path.dirname(path.resolve(thisDest))) {\n      error('cannot move to self: '+src, true);\n      return; // skip file\n    }\n\n    fs.renameSync(src, thisDest);\n  }); // forEach(src)\n}; // mv\nexports.mv = wrap('mv', _mv);\n\n//@\n//@ ### mkdir([options ,] dir [, dir ...])\n//@ ### mkdir([options ,] dir_array)\n//@ Available options:\n//@\n//@ + `p`: full path (will create intermediate dirs if necessary)\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ mkdir('-p', '/tmp/a/b/c/d', '/tmp/e/f/g');\n//@ mkdir('-p', ['/tmp/a/b/c/d', '/tmp/e/f/g']); // same as above\n//@ ```\n//@\n//@ Creates directories.\nfunction _mkdir(options, dirs) {\n  options = parseOptions(options, {\n    'p': 'fullpath'\n  });\n  if (!dirs)\n    error('no paths given');\n\n  if (typeof dirs === 'string')\n    dirs = [].slice.call(arguments, 1);\n  // if it's array leave it as it is\n\n  dirs.forEach(function(dir) {\n    if (fs.existsSync(dir)) {\n      if (!options.fullpath)\n          error('path already exists: ' + dir, true);\n      return; // skip dir\n    }\n\n    // Base dir does not exist, and no -p option given\n    var baseDir = path.dirname(dir);\n    if (!fs.existsSync(baseDir) && !options.fullpath) {\n      error('no such file or directory: ' + baseDir, true);\n      return; // skip dir\n    }\n\n    if (options.fullpath)\n      mkdirSyncRecursive(dir);\n    else\n      fs.mkdirSync(dir, 0777);\n  });\n}; // mkdir\nexports.mkdir = wrap('mkdir', _mkdir);\n\n//@\n//@ ### test(expression)\n//@ Available expression primaries:\n//@\n//@ + `'-b', 'path'`: true if path is a block device\n//@ + `'-c', 'path'`: true if path is a character device\n//@ + `'-d', 'path'`: true if path is a directory\n//@ + `'-e', 'path'`: true if path exists\n//@ + `'-f', 'path'`: true if path is a regular file\n//@ + `'-L', 'path'`: true if path is a symboilc link\n//@ + `'-p', 'path'`: true if path is a pipe (FIFO)\n//@ + `'-S', 'path'`: true if path is a socket\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ if (test('-d', path)) { /* do something with dir */ };\n//@ if (!test('-f', path)) continue; // skip if it's a regular file\n//@ ```\n//@\n//@ Evaluates expression using the available primaries and returns corresponding value.\nfunction _test(options, path) {\n  if (!path)\n    error('no path given');\n\n  // hack - only works with unary primaries\n  options = parseOptions(options, {\n    'b': 'block',\n    'c': 'character',\n    'd': 'directory',\n    'e': 'exists',\n    'f': 'file',\n    'L': 'link',\n    'p': 'pipe',\n    'S': 'socket'\n  });\n\n  var canInterpret = false;\n  for (var key in options)\n    if (options[key] === true) {\n      canInterpret = true;\n      break;\n    }\n\n  if (!canInterpret)\n    error('could not interpret expression');\n\n  if (!fs.existsSync(path))\n    return false;\n\n  if (options.exists)\n    return true;\n\n  if (options.link)\n    return fs.lstatSync(path).isSymbolicLink();\n\n  var stats = fs.statSync(path);\n\n  if (options.block)\n    return stats.isBlockDevice();\n\n  if (options.character)\n    return stats.isCharacterDevice();\n\n  if (options.directory)\n    return stats.isDirectory();\n\n  if (options.file)\n    return stats.isFile();\n\n  if (options.pipe)\n    return stats.isFIFO();\n\n  if (options.socket)\n    return stats.isSocket()\n}; // test\nexports.test = wrap('test', _test);\n\n\n//@\n//@ ### cat(file [, file ...])\n//@ ### cat(file_array)\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ var str = cat('file*.txt');\n//@ var str = cat('file1', 'file2');\n//@ var str = cat(['file1', 'file2']); // same as above\n//@ ```\n//@\n//@ Returns a string containing the given file, or a concatenated string\n//@ containing the files if more than one file is given (a new line character is\n//@ introduced between each file). Wildcard `*` accepted.\nfunction _cat(options, files) {\n  var cat = '';\n\n  if (!files)\n    error('no paths given');\n\n  if (typeof files === 'string')\n    files = [].slice.call(arguments, 1);\n  // if it's array leave it as it is\n\n  files = expand(files);\n\n  files.forEach(function(file) {\n    if (!fs.existsSync(file))\n      error('no such file or directory: ' + file);\n\n    cat += fs.readFileSync(file, 'utf8') + '\\n';\n  });\n\n  if (cat[cat.length-1] === '\\n')\n    cat = cat.substring(0, cat.length-1);\n\n  return ShellString(cat);\n};\nexports.cat = wrap('cat', _cat);\n\n//@\n//@ ### 'string'.to(file)\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ cat('input.txt').to('output.txt');\n//@ ```\n//@\n//@ Analogous to the redirection operator `>` in Unix, but works with JavaScript strings (such as\n//@ those returned by `cat`, `grep`, etc). _Like Unix redirections, `to()` will overwrite any existing file!_\nfunction _to(options, file) {\n  if (!file)\n    error('wrong arguments');\n\n  if (!fs.existsSync( path.dirname(file) ))\n      error('no such file or directory: ' + path.dirname(file));\n\n  try {\n    fs.writeFileSync(file, this.toString(), 'utf8');\n  } catch(e) {\n    error('could not write to file (code '+e.code+'): '+file, true);\n  }\n};\n// In the future, when Proxies are default, we can add methods like `.to()` to primitive strings. \n// For now, this is a dummy function to bookmark places we need such strings\nfunction ShellString(str) {\n  return str;\n}\nString.prototype.to = wrap('to', _to);\n\n//@\n//@ ### sed([options ,] search_regex, replace_str, file)\n//@ Available options:\n//@\n//@ + `-i`: Replace contents of 'file' in-place. _Note that no backups will be created!_\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ sed('-i', 'PROGRAM_VERSION', 'v0.1.3', 'source.js');\n//@ sed(/.*DELETE_THIS_LINE.*\\n/, '', 'source.js');\n//@ ```\n//@\n//@ Reads an input string from `file` and performs a JavaScript `replace()` on the input\n//@ using the given search regex and replacement string. Returns the new string after replacement.\nfunction _sed(options, regex, replacement, file) {\n  options = parseOptions(options, {\n    'i': 'inplace'\n  });\n\n  if (typeof replacement === 'string')\n    replacement = replacement; // no-op\n  else if (typeof replacement === 'number')\n    replacement = replacement.toString(); // fallback\n  else\n    error('invalid replacement string');\n\n  if (!file)\n    error('no file given');\n\n  if (!fs.existsSync(file))\n    error('no such file or directory: ' + file);\n\n  var result = fs.readFileSync(file, 'utf8').replace(regex, replacement);\n  if (options.inplace)\n    fs.writeFileSync(file, result, 'utf8');\n\n  return ShellString(result);\n};\nexports.sed = wrap('sed', _sed);\n\n//@\n//@ ### grep([options ,] regex_filter, file [, file ...])\n//@ ### grep([options ,] regex_filter, file_array)\n//@ Available options:\n//@\n//@ + `-v`: Inverse the sense of the regex and print the lines not matching the criteria.\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ grep('-v', 'GLOBAL_VARIABLE', '*.js');\n//@ grep('GLOBAL_VARIABLE', '*.js');\n//@ ```\n//@\n//@ Reads input string from given files and returns a string containing all lines of the \n//@ file that match the given `regex_filter`. Wildcard `*` accepted.\nfunction _grep(options, regex, files) {\n  options = parseOptions(options, {\n    'v': 'inverse'\n  });\n\n  if (!files)\n    error('no paths given');\n\n  if (typeof files === 'string')\n    files = [].slice.call(arguments, 2);\n  // if it's array leave it as it is\n\n  files = expand(files);\n\n  var grep = '';\n  files.forEach(function(file) {\n    if (!fs.existsSync(file)) {\n      error('no such file or directory: ' + file, true);\n      return;\n    }\n\n    var contents = fs.readFileSync(file, 'utf8'),\n        lines = contents.split(/\\r*\\n/);\n    lines.forEach(function(line) {\n      var matched = line.match(regex);\n      if ((options.inverse && !matched) || (!options.inverse && matched))\n        grep += line + '\\n';\n    });\n  });\n\n  return ShellString(grep);\n};\nexports.grep = wrap('grep', _grep);\n\n\n//@\n//@ ### which(command)\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ var nodeExec = which('node');\n//@ ```\n//@\n//@ Searches for `command` in the system's PATH. On Windows looks for `.exe`, `.cmd`, and `.bat` extensions.\n//@ Returns string containing the absolute path to the command.\nfunction _which(options, cmd) {\n  if (!cmd)\n    error('must specify command');\n\n  var pathEnv = process.env.path || process.env.Path || process.env.PATH,\n      pathArray = splitPath(pathEnv),\n      where = null;\n\n  // No relative/absolute paths provided?\n  if (cmd.search(/\\//) === -1) {\n    // Search for command in PATH\n    pathArray.forEach(function(dir) {\n      if (where)\n        return; // already found it\n\n      var attempt = path.resolve(dir + '/' + cmd);\n      if (fs.existsSync(attempt)) {\n        where = attempt;\n        return;\n      }\n\n      if (platform === 'win') {\n        var baseAttempt = attempt;\n        attempt = baseAttempt + '.exe';\n        if (fs.existsSync(attempt)) {\n          where = attempt;\n          return;\n        }\n        attempt = baseAttempt + '.cmd';\n        if (fs.existsSync(attempt)) {\n          where = attempt;\n          return;\n        }\n        attempt = baseAttempt + '.bat';\n        if (fs.existsSync(attempt)) {\n          where = attempt;\n          return;\n        }\n      } // if 'win'\n    });\n  }\n    \n  // Command not found anywhere?\n  if (!fs.existsSync(cmd) && !where)\n    return null;\n\n  where = where || path.resolve(cmd);\n\n  return ShellString(where);\n};\nexports.which = wrap('which', _which);\n\n//@\n//@ ### echo(string [,string ...])\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ echo('hello world');\n//@ var str = echo('hello world');\n//@ ```\n//@\n//@ Prints string to stdout, and returns string with additional utility methods\n//@ like `.to()`.\nfunction _echo() {\n  var messages = [].slice.call(arguments, 0);\n  console.log.apply(this, messages);\n  return ShellString(messages.join(' '));\n};\nexports.echo = _echo; // don't wrap() as it could parse '-options'\n\n//@\n//@ ### exit(code)\n//@ Exits the current process with the given exit code.\nexports.exit = process.exit;\n\n//@\n//@ ### env['VAR_NAME']\n//@ Object containing environment variables (both getter and setter). Shortcut to process.env.\nexports.env = process.env;\n\n//@\n//@ ### exec(command [, options] [, callback])\n//@ Available options (all `false` by default):\n//@\n//@ + `async`: Asynchronous execution. Defaults to true if a callback is provided.\n//@ + `silent`: Do not echo program output to console.\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ var version = exec('node --version', {silent:true}).output;\n//@\n//@ var child = exec('some_long_running_process', {async:true});\n//@ child.stdout.on('data', function(data) { \n//@   /* ... do something with data ... */ \n//@ });\n//@\n//@ exec('some_long_running_process', function(code, output) {\n//@   console.log('Exit code:', code);\n//@   console.log('Program output:', output);\n//@ });\n//@ ```\n//@\n//@ Executes the given `command` _synchronously_, unless otherwise specified. \n//@ When in synchronous mode returns the object `{ code:..., output:... }`, containing the program's \n//@ `output` (stdout + stderr)  and its exit `code`. Otherwise returns the child process object, and\n//@ the `callback` gets the arguments `(code, output)`.\n//@\n//@ **Note:** For long-lived processes, it's best to run `exec()` asynchronously as\n//@ the current synchronous implementation uses a lot of CPU. This should be getting\n//@ fixed soon.\nfunction _exec(command, options, callback) {\n  if (!command)\n    error('must specify command');\n\n  if (typeof options === 'function') {\n    callback = options;\n    options = { async: true };\n  }\n\n  options = extend({\n    silent: config.silent,\n    async: false\n  }, options);\n\n  if (options.async)\n    return execAsync(command, options, callback);\n  else\n    return execSync(command, options);\n};\nexports.exec = wrap('exec', _exec, {notUnix:true});\n\n\n\n\n//@\n//@ ## Configuration\n//@\n\n\n\nexports.config = config;\n\n//@\n//@ ### config.silent\n//@ Example:\n//@\n//@ ```javascript\n//@ var silentState = config.silent; // save old silent state\n//@ config.silent = true;\n//@ /* ... */\n//@ config.silent = silentState; // restore old silent state\n//@ ```\n//@\n//@ Suppresses all command output if `true`, except for `echo()` calls.\n//@ Default is `false`.\n\n//@\n//@ ### config.fatal\n//@ Example:\n//@\n//@ ```javascript\n//@ config.fatal = true;\n//@ cp('this_file_does_not_exist', '/dev/null'); // dies here\n//@ /* more commands... */\n//@ ```\n//@\n//@ If `true` the script will die on errors. Default is `false`.\n\n\n\n\n//@\n//@ ## Non-Unix commands\n//@\n\n\n\n\n\n\n//@\n//@ ### tempdir()\n//@ Searches and returns string containing a writeable, platform-dependent temporary directory.\n//@ Follows Python's [tempfile algorithm](http://docs.python.org/library/tempfile.html#tempfile.tempdir).\nexports.tempdir = wrap('tempdir', tempDir);\n\n\n//@\n//@ ### error()\n//@ Tests if error occurred in the last command. Returns `null` if no error occurred,\n//@ otherwise returns string explaining the error\nexports.error = function() {\n  return state.error;\n}\n\n\n\n\n\n////////////////////////////////////////////////////////////////////////////////////////////////\n//\n// Auxiliary functions (internal use only)\n//\n\nfunction log() {\n  if (!config.silent)\n    console.log.apply(this, arguments);\n}\n\nfunction deprecate(what, msg) {\n  console.log('*** ShellJS.'+what+': This function is deprecated.', msg);\n}\n\nfunction write(msg) {\n  if (!config.silent)\n    process.stdout.write(msg);\n}\n\n// Shows error message. Throws unless _continue or config.fatal are true\nfunction error(msg, _continue) {\n  if (state.error === null)\n    state.error = '';\n  state.error += state.currentCmd + ': ' + msg + '\\n';\n  \n  log(state.error);\n\n  if (config.fatal)\n    process.exit(1);\n\n  if (!_continue)\n    throw '';\n}\n\n// Returns {'alice': true, 'bob': false} when passed:\n//   parseOptions('-a', {'a':'alice', 'b':'bob'});\nfunction parseOptions(str, map) {\n  if (!map)\n    error('parseOptions() internal error: no map given');\n\n  // All options are false by default\n  var options = {};\n  for (var letter in map)\n    options[map[letter]] = false;\n\n  if (!str)\n    return options; // defaults\n\n  if (typeof str !== 'string')\n    error('parseOptions() internal error: wrong str');\n\n  // e.g. match[1] = 'Rf' for str = '-Rf'\n  var match = str.match(/^\\-(.+)/);\n  if (!match)\n    return options;\n\n  // e.g. chars = ['R', 'f']\n  var chars = match[1].split('');\n\n  chars.forEach(function(char) {\n    if (char in map)\n      options[map[char]] = true;\n    else\n      error('option not recognized: '+char);\n  });\n\n  return options;\n}\n\n// Common wrapper for all Unix-like commands\nfunction wrap(cmd, fn, options) {\n  return function() {\n    var retValue = null;\n\n    state.currentCmd = cmd;\n    state.error = null;\n\n    try {\n      var args = [].slice.call(arguments, 0);\n\n      if (options && options.notUnix) {\n        retValue = fn.apply(this, args);\n      } else {\n        if (args.length === 0 || typeof args[0] !== 'string' || args[0][0] !== '-')\n          args.unshift(''); // only add dummy option if '-option' not already present\n        retValue = fn.apply(this, args);\n      }\n    } catch (e) {\n      if (!state.error) {\n        // If state.error hasn't been set it's an error thrown by Node, not us - probably a bug...\n        console.log('shell.js: internal error');\n        console.log(e.stack || e);\n        process.exit(1);\n      }\n      if (config.fatal)\n        throw e;\n    }\n\n    state.currentCmd = 'shell.js';\n    return retValue;\n  }\n} // wrap\n\n// Buffered file copy, synchronous\n// (Using readFileSync() + writeFileSync() could easily cause a memory overflow\n//  with large files)\nfunction copyFileSync(srcFile, destFile) {\n  if (!fs.existsSync(srcFile))\n    error('copyFileSync: no such file or directory: ' + srcFile);\n\n  var BUF_LENGTH = 64*1024,\n      buf = new Buffer(BUF_LENGTH),\n      bytesRead = BUF_LENGTH,\n      pos = 0,\n      fdr = null,\n      fdw = null;\n\n  try {\n    fdr = fs.openSync(srcFile, 'r');\n  } catch(e) {\n    error('copyFileSync: could not read src file ('+srcFile+')');\n  }\n\n  try {\n    fdw = fs.openSync(destFile, 'w');\n  } catch(e) {\n    error('copyFileSync: could not write to dest file (code='+e.code+'):'+destFile);\n  }\n\n  while (bytesRead === BUF_LENGTH) {\n    bytesRead = fs.readSync(fdr, buf, 0, BUF_LENGTH, pos);\n    fs.writeSync(fdw, buf, 0, bytesRead);\n    pos += bytesRead;\n  }\n\n  fs.closeSync(fdr);\n  fs.closeSync(fdw);\n}\n\n// Recursively copies 'sourceDir' into 'destDir'\n// Adapted from https://github.com/ryanmcgrath/wrench-js\n//\n// Copyright (c) 2010 Ryan McGrath\n// Copyright (c) 2012 Artur Adib\n//\n// Licensed under the MIT License\n// http://www.opensource.org/licenses/mit-license.php\nfunction cpdirSyncRecursive(sourceDir, destDir, opts) {\n  if (!opts) opts = {};\n\n  /* Create the directory where all our junk is moving to; read the mode of the source directory and mirror it */\n  var checkDir = fs.statSync(sourceDir);\n  try {\n    fs.mkdirSync(destDir, checkDir.mode);\n  } catch (e) {\n    //if the directory already exists, that's okay\n    if (e.code !== 'EEXIST') throw e;\n  }\n\n  var files = fs.readdirSync(sourceDir);\n\n  for(var i = 0; i < files.length; i++) {\n    var currFile = fs.lstatSync(sourceDir + \"/\" + files[i]);\n\n    if (currFile.isDirectory()) {\n      /* recursion this thing right on back. */\n      cpdirSyncRecursive(sourceDir + \"/\" + files[i], destDir + \"/\" + files[i], opts);\n    } else if (currFile.isSymbolicLink()) {\n      var symlinkFull = fs.readlinkSync(sourceDir + \"/\" + files[i]);\n      fs.symlinkSync(symlinkFull, destDir + \"/\" + files[i]);\n    } else {\n      /* At this point, we've hit a file actually worth copying... so copy it on over. */\n      if (fs.existsSync(destDir + \"/\" + files[i]) && !opts.force) {\n        log('skipping existing file: ' + files[i]);\n      } else {\n        copyFileSync(sourceDir + \"/\" + files[i], destDir + \"/\" + files[i]);\n      }\n    }\n\n  } // for files\n}; // cpdirSyncRecursive\n\n// Recursively removes 'dir'\n// Adapted from https://github.com/ryanmcgrath/wrench-js\n//\n// Copyright (c) 2010 Ryan McGrath\n// Copyright (c) 2012 Artur Adib\n//\n// Licensed under the MIT License\n// http://www.opensource.org/licenses/mit-license.php\nfunction rmdirSyncRecursive(dir, force) {\n  var files;\n\n  files = fs.readdirSync(dir);\n\n  // Loop through and delete everything in the sub-tree after checking it\n  for(var i = 0; i < files.length; i++) {\n    var file = dir + \"/\" + files[i],\n        currFile = fs.lstatSync(file);\n\n    if(currFile.isDirectory()) { // Recursive function back to the beginning\n      rmdirSyncRecursive(file, force);\n    }\n\n    else if(currFile.isSymbolicLink()) { // Unlink symlinks\n      if (force || isWriteable(file)) {\n        try {\n          _unlinkSync(file);\n        } catch (e) {\n          error('could not remove file (code '+e.code+'): ' + file, true);\n        }\n      }\n    }\n\n    else // Assume it's a file - perhaps a try/catch belongs here?\n      if (force || isWriteable(file)) {\n        try {\n          _unlinkSync(file);\n        } catch (e) {\n          error('could not remove file (code '+e.code+'): ' + file, true);\n        }\n      }\n  }\n\n  // Now that we know everything in the sub-tree has been deleted, we can delete the main directory. \n  // Huzzah for the shopkeep.\n\n  var result;\n  try {\n    result = fs.rmdirSync(dir);\n  } catch(e) {\n    error('could not remove directory (code '+e.code+'): ' + dir, true);\n  }\n\n  return result;\n}; // rmdirSyncRecursive\n\n// Recursively creates 'dir'\nfunction mkdirSyncRecursive(dir) {\n  var baseDir = path.dirname(dir);\n\n  // Base dir exists, no recursion necessary\n  if (fs.existsSync(baseDir)) {\n    fs.mkdirSync(dir, 0777);\n    return;\n  }\n\n  // Base dir does not exist, go recursive\n  mkdirSyncRecursive(baseDir);\n\n  // Base dir created, can create dir\n  fs.mkdirSync(dir, 0777);\n};\n\n// e.g. 'makerjs_a5f185d0443ca...'\nfunction randomFileName() {\n  function randomHash(count) {\n    if (count === 1)\n      return parseInt(16*Math.random()).toString(16);\n    else {\n      var hash = '';\n      for (var i=0; i<count; i++)\n        hash += randomHash(1);\n      return hash;\n    }\n  }\n\n  return 'makerjs_'+randomHash(20);\n}\n\n// Returns false if 'dir' is not a writeable directory, 'dir' otherwise\nfunction writeableDir(dir) {\n  if (!dir || !fs.existsSync(dir))\n    return false;\n\n  if (!fs.statSync(dir).isDirectory())\n    return false;\n\n  var testFile = dir+'/'+randomFileName();\n  try {\n    fs.writeFileSync(testFile, ' ');\n    _unlinkSync(testFile);\n    return dir;\n  } catch (e) {\n    return false;\n  }\n}\n\n// Cross-platform method for getting an available temporary directory.\n// Follows the algorithm of Python's tempfile.tempdir\n// http://docs.python.org/library/tempfile.html#tempfile.tempdir\nfunction tempDir() {\n  if (state.tempDir)\n    return state.tempDir; // from cache\n\n  state.tempDir = writeableDir(process.env['TMPDIR']) ||\n                  writeableDir(process.env['TEMP']) ||\n                  writeableDir(process.env['TMP']) ||\n                  writeableDir(process.env['Wimp$ScrapDir']) || // RiscOS\n                  writeableDir('C:\\\\TEMP') || // Windows\n                  writeableDir('C:\\\\TMP') || // Windows\n                  writeableDir('\\\\TEMP') || // Windows\n                  writeableDir('\\\\TMP') || // Windows\n                  writeableDir('/tmp') ||\n                  writeableDir('/var/tmp') ||\n                  writeableDir('/usr/tmp') ||\n                  writeableDir('.'); // last resort\n  \n  return state.tempDir;\n}\n\n// Wrapper around exec() to enable echoing output to console in real time\nfunction execAsync(cmd, opts, callback) {\n  var output = '';\n\n  var options = extend({\n    silent: config.silent\n  }, opts);\n  \n  var c = child.exec(cmd, {env: process.env}, function(err) {\n    if (callback) \n      callback(err ? err.code : 0, output);\n  });\n\n  c.stdout.on('data', function(data) {\n    output += data;\n    if (!options.silent)\n      process.stdout.write(data);\n  });\n\n  c.stderr.on('data', function(data) {\n    output += data;\n    if (!options.silent)\n      process.stdout.write(data);\n  });\n\n  return c;\n}\n\n// Hack to run child_process.exec() synchronously (sync avoids callback hell)\n// Uses a custom wait loop that checks for a flag file, created when the child process is done.\n// (Can't do a wait loop that checks for internal Node variables/messages as\n// Node is single-threaded; callbacks and other internal state changes are done in the \n// event loop).\nfunction execSync(cmd, opts) {\n  var stdoutFile = path.resolve(tempDir()+'/'+randomFileName()),\n      codeFile = path.resolve(tempDir()+'/'+randomFileName()),\n      scriptFile = path.resolve(tempDir()+'/'+randomFileName()),\n      sleepFile = path.resolve(tempDir()+'/'+randomFileName());\n\n  var options = extend({\n    silent: config.silent\n  }, opts);\n\n  var previousStdoutContent = '';\n  // Echoes stdout changes from running process, if not silent\n  function updateStdout() {\n    if (options.silent || !fs.existsSync(stdoutFile))\n      return;\n\n    var stdoutContent = fs.readFileSync(stdoutFile, 'utf8');\n    // No changes since last time?\n    if (stdoutContent.length <= previousStdoutContent.length)\n      return;\n\n    process.stdout.write(stdoutContent.substr(previousStdoutContent.length));\n    previousStdoutContent = stdoutContent;\n  }\n\n  function escape(str) {\n    str = str.replace(/\\'/g, '\"');\n    str = str.replace(/\\\\/g, '\\\\\\\\');\n    return str;\n  }\n    \n  cmd += ' > '+stdoutFile+' 2>&1'; // works on both win/unix\n\n  var script = \n   \"var child = require('child_process'), \\\n        fs = require('fs'); \\\n    child.exec('\"+escape(cmd)+\"', {env: process.env}, function(err) { \\\n      fs.writeFileSync('\"+escape(codeFile)+\"', err ? err.code.toString() : '0'); \\\n    });\";\n\n  if (fs.existsSync(scriptFile)) _unlinkSync(scriptFile);\n  if (fs.existsSync(stdoutFile)) _unlinkSync(stdoutFile);\n  if (fs.existsSync(codeFile)) _unlinkSync(codeFile);\n\n  fs.writeFileSync(scriptFile, script);\n  child.exec('node '+scriptFile, { \n    env: process.env,\n    cwd: exports.pwd()\n  });\n\n  // The wait loop\n  // sleepFile is used as a dummy I/O op to mitigate unnecessary CPU usage\n  // (tried many I/O sync ops, writeFileSync() seems to be only one that is effective in reducing\n  // CPU usage, though apparently not so much on Windows)\n  while (!fs.existsSync(codeFile)) { updateStdout(); fs.writeFileSync(sleepFile, 'a'); };\n  while (!fs.existsSync(stdoutFile)) { updateStdout(); fs.writeFileSync(sleepFile, 'a'); };\n\n  // At this point codeFile exists, but it's not necessarily flushed yet.\n  // Keep reading it until it is.\n  var code = parseInt('');\n  while (isNaN(code))\n    code = parseInt(fs.readFileSync(codeFile, 'utf8'));\n\n  var stdout = fs.readFileSync(stdoutFile, 'utf8');\n\n  // No biggie if we can't erase the files now -- they're in a temp dir anyway\n  try { _unlinkSync(scriptFile); } catch(e) {};\n  try { _unlinkSync(stdoutFile); } catch(e) {};\n  try { _unlinkSync(codeFile); } catch(e) {};\n  try { _unlinkSync(sleepFile); } catch(e) {};\n  \n  // True if successful, false if not\n  var obj = {\n    code: code,\n    output: stdout\n  };\n  return obj;\n} // execSync()\n\n// Expands wildcards with matching file names. For a given array of file names 'list', returns \n// another array containing all file names as per ls(list[i]). \n// For example:\n//   expand(['file*.js']) = ['file1.js', 'file2.js', ...]\n//   (if the files 'file1.js', 'file2.js', etc, exist in the current dir)\nfunction expand(list) {\n  var expanded = [];\n  list.forEach(function(listEl) {\n    // Wildcard present? \n    if (listEl.search(/\\*/) > -1) {\n      _ls('', listEl).forEach(function(file) {\n        expanded.push(file);\n      });\n    } else {\n      expanded.push(listEl);\n    }\n  });  \n  return expanded;\n}\n\n// Cross-platform method for splitting environment PATH variables\nfunction splitPath(p) {\n  if (!p)\n    return [];\n\n  if (platform === 'win')\n    return p.split(';');\n  else\n    return p.split(':');\n}\n\n// extend(target_obj, source_obj1 [, source_obj2 ...])\n// Shallow extend, e.g.:\n//    extend({A:1}, {b:2}, {c:3}) returns {A:1, b:2, c:3}\nfunction extend(target) {\n  var sources = [].slice.call(arguments, 1);\n  sources.forEach(function(source) {\n    for (var key in source)\n      target[key] = source[key];\n  });\n  \n  return target;\n}\n\n// Normalizes _unlinkSync() across platforms to match Unix behavior, i.e.\n// file can be unlinked even if it's read-only, see joyent/node#3006\nfunction _unlinkSync(file) {\n  try {\n    fs.unlinkSync(file);\n  } catch(e) {\n    // Try to override file permission\n    if (e.code === 'EPERM') {\n      fs.chmodSync(file, '0666');\n      fs.unlinkSync(file);\n    } else {\n      throw e;\n    }\n  }\n}\n\n// Hack to determine if file has write permissions for current user\n// Avoids having to check user, group, etc, but it's probably slow\nfunction isWriteable(file) {\n  var writePermission = true;\n  try {\n    var __fd = fs.openSync(file, 'a');\n    fs.closeSync(__fd);\n  } catch(e) {\n    writePermission = false;\n  }\n\n  return writePermission;\n}\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap-build/lib/common/config/global.js":"/*\n * Module dependencies.\n */\n\nvar shell = require('shelljs'),\n    path = require('path'),\n    fs = require('fs');\n\n/**\n * Path to config directory.\n *\n * By default, the config is shared with PhoneGap's config at: ~/.phonegap/\n *\n * You can override this desired.\n */\n\nmodule.exports.path = path.join(\n    process.env[(process.platform == 'win32') ? 'USERPROFILE' : 'HOME'],\n    '.cordova'\n);\n\n/**\n * Load the config.\n *\n * Returns the content of configuration file.\n * The configuration file is found at `PATH/config.json`.\n * The value of `PATH` is defined by `config.path`.\n *\n * Options:\n *\n *   - `callback` {Function} is triggered with the config data.\n *     - `e` {Error} is null when there is no error.\n *     - `data` {Object} is the JSON content of configuration file.\n */\n\nmodule.exports.load = function(callback) {\n    // require callback\n    if (!callback) {\n        throw new Error('missing callback argument');\n    }\n\n    var filepath = path.join(module.exports.path, 'config.json');\n\n    // check if config exists\n    fs.exists(filepath, function(exists) {\n        if (exists) {\n            // read config file\n            fs.readFile(filepath, function(e, data) {\n                if (e) {\n                    callback(e);\n                    return;\n                }\n\n                // return config file object\n                data = JSON.parse(data);\n                data.phonegap = data.phonegap || {};\n                callback(null, data);\n            });\n        }\n        else {\n            // create config file\n            var data = { phonegap: {} };\n            module.exports.save(data, function(e) {\n                if (e) {\n                    callback(e);\n                    return;\n                }\n\n                // return config file object\n                callback(null, data);\n            });\n        }\n    });\n};\n\n/**\n * Save the config.\n *\n * Write the data object as a string to the configuration document.\n *\n * Options:\n *\n *   - `data` {Object} is the data to append to the config file.\n *   - `callback` {Function} is trigger after the save operation.\n *     - `e` {Error} is null when there is no error.\n */\n\nmodule.exports.save = function(data, callback) {\n    // require data\n    if (!data) {\n        throw new Error('missing data argument');\n    }\n\n    // require callback\n    if (!callback) {\n        throw new Error('missing callback argument');\n    }\n\n    var filepath = path.join(module.exports.path, 'config.json');\n\n    // create the path\n    shell.mkdir('-p', path.dirname(filepath));\n\n    // write to config file\n    fs.writeFile(filepath, JSON.stringify(data), function(e) {\n        callback(e);\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap-build/lib/common/extend.js":"/**\n * Extend an object.\n *\n * Creates a new object that merges the `overrides` into\n * the `defaults` object.\n *\n * Options:\n *\n *   - `defaults` {Object} is the default values to return.\n *   - `overrides` {Object} will be merged into `defaults`.\n *\n * Returns:\n *\n *   A new {Object}.\n */\n\nmodule.exports = function extend(defaults, overrides) {\n    var result = {},\n        key;\n\n    for (key in defaults) {\n        result[key] = defaults[key];\n    }\n\n    for (key in overrides) {\n        if (overrides[key] !== undefined) {\n            result[key] = overrides[key];\n        }\n    }\n\n    return result;\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap-build/lib/phonegap-build/logout.js":"/*!\n * Module dependencies.\n */\n\nvar events = require('events'),\n    config = require('../common/config');\n\n/**\n * Logout.\n *\n * Logout the user by deleting the token key from the config file.\n *\n * Options:\n *\n *   - `args` {Object} is unused and should be `{}`.\n *   - [`callback`] {Function} is a callback function.\n *     - `e` {Error} is null unless there is an error.\n *\n * Events:\n *\n *   - `error` is trigger on an error.\n *     - `e` {Error} details the error.\n */\n\nmodule.exports = function(args, callback) {\n    // require args parameter\n    if (!args) {\n        throw new Error('missing args parameter');\n    }\n\n    // optional callback\n    callback = callback || function(e) {};\n\n    // logout\n    execute.call(this, args, callback);\n\n    return this;\n};\n\n/*!\n * Execute Logout.\n */\n\nvar execute = function(args, callback) {\n    var self = this;\n\n    // read global config file\n    config.global.load(function(e, data) {\n        if (e) {\n            self.emit('error', e);\n            callback(e);\n            return;\n        }\n\n        // log out by removing user auth token\n        delete data.phonegap.token;\n        config.global.save(data, function(e) {\n            if (e) {\n                self.emit('error', e);\n                callback(e);\n                return;\n            }\n\n            self.emit('log', 'logged out of', 'build.phonegap.com'.underline);\n            callback(null);\n        });\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap-build/lib/phonegap-build/create.js":"/*!\n * Module dependencies.\n */\n\nvar events = require('events'),\n    path = require('path');\n\n/**\n * Create a New App.\n *\n * Creates an application on the local filesystem.\n * The remote application is created on-demand during the first build.\n *\n * Options:\n *\n *   - `options` {Object} is data required to create an app\n *     - `path` {String} is a directory path for the app.\n *   - [`callback`] {Function} is triggered after creating the app.\n *     - `e` {Error} is null unless there is an error.\n *\n * Events:\n *\n *   - `error` is triggered on an error.\n *     - `e` {Error} details the error.\n */\n\nmodule.exports = function(options, callback) {\n    // require options\n    if (!options) throw new Error('requires option parameter');\n    if (!options.path) throw new Error('requires option.path parameter');\n\n    // optional callback\n    callback = callback || function() {};\n\n    // expand path\n    options.path = path.resolve(options.path);\n\n    // create app\n    execute.call(this, options, callback);\n\n    return this;\n};\n\n/*!\n * Define helper.\n */\n\nmodule.exports.local = require('./create/local');\n\n/*!\n * Execute.\n */\n\nvar execute = function(options, callback) {\n    var self = this;\n\n    // create local project\n    module.exports.local({ path: options.path }, function(e) {\n        if (e) {\n            self.emit('error', e);\n            callback(e);\n            return;\n        }\n\n        callback(null);\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap-build/lib/phonegap-build/create/local.js":"/*!\n * Module dependencies.\n */\n\nvar shell = require('shelljs'),\n    path = require('path'),\n    fs = require('fs');\n\n/**\n * Create local project.\n *\n * Creates the project directory specified by `options.path` and populates it\n * with a standards PhoneGap project template.\n *\n * Options:\n *\n *   - `options` {Object} is the project configuration.\n *   - `options.path` {String} is the file system path to create application.\n *   - `callback` {Function} is the completion callback.\n *     - `e` {Error} is null unless there is an error.\n */\n\nmodule.exports = function(options, callback) {\n    // require options\n    if (!options) throw new Error('requires option parameter');\n    if (!options.path) throw new Error('requires option.path parameter');\n\n    // optional callback\n    callback = callback || function() {};\n\n    // check if path exists\n    fs.exists(options.path, function(exists) {\n        if (exists) {\n            callback(new Error('path already exists'));\n            return;\n        }\n\n        // create path leading up to the project\n        shell.mkdir('-p', path.resolve(options.path, '..'));\n\n        if (shell.error()) {\n            callback(new Error(shell.error()));\n            return;\n        }\n\n        // copy template project to the destination path\n        shell.cp('-R', path.join(__dirname, '..', '..', '..', 'res', 'project-template'), path.resolve(options.path, '..'));\n\n        if (shell.error()) {\n            callback(new Error(shell.error()));\n            return;\n        }\n\n        // rename template project to user specified app name\n        shell.mv(path.resolve(options.path, '..', 'project-template'), options.path);\n\n        if (shell.error()) {\n            callback(new Error(shell.error()));\n            return;\n        }\n\n        callback(null);\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap-build/lib/phonegap-build/build.js":"/*!\n * Module dependencies.\n */\n\nvar events = require('events'),\n    config = require('../common/config'),\n    path = require('path');\n\n/**\n * Build an app using PhoneGap Build.\n *\n * Builds the application using PhoneGap/Build. If the application does not\n * exist, then it is first created. Currently, the build task only supports\n * file transfers (zip) but will be extended to git repositories in the future.\n *\n * Options:\n *\n *   - `options` {Object} is data required for building a platform.\n *   - `options.platforms` {Array} is a collection of platform names {String} that\n *                         specify the platforms to build.\n *   - [`callback`] {Function} is triggered after the build is complete.\n *     - `e` {Error} is null unless there is an error.\n *     - `data` {Object} describes the built app.\n *\n * Events:\n *\n *   - `error` is trigger on an error.\n *     - `e` {Error} details the error.\n */\n\nmodule.exports = function(options, callback) {\n    // require options\n    if (!options) throw new Error('requires option parameter');\n    if (!options.platforms) throw new Error('requires option.platforms parameter');\n\n    // optional callback\n    callback = callback || function() {};\n\n    // build\n    execute.call(this, options, callback);\n\n    return this;\n};\n\n/*!\n * Helper modules.\n */\n\nmodule.exports.create = require('./create/remote');\nmodule.exports.build = require('./build/remote');\n\n/*!\n * Execute.\n */\n\nvar execute = function(options, callback) {\n    var self = this;\n\n    // login and get api object\n    self.login(options, function(e, api) {\n        if (e) {\n            callback(e);\n            return;\n        }\n\n        // lookup app id\n        config.local.load(function(e, data) {\n            if (e) {\n                self.emit('error', e);\n                callback(e);\n                return;\n            }\n\n            // required options to build\n            options.emitter = self;\n            options.api = api;\n\n            // common callback\n            var _callback = function(e, data) {\n                if (e) {\n                    self.emit('error', e);\n                }\n                callback(e, data);\n            };\n\n            // build app when id exists otherwise create app\n            if (data.phonegap && data.phonegap.id) {\n                module.exports.build(options, _callback);\n            }\n            else {\n                module.exports.create(options, _callback);\n            }\n        });\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap-build/lib/phonegap-build/create/remote.js":"/*\n * Module dependencies.\n */\n\nvar config = require('../../common/config'),\n    path = require('path'),\n    zip = require('./zip'),\n    fs = require('fs');\n\n/**\n * Create remote application.\n *\n * Options:\n *\n *   - `options` {Object} is the remote application data.\n *   - `options.api` {Object} is the API object defined by phonegap-build-rest.\n *   - `options.emitter` {EventEmitter} is the parent's event emitter.\n *   - `callback` {Function} is the completion callback.\n *     - `e` {Error} is null unless there is an error.\n *     - `data` {Object} describes the built app.\n */\n\nmodule.exports = function(options, callback) {\n    // require parameters\n    if (!options) throw new Error('missing options parameter');\n    if (!options.api) throw new Error('missing options.api parameter');\n    if (!options.emitter) throw new Error('missing options.emitter parameter');\n    if (!callback) throw new Error('missing callback parameter');\n\n    // setup the zip input and output paths\n    var paths = {\n        root: process.cwd(),\n        www: path.join(process.cwd(), 'www'),\n        build: path.join(process.cwd(), 'build')\n    };\n\n    // find the config.xml path\n    var configPath = path.join(paths.root, 'config.xml');\n    if (!fs.existsSync(configPath)) {\n        configPath = path.join(paths.www, 'config.xml');\n    }\n\n    // app name\n    fs.readFile(configPath, 'utf8', function(e, data) {\n        if (e) {\n            callback(e);\n            return;\n        }\n\n        var match = data.match(/<name>(.*)<\\/name>/);\n        var appName = (match) ? match[1] : null;\n\n        if (!appName) {\n            callback(new Error('Could not get application name from config.xml'));\n            return;\n        }\n\n        // compress app for upload\n        options.emitter.emit('log', 'compressing the app...');\n        zip.compress(paths.www, paths.build, function(e, filename) {\n            if (e) {\n                callback(e);\n                return;\n            }\n\n            // app url\n            var url = '/apps';\n\n            // post headers for phonegap build api\n            var headers = {\n                form: {\n                    data: {\n                        title: appName,\n                        create_method: 'file'\n                    },\n                    file: filename\n                }\n            };\n\n            // create app on phonegap build\n            options.emitter.emit('log', 'uploading the app...');\n            options.api.post(url, headers, function(e, response) {\n                zip.cleanup(filename);\n\n                if (e) {\n                    callback(e);\n                    return;\n                }\n\n                // update config.json\n                config.local.load(function(e, data) {\n                    if (e) {\n                        callback(e);\n                        return;\n                    }\n\n                    // add app id to config.json\n                    data.phonegap = data.phonegap || {};\n                    data.phonegap.id = response.id;\n\n                    config.local.save(data, function(e) {\n                        if (e) {\n                            callback(e);\n                            return;\n                        }\n\n                        var buildData = {\n                            id: data.phonegap.id,\n                            api: options.api,\n                            platforms: options.platforms || ['android'] // @TODO Remove stub\n                        };\n\n                        // wait for the platform build to be completed\n                        options.emitter.emit('log', 'building the app...');\n                        module.exports.waitForComplete(buildData, function(e, data) {\n                            if (e) {\n                                callback(e);\n                                return;\n                            }\n\n                            callback(null, data);\n                        });\n                    });\n                });\n            });\n        });\n    });\n};\n\n/**\n * Wait for Build to Complete\n *\n * Continually queries the application build status. When the specified platform\n * build status changes to `complete` or `error`, then trigger the callback.\n *\n * Options:\n *\n *   - `options` {Object} defines the application and platform to watch.\n *   - `options.api` {Object} is the api object to access phonegap build.\n *   - `options.id` {Number} is the app ID to query.\n *   - `options.platforms` {Array} is a set of platform names to watch.\n *   - `callback` {Function} is triggered when the build is finished.\n *     - `e` {Error} is null unless there is an error.\n *     - `data` {Object} describes the built app.\n */\n\nmodule.exports.waitForComplete = function(options, callback) {\n    // required arguments\n    if (!options) throw new Error('missing options parameter');\n    if (!options.api) throw new Error('missing options.api parameter');\n    if (!options.id) throw new Error('missing options.id parameter');\n    if (!options.platforms) throw new Error('missing options.platforms parameter');\n    if (!callback) throw new Error('missing callback parameter');\n\n    var url = '/apps/' + options.id;\n    var platform = options.platforms[0];\n\n    // get the app info\n    options.api.get(url, function(e, data) {\n        if (e) {\n            callback(e);\n            return;\n        }\n\n        // lookup the progress of a specific platform\n        var status = data.status[platform];\n\n        // trigger callback with error because the app build progress has\n        // an error state\n        // @TODO is there a way to lookup info about the error?\n        if (status === 'error') {\n            callback(new Error('error occured while building the ' + platform + ' app'));\n        }\n        // trigger callback because the app has completed building\n        else if (status === 'complete') {\n            callback(null, data);\n        }\n        // pause to avoid slamming the API before re-checking the progress\n        else {\n            setTimeout(function() {\n                module.exports.waitForComplete(options, callback);\n            }, 5000);\n        }\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap-build/lib/phonegap-build/create/zip.js":"/*\n * Module dependencies.\n */\n\nvar shell = require('shelljs'),\n    path = require('path'),\n    util = require('util'),\n    fs = require('fs'),\n    os = require('os');\n\n/**\n * Zip a Directory.\n */\n\nmodule.exports = {\n\n    /**\n     * Zip a Directory.\n     *\n     * Options:\n     *\n     *   - `wwwPath` {String} is the path to the application's www/.\n     *   - `buildPath` {String} is the path to the application's build/.\n     *   - `callback` {Function} is trigger after the compress.\n     *     - `e` {Error} is null unless there is an error.\n     *     - `zipPath` {String} is the path to the zip archive.\n     */\n\n    compress: function(wwwPath, buildPath, callback) {\n        // require parameters\n        if (!wwwPath) throw new Error('missing www/ path argument');\n        if (!buildPath) throw new Error('missing build/ path argument');\n        if (!callback) throw new Error('missing callback argument');\n\n        fs.exists(wwwPath, function(exists) {\n            if (!exists) {\n                callback(new Error('www path does not exist: ' + wwwPath));\n                return;\n            }\n\n            // Phonegap Build expects 'www' to be at the root level in the\n            // ZIP-file - we'll keep the oldDir to CD back after the ZIP's\n            // been created.\n            var oldDir = shell.pwd();\n            shell.cd(wwwPath);\n\n            // make build directory\n            shell.mkdir('-p', buildPath);\n\n            // set the output zip path\n            var zipPath = path.resolve(buildPath, 'www.zip'),\n                inputPath = path.resolve(wwwPath),\n                configPath = path.resolve(path.join(inputPath, '..', 'config.xml')),\n                buildWWWPath = path.resolve(path.join(buildPath, 'www'));\n\n            // copy my-app/www/ to <buildPath>/www/ directory\n            shell.cp('-r', inputPath, buildPath);\n\n            // copy my-app/config.xml to temp directory, when it exists\n            if (fs.existsSync(configPath)) {\n                shell.cp(configPath, buildWWWPath);\n            }\n\n            // shell out to zip. For windows, use native script.\n            var cmd = util.format('zip -r \"%s\" \"%s\"', zipPath, buildWWWPath);\n\n            if (os.type() === \"Windows_NT\") {\n                cmd = util.format(\n                    'wscript \"%s\" \"%s\" \"%s\"',\n                    path.join(__dirname, '..', '..', '..', 'res', 'windows', 'zip.js'),\n                    zipPath,\n                    buildWWWPath\n                );\n            }\n\n            var out = shell.exec(cmd, { silent: true });\n\n            // remove temporary www directory\n            shell.rm('-r', buildWWWPath);\n\n            // Change back to old directory due to implicit assumptions\n            // on the current working directory elsewhere in the script.\n            shell.cd(oldDir);\n\n            if (out.code !== 0) {\n                module.exports.cleanup(zipPath);\n                callback(new Error('failed to create the zip file: ' + out.output));\n            }\n            else {\n                callback(null, zipPath);\n            }\n        });\n    },\n\n    /**\n     * Cleanup Zip Archive.\n     *\n     * Deletes the zip archive created by `compress(path, callback)` and removes\n     * the parent directory if empty.\n     *\n     * Options:\n     *\n     *   - `zipPath` {String} is the path to the zip archive.\n     */\n\n    cleanup: function(zipPath) {\n        var exists,\n            basepath = path.dirname(zipPath);\n\n        // remove zip file\n        exists = fs.existsSync(zipPath);\n        if (exists) {\n            shell.rm(zipPath);\n        }\n\n        // remove zip directory if empty\n        exists = fs.existsSync(basepath);\n        if (exists) {\n            fs.rmdir(basepath);\n        }\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap-build/lib/phonegap-build/build/remote.js":"/*!\n * Module dependencies.\n */\n\nvar events = require('events'),\n    config = require('../../common/config'),\n    zip = require('../create/zip'),\n    path = require('path');\n\n/**\n * Build an app using PhoneGap Build.\n *\n * The build task will compress the application, upload it to PhoneGap Build,\n * and poll until the platform's build status is complete or an error is\n * encountered.\n *\n * Options:\n *\n *   - `options` {Object} is data required for building a platform.\n *   - `options.api` {Object} is the phonegap-build-api API object.\n *   - `options.emitter` {EventEmitter} is the parent's event emitter.\n *   - `options.platforms` {Array} is a collection of platform names {String} that\n *                         specify the platforms to build.\n *   - [`callback`] {Function} is triggered after the build is complete.\n *     - `e` {Error} is null unless there is an error.\n *     - `data` {Object} describes the built app.\n */\n\nmodule.exports = function(options, callback) {\n    // require options\n    if (!options) throw new Error('requires option parameter');\n    if (!options.api) throw new Error('requires option.api parameter');\n    if (!options.emitter) throw new Error('missing options.emitter parameter');\n    if (!options.platforms) throw new Error('requires option.platforms parameter');\n    if (!callback) throw new Error('requires callback parameter');\n\n    // paths for zip input and output\n    var paths = {\n        www: path.join(process.cwd(), 'www'),\n        build: path.join(process.cwd(), 'build')\n    };\n\n    // compress the app\n    options.emitter.emit('log', 'compressing the app...');\n    zip.compress(paths.www, paths.build, function(e, filename) {\n        if (e) {\n            callback(e);\n            return;\n        }\n\n        // lookup app id\n        config.local.load(function(e, data) {\n            if (e) {\n                callback(e);\n                return;\n            }\n\n            // app url\n            var url = '/apps/' + data.phonegap.id;\n\n            // put headers for zip file upload\n            var headers = {\n                form: {\n                    file: filename\n                }\n            };\n\n            // build app with phonegap build\n            options.emitter.emit('log', 'uploading the app...');\n            options.api.put(url, headers, function(e, response) {\n                zip.cleanup(filename);\n\n                if (e) {\n                    callback(e);\n                    return;\n                }\n\n                var buildData = {\n                    id: data.phonegap.id,\n                    api: options.api,\n                    platforms: options.platforms\n                };\n\n                // wait for the platform build to be completed\n                options.emitter.emit('log', 'building the app...');\n                module.exports.waitForComplete(buildData, function(e, data) {\n                    if (e) {\n                        callback(e);\n                        return;\n                    }\n\n                    callback(null, data);\n                });\n            });\n        });\n    });\n};\n\n/**\n * Wait for Build to Complete\n *\n * Continually queries the application build status. When the specified platform\n * build status changes to `complete` or `error`, then trigger the callback.\n *\n * Options:\n *\n *   - `options` {Object} defines the application and platform to watch.\n *   - `options.api` {Object} is the api object to access phonegap build.\n *   - `options.id` {Number} is the app ID to query.\n *   - `options.platforms` {Array} is a set of platform names to watch.\n *   - `callback` {Function} is triggered when the build is finished.\n *     - `e` {Error} is null unless there is an error.\n *     - `data` {Object} describes the built app.\n */\n\nmodule.exports.waitForComplete = function(options, callback) {\n    // required arguments\n    if (!options) throw new Error('missing options parameter');\n    if (!options.api) throw new Error('missing options.api parameter');\n    if (!options.id) throw new Error('missing options.id parameter');\n    if (!options.platforms) throw new Error('missing options.platforms parameter');\n    if (!callback) throw new Error('missing callback parameter');\n\n    var url = '/apps/' + options.id;\n    var platform = options.platforms[0];\n\n    // get the app info\n    options.api.get(url, function(e, data) {\n        if (e) {\n            callback(e);\n            return;\n        }\n\n        // lookup the progress of a specific platform\n        var status = data.status[platform];\n\n        // trigger callback with error because the app build progress has\n        // an error state\n        // @TODO is there a way to lookup info about the error?\n        if (status === 'error') {\n            callback(new Error('error occured while building the ' + platform + ' app'));\n        }\n        // trigger callback because the app has completed building\n        else if (status === 'complete') {\n            callback(null, data);\n        }\n        // pause to avoid slamming the API before re-checking the progress\n        else {\n            setTimeout(function() {\n                module.exports.waitForComplete(options, callback);\n            }, 5000);\n        }\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/lib/phonegap/cordova.js":"/*!\n * Module dependencies.\n */\n\nvar Command = require('./util/command'),\n    cordova = require('../cordova'),\n    fs = require('fs'),\n    path = require('path'),\n    shell = require('shelljs'),\n    util = require('util');\n\n/*!\n * Command setup.\n */\n\nmodule.exports = {\n    create: function(phonegap) {\n        return new CordovaCommand(phonegap);\n    }\n};\n\nfunction CordovaCommand(phonegap) {\n    return Command.apply(this, arguments);\n}\n\nutil.inherits(CordovaCommand, Command);\n\n/**\n * Execute a Cordova command.\n *\n * Execute an arbitrary Cordova CLI command.\n *\n * Options:\n *\n *   - `options` {Object}\n *     - `cmd` {String} is the exact Cordova command to execute.\n *     - `verbose` {Boolean} enables verbose output (cordova output).\n *   - [`callback`] {Function} is triggered after executing the command.\n *     - `e` {Error} is null unless there is an error.\n *\n * Returns:\n *\n *   {PhoneGap} for chaining.\n */\n\nCordovaCommand.prototype.run = function(options, callback) {\n    var self = this;\n    // require options\n    if (!options) throw new Error('requires option parameter');\n    if (!options.cmd) throw new Error('requires option.cmd parameter');\n    var cordovaCmd = options.cmd.split(\" \");\n\n    // append --save by default to phonegap plugin add/remove/rm\n    var pluginCommands = [\"add\", \"remove\", \"rm\"];\n    var pluginAlias = [\"plugin\", \"plugins\"];\n    if (pluginAlias.indexOf(cordovaCmd[1]) != -1 &&\n        cordovaCmd.indexOf(\"--save\") == -1 && cordovaCmd.indexOf(\"--no-save\") == -1 &&\n        pluginCommands.indexOf(cordovaCmd[2]) != -1) {\n        options.cmd = options.cmd.concat(\" --save\");\n    }\n    // default options.verbose\n    if (isCustomCommand(options)) {\n        // these commands can be silenced or verbose\n        // first, do whatever the user specified\n        // if the user didn't specify, then assume silence\n        options.verbose = options.verbose || false;\n    }\n    else {\n        // all other commands must be verbose, since we don't know what they do\n        if (options.cmd == 'cordova platform add browser') {\n            // silence output when we auto add browser platform on serve\n            options.verbose = false;\n        } else {\n            options.verbose = true;\n        }\n    }\n\n    // optional callback\n    callback = callback || function() {};\n\n    // validate options\n    if (!options.cmd.match(/^cordova/)) {\n        throw new Error('options.cmd must execute cordova');\n    }\n\n    // enable implicit adding of platforms when they're missing\n    self.addMissingPlatforms(options, function() {\n        // inject phonegap.js into the platforms if it's referenced\n        self.addPhoneGapJSWarning(options, function() {\n            self.execute(options, callback);\n        });\n    });\n\n    return this.phonegap;\n};\n\n/*!\n * Execute.\n */\n\nCordovaCommand.prototype.execute = function(options, callback) {\n    var self = this;\n\n    // in order to shell out to the cordova dependency, we must first find\n    // where the dependencies binary was installed.\n    //\n    // in npm < 3.x it is found in:\n    //   - `phonegap/node_modules/.bin/cordova`\n    //\n    // in npm >= 3.x it is either flattened or found in a local node_modules:\n    //   - `phonegap/node_modules/.bin/cordova`\n    //   - `/node_modules/.bin/cordova`\n    //     - where phonegap is found at `/node_modules/phonegap/`\n\n    // first try to find the cordova binary for npm < 3.x\n    var binPath = path.resolve(path.join(__dirname, '..', '..', 'node_modules', '.bin'));\n\n    // second try to find the cordova binary for npm >= 3.x\n    if (!fs.existsSync(path.join(binPath, 'cordova'))) {\n        binPath = path.resolve(path.join(__dirname, '..', '..', '..', '.bin'));\n    }\n\n    // It's probably from Electron spawn\n    if (!fs.existsSync(binPath)) {\n        binPath = path.resolve(path.join(__dirname, '..', '..', 'node_modules', 'cordova', 'bin'));\n    }\n\n    // Another case where it could be run from an electron spawn\n    if (!fs.existsSync(binPath)) {\n        binPath = path.resolve(path.join(__dirname, '..', '..', '..', 'cordova', 'bin'));\n    }\n\n    var command = options.cmd.split(' ')[0],           // 'cordova' process name (it may change one day)\n        cordovaCommand = path.join(binPath, command), // /path/to/node_modules/.bin/cordova\n        execOptions = { async: true, silent: true },\n        buffer = [];\n\n    // support file paths that include a space character\n    if (cordovaCommand.match(' ')) {\n        cordovaCommand = '\"' + cordovaCommand + '\"';\n    }\n\n    // append the arguments and options onto the command\n    cordovaCommand += ' ' + options.cmd.substring(command.length + 1);\n\n    // output the command being excuted\n    if (isCustomCommand(options)) {\n        var cleanCommand = options.cmd.replace(\"--no-telemetry\",\"\");\n        self.phonegap.emit('log', 'executing', '\\'' + cleanCommand + '\\' ...');\n    }\n\n    // shell out the command to cordova\n    var child = shell.exec(cordovaCommand, execOptions, function(code, output) {\n        var e;\n        if (code !== 0) {\n            e = new Error('PhoneGap received an error from the Cordova CLI:\\n' +\n                          '  Command: ' + cordovaCommand + '\\n' +\n                          '  Exit code: ' + code);\n            e.exitCode = code;\n            e.output = output;\n\n            // send error info back to pg desktop app\n            if (process.send)\n                process.send(e);\n\n            // on an error, display the entire output log\n            self.phonegap.emit('raw', buffer.join('\\n'));\n        }\n        else {\n            if (isCustomCommand(options)) {\n                self.phonegap.emit('log', 'completed',\n                                          '\\''+options.cmd+'\\'');\n            }\n        }\n        callback(e);\n    });\n\n    child.stdout.on('data', function(data) {\n        if (options.verbose) {\n            self.phonegap.emit('raw', data.toString('utf8'));\n        }\n        else {\n            buffer.push(data);\n        }\n    });\n\n    child.stderr.on('data', function(data) {\n        if (options.verbose) {\n            self.phonegap.emit('raw', data.toString('utf8'));\n        }\n        else {\n            buffer.push(data);\n        }\n    });\n};\n\n/**\n * Add Missing Platforms.\n *\n * There are a bunch of Cordova commands that require a platform to exist.\n * Since the user is running the command, we can assume that they want the\n * platform to be added to their application. So, why not just add it for them?\n *\n * Options:\n *\n *   - `options` {Object} is identical to the Cordova command input.\n *   - [`callback`] {Function} is triggered after executing the command.\n *     - `e` {Error} is null unless there is an error.\n */\n\nCordovaCommand.prototype.addMissingPlatforms = function(options, callback) {\n    var self = this;\n\n    // crazy regex to match any command that requires a platform and the\n    // list of platforms after the command. If the command is missing the\n    // platforms, then this regex will fail. That failure is a good thing\n    // because when the user doesn't list platforms, then we have nothing\n    // to add.\n    var match = options.cmd.match(/(prepare|compile|build|run|emulate) ([\\w ]+)/);\n    if (match) {\n        // get a list of the platforms that need to be added to the project\n        var cordovaAddCommand = 'cordova platform add --save ',\n            projectRootPath = cordova.util.isCordova();\n\n        // project root will be false if it is not a cordova directory\n        if (!projectRootPath) {\n            return callback(new Error('not a PhoneGap directory'));\n        }\n\n        var requestedPlatforms = match[2].trim().split(' '),\n            installedPlatforms = cordova.util.listPlatforms(projectRootPath),\n            missingPlatforms = diff(requestedPlatforms, installedPlatforms);\n\n        if (missingPlatforms.length > 0) {\n            cordovaAddCommand += missingPlatforms.join(' ');\n            self.phonegap.cordova({\n                cmd: cordovaAddCommand,\n                verbose: options.verbose,\n                internalCommand: true\n            }, callback);\n            return;\n        }\n    }\n\n    callback();\n};\n\n/**\n * Add phonegap.js.\n *\n * For backwards-compatibility, we will continue to support phonegap.js\n * includes in the HTML file. Soon this will be deprecated.\n *\n * Options:\n *\n *   - `options` {Object} is identical to the Cordova command input.\n *   - [`callback`] {Function} is triggered after executing the command.\n *     - `e` {Error} is null unless there is an error.\n */\n\nCordovaCommand.prototype.addPhoneGapJS = function(options, callback) {\n    var self = this;\n\n    var match = options.cmd.match(/(prepare|compile|build|run|emulate)[ ]*([\\w ]*)/);\n    if (match) {\n        // get a list of the platforms that need to be added to the project\n        var projectRootPath = cordova.util.isCordova(),\n            requestedPlatforms = match[2].trim().split(' ');\n\n        // project root will be false if it is not a cordova directory\n        if (!projectRootPath) {\n            return callback(new Error('not a PhoneGap directory'));\n        }\n\n        // if no platforms were provided, then use all of the platforms\n        // the regex will often match an empty string if there is trailing\n        // whitespace, which is why there is the second comparison\n        if (requestedPlatforms.length <= 0 || requestedPlatforms[0] === '') {\n            requestedPlatforms = cordova.util.listPlatforms(projectRootPath);\n        }\n\n        // for each platform, inject phonegap.js\n        requestedPlatforms.forEach(function(platform) {\n            var platformPath = path.join(projectRootPath, 'platforms', platform, 'platform_www'),\n                cordovaJSPath = path.join(platformPath, 'cordova.js'),\n                phonegapJSPath = path.join(platformPath, 'phonegap.js');\n\n            if (fs.existsSync(cordovaJSPath)) {\n                self.phonegap.emit('log', 'adding phonegap.js to the ' + platform + ' platform');\n                shell.cp('-f', cordovaJSPath, phonegapJSPath);\n            }\n        });\n    }\n\n    callback();\n};\n\n/**\n * Add phonegap.js DEPRECATION warning.\n *\n * Display DEPRECATION warning when the app references phonegap.js\n *\n * Options:\n *\n *   - `options` {Object} is identical to the Cordova command input.\n *   - [`callback`] {Function} is triggered after executing the command.\n *     - `e` {Error} is null unless there is an error.\n */\n\nCordovaCommand.prototype.addPhoneGapJSWarning = function(options, callback) {\n    var self = this;\n\n    var match = options.cmd.match(/(prepare|compile|build|run|emulate)/);\n    if (match) {\n        // search HTML files for phonegap.js references\n        var projectRootPath = cordova.util.isCordova();\n\n        // project root will be false if it is not a cordova directory\n        if (!projectRootPath) {\n            return callback(new Error('not a PhoneGap directory'));\n        }\n\n        var htmlGlob = path.join(projectRootPath, 'www', '*.html'),\n            matchedFiles = shell.grep('phonegap.js', htmlGlob).trim();\n\n        if (matchedFiles.length > 0) {\n            self.phonegap.emit('warn', 'phonegap.js support will soon be removed.');\n            self.phonegap.emit('warn', 'please replace \\'phonegap.js\\' references with \\'cordova.js\\'');\n\n            self.addPhoneGapJS(options, callback);\n        }\n        else {\n            callback();\n        }\n    }\n    else {\n        callback();\n    }\n};\n\n/*!\n * Return elements that are different between both arrays.\n *\n * If used elsewhere, we should consider extending the Array with:\n *     Array.prototype.diff = function(array2) { ... );\n */\n\nfunction diff(array1, array2) {\n    return array1.filter(function(i) {\n        return array2.indexOf(i) < 0;\n    });\n}\n\n/*!\n * Custom Command Check\n *\n * Some Cordova commands, we intercept and provide additional functionality.\n * This method abstracts the checking of those commands.\n *\n * Options:\n *\n *   - `options` {Object} same and provided to the CordovaCommand instance.\n *\n * Returns:\n *\n *   {Boolean}\n */\n\nfunction isCustomCommand(options) {\n    // default options.verbose\n    return (options.internalCommand ||\n            options.cmd.match(/(prepare|compile|build|run|emulate)/));\n}\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/lib/phonegap/util/command.js":"/**\n * Base Command.\n *\n * > All your base are belong to us.\n *\n * All commands should inherit from the base `Command` object.\n *\n * This object handles the dependency injection of the `phonegap` object.\n *\n * This has two major benefits:\n *   1. Allows `PhoneGap` to create instances. This is helpful for testing.\n *   2. Allows test framework to mock public interfaces during tests.\n *\n * Options:\n *\n *   - `phonegap` {Object} is the instance of `PhoneGap` for this command.\n *\n * Returns:\n *\n *   {Function} that will call the inheriting class' `run` function.\n */\n\nfunction Command(phonegap) {\n    this.phonegap = phonegap;\n\n    var self = this;\n    return function() {\n        return self.run.apply(self, arguments);\n    };\n}\n\nCommand.prototype.run = function(options, callback) {\n    // subclasses should override this function\n};\n\n/*!\n * Expose module.\n */\n\nmodule.exports = Command;\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/lib/cordova/index.js":"/*!\n * Module dependencies.\n */\n\nvar fs = require('fs'),\n    path = require('path');\n\n/**\n * Cordova CLI API.\n */\n\nmodule.exports.cordova = require('cordova');\n\n/**\n * Cordova Lib.\n */\n\nmodule.exports.lib = require('cordova').cordova_lib;\n\n// set the binary name of the Cordova CLI to phonegap\nmodule.exports.lib.binname = require(path.join(__dirname, '..', '..', 'package.json')).name;\n\n/**\n * Cordova Utility Module.\n *\n * We should consider exposing this interface in the cordova module.\n *\n * Until then, we will manually define the methods that we need to use.\n */\n\nmodule.exports.util = {\n    isCordova: require('cordova').cordova_lib.cordova.findProjectRoot,\n\n    // borrowed from the apache/cordova-lib utility implementation, since it is\n    // not pubicly accessible:\n    // https://github.com/apache/cordova-lib/blob/master/cordova-lib/src/cordova/util.js\n    listPlatforms: function(project_dir) {\n        var platforms_dir = path.join(project_dir, 'platforms');\n        if ( !fs.existsSync(platforms_dir)) {\n            return [];\n        }\n        var subdirs = fs.readdirSync(platforms_dir);\n        return subdirs;\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/lib/phonegap/create.js":"/*!\n * Module dependencies.\n */\n\nvar Command = require('./util/command'),\n    cordovaLib = require('../cordova').lib,\n    path = require('path'),\n    util = require('util'),\n    fs = require('fs');\n\n/*!\n * Command setup.\n */\n\nmodule.exports = {\n    create: function(phonegap) {\n        return new CreateCommand(phonegap);\n    }\n};\n\nfunction CreateCommand(phonegap) {\n    return Command.apply(this, arguments);\n}\n\nutil.inherits(CreateCommand, Command);\n\n/**\n * Create a New App.\n *\n * Creates an project on the local filesystem.\n * This project is backwards compatible with Apache Cordova projects.\n *\n * Options:\n *\n *   - `options` {Object} is data required to create an app\n *     - `path` {String} is a directory path for the app.\n *     - `name` {String} is the application name (default: 'helloworld')\n *     - `id` {String} is the package name (default: 'com.phonegap.hello-world')\n *     - `config` {Object} is a JSON configuration object (default: {})\n *     - `link-to` {String} is a path to a project to link (default: undefined)\n *     - `copy-from` {String} is a path to a project to copy (default: undefined)\n *   - [`callback`] {Function} is triggered after creating the app.\n *     - `e` {Error} is null unless there is an error.\n *\n * Returns:\n *\n *   {PhoneGap} for chaining.\n */\n\nCreateCommand.prototype.run = function(options, callback) {\n    // require options\n    if (!options) throw new Error('requires option parameter');\n    if (!options.path) throw new Error('requires option.path parameter');\n\n    // optional callback\n    callback = callback || function() {};\n\n    // validate options\n    options.path = path.resolve(options.path.toString());\n    options.name = options.name || 'helloworld';\n    options.id = options.id || 'com.phonegap.helloworld';\n\n    // create app\n    this.execute(options, callback);\n\n    return this.phonegap;\n};\n\n/*!\n * Execute.\n */\n\nCreateCommand.prototype.execute = function(options, callback) {\n    var self = this;\n\n    // validate options.template\n    options.template = (typeof options.template === 'string') ? options.template : null;\n\n    // skip when the user links to an external template,\n    // otherwise use the default Hello World template or a specified one.\n    if (!declaresExternalTemplate(options)) {\n        // create app using a user-defined or default template\n        options.template = getTemplateInfo(options.template || 'hello-world');\n    }\n\n    // validate options.config\n    // ignore objects with no properties `{}` because this cleans up\n    // the cordova-cli calls and prevents unexpected errors since thec\n    // cordova-cli expects the config to always be the fourth argument.\n    if (options.config && Object.keys(options.config).length > 0) {\n        // the config argument is a JSON string, which means it must be properly\n        // escaped for the command-line\n        options.config = JSON.stringify(options.config).replace(/\"/g, '\\\\\"');\n    }\n    else {\n        options.config = undefined;\n    }\n\n    // construct the cordova create command\n    var cordovaCommand = 'cordova create';\n    [ options.path, options.id, options.name, options.config ].forEach(function(value) {\n        if (typeof value !== 'undefined') {\n            cordovaCommand += ' \"$value\"'.replace('$value', value);\n        }\n    });\n\n    // use --copy-from (or -src) if it existed in the original command\n    if (options['copy-from']) {\n        cordovaCommand += ' --copy-from=\"%s\"'.replace('%s', options['copy-from']);\n    }\n\n    // use --link-to if it existed in the original command\n    if (options['link-to']) {\n        cordovaCommand += ' --link-to=\"%s\"'.replace('%s', options['link-to']);\n    }\n\n    // use --template if it exists\n    if (options.template) {\n        cordovaCommand += ' --template=\"%s\"'.replace('%s', options.template);\n    }\n\n    // use cordova to create the project from the command-line\n    self.phonegap.cordova({ cmd: cordovaCommand }, function(e) {\n        if (e) {\n            // do not emit this error because it'll be handled by\n            // the `phonegap.cordova` function.\n            callback(e);\n            return;\n        }\n\n        // do not alter linked projects\n        if (!options['link-to']) {\n            var configXML = {\n                projectPath: path.join(options.path, 'config.xml'),\n                wwwPath: path.join(options.path, 'www', 'config.xml')\n            };\n\n            // move config.xml to root of project for legacy app templates\n            if (fs.existsSync(configXML.wwwPath)) {\n                fs.renameSync(configXML.wwwPath, configXML.projectPath);\n            }\n\n            // update config.xml with app info\n            if (fs.existsSync(configXML.projectPath)) {\n                var configParser = new cordovaLib.configparser(configXML.projectPath);\n                configParser.setPackageName(options.id);\n                configParser.setName(options.name);\n                configParser.write();\n            }\n            else {\n                self.phonegap.emit('warn', 'could not update ' + configXML.projectpath);\n            }\n        }\n\n        callback(e);\n    });\n};\n\n/*!\n * Check if external project template declared in options.\n *\n * An external template is a template that is not included in package.json.\n */\n\nfunction declaresExternalTemplate(options) {\n    // return true if a template is delcared in the options\n    return (\n        options['copy-from'] ||\n        options['link-to'] ||\n        (\n            options.config &&\n            options.config.lib &&\n            options.config.lib.www\n        )\n    );\n}\n\n/*!\n * Get Template Info.\n *\n * Attempts to get the template information and generates the UUID used by\n * Cordova's fetching system.\n *\n * If an error occurs, an error object is returned instead.\n *\n * Returns:\n *\n *   {Object | Error}\n */\n\nfunction getTemplateInfo(name) {\n    var templates = require('../../package.json').templates,\n        template;\n\n    try {\n        template = templates[name].npm;\n    }\n    catch(e) {\n        // return null for non-string values otherwise the name\n        template = (typeof name === 'string') ? name : undefined;\n    }\n\n    return template;\n}\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/lib/phonegap/mode.js":"/*!\n * Module dependencies.\n */\n\nvar phonegapbuild = require('./util/phonegap-build'),\n    Command = require('./util/command'),\n    cordova = require('../cordova').cordova,\n    util = require('util');\n\n/*!\n * Command setup.\n */\n\nmodule.exports = {\n    create: function(phonegap) {\n        return new ModeCommand(phonegap);\n    }\n};\n\nfunction ModeCommand(phonegap) {\n    return Command.apply(this, arguments);\n}\n\nutil.inherits(ModeCommand, Command);\n\n/**\n * Mode configuration.\n *\n * Customize the running mode.\n *\n * Options:\n *\n *   - `options` {Object}\n *     - `verbose` {Boolean} is true to enable additional output from dependencies..\n *   - [`callback`] {Function} is triggered after completion.\n *     - `e` {Error} is null unless there is an error.\n *\n * Returns:\n *\n *   {PhoneGap} for chaining.\n */\n\nModeCommand.prototype.run = function(options, callback) {\n    // require options\n    if (!options) throw new Error('requires option parameter');\n\n    // optional callback\n    callback = callback || function() {};\n\n    // update mode\n    this.execute(options, callback);\n\n    return this.phonegap;\n};\n\n/*!\n * Execute.\n */\n\nModeCommand.prototype.execute = function(options, callback) {\n    var self = this.phonegap;\n\n    // reset the listeners on the a new PhoneGap instance\n    bind.reset();\n\n    // verbose output\n    if (options.verbose) {\n        bind.normal(self);\n        bind.verbose(self);\n    }\n    // quiet output\n    else if (options.quiet) {\n        // shh...\n    }\n    // normal output\n    else {\n        bind.normal(self);\n    }\n};\n\n/*!\n * Bind listening modes.\n */\n\nvar bind = {\n    /*!\n     * Reset the listening modes.\n     */\n    reset: function() {\n        phonegapbuild.removeAllListeners('log');\n        phonegapbuild.removeAllListeners('warn');\n        phonegapbuild.removeAllListeners('error');\n        phonegapbuild.removeAllListeners('raw');\n        cordova.removeAllListeners('log');\n        cordova.removeAllListeners('warn');\n        cordova.removeAllListeners('before_library_download');\n        cordova.removeAllListeners('library_download');\n        cordova.removeAllListeners('after_library_download');\n    },\n\n    /*!\n     * Normal output level events.\n     */\n    normal: function(self) {\n        phonegapbuild.on('log', function() {\n            var args = Array.prototype.slice.call(arguments);\n            args.unshift('log');\n            self.emit.apply(self, args);\n        });\n\n        phonegapbuild.on('warn', function() {\n            var args = Array.prototype.slice.call(arguments);\n            args.unshift('warn');\n            self.emit.apply(self, args);\n        });\n\n        phonegapbuild.on('error', function(e) {\n            var args = Array.prototype.slice.call(arguments);\n            args.unshift('error');\n            self.emit.apply(self, args);\n        });\n\n        phonegapbuild.on('raw', function() {\n            var args = Array.prototype.slice.call(arguments);\n            args.unshift('raw');\n            self.emit.apply(self, args);\n        });\n\n        cordova.on('before_library_download', function(data) {\n            self.emit('log', util.format('missing library %s/%s/%s',\n                data.id, data.platform, data.version\n            ));\n            self.emit('log', util.format('downloading %s...', data.url));\n        });\n\n        cordova.on('library_download', function() {\n            // do nothing\n        });\n\n        cordova.on('after_library_download', function() {\n            // do nothing\n        });\n    },\n\n    /*!\n     * Verbose output level events.\n     */\n    verbose: function(self) {\n        cordova.on('log', function() {\n            var args = Array.prototype.slice.call(arguments);\n            args.unshift('log');\n            self.emit.apply(self, args);\n        });\n\n        cordova.on('warn', function() {\n            var args = Array.prototype.slice.call(arguments);\n            args.unshift('log');\n            self.emit.apply(self, args);\n        });\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/lib/phonegap/util/phonegap-build.js":"/*!\n * Module dependencies.\n */\n\nvar phonegapbuild = require('phonegap-build');\n\n/*!\n * Expose singleton PhoneGapBuild object.\n */\n\nmodule.exports = phonegapbuild;\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/lib/phonegap/template.list.js":"/*!\n * Module dependencies.\n */\n\nvar Command = require('./util/command'),\n    templates = require('../../package.json').templates,\n    util = require('util');\n\n/*!\n * Command setup.\n */\n\nmodule.exports = {\n    create: function(phonegap) {\n        return new TemplateListCommand(phonegap);\n    }\n};\n\nfunction TemplateListCommand(phonegap) {\n    return Command.apply(this, arguments);\n}\n\nutil.inherits(TemplateListCommand, Command);\n\n/**\n * List Available Templates.\n *\n * Lists the templates available to the user.\n *\n * Options:\n *\n *   - `options` {Object} is currently unused (but required for consistency).\n *   - [`callback`] {Function} is triggered after completion\n *     - `e` {Error} is null unless there is an error.\n *     - `data` {Object}\n *       - `templates` {Array} is a list of the template names\n *\n * Returns:\n *\n *   {PhoneGap} for chaining.\n */\n\nTemplateListCommand.prototype.run = function(options, callback) {\n    var self = this;\n\n    // require options\n    if (!options) throw new Error('requires options parameter');\n\n    // optional callback\n    callback = callback || function() {};\n\n    // collect the templates\n    var data = { templates: [] };\n    for (var key in templates) {\n        var template = templates[key];\n        template.name = key;\n        data.templates.push(template);\n    }\n\n    // trigger async callback\n    process.nextTick(function() {\n        callback(null, data);\n    });\n\n    return self.phonegap;\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/lib/phonegap/template.search.js":"/*!\n * Module dependencies.\n */\n\nvar Command = require('./util/command'),\n    util = require('util'),\n    opener = require('./util/opener');\n\n/*!\n * Command setup.\n */\n\nmodule.exports = {\n    create: function(phonegap) {\n        return new TemplateSearchCommand(phonegap);\n    }\n};\n\nfunction TemplateSearchCommand(phonegap) {\n    return Command.apply(this, arguments);\n}\n\nutil.inherits(TemplateSearchCommand, Command);\n\n/**\n * Search the available templates.\n *\n * At the moment, there is no way to filter templates by name. Instead,\n * we must show all templates that use the keyword `cordova:template`.\n * The Apache Cordova project will be adding template search functionality\n * to their plugin website soon.\n *\n * Options:\n *\n *   - `options` {Object} is currently unused (but required for consistency).\n *   - [`callback`] {Function} is triggered after completion\n *     - `e` {Error} is null unless there is an error.\n *     - `data` {Object}\n *\n * Returns:\n *\n *   {PhoneGap} for chaining.\n */\n\nTemplateSearchCommand.prototype.run = function(options, callback) {\n    var self = this,\n        data = {};\n\n    // require options\n    if (!options) throw new Error('requires options parameter');\n\n    // optional callback\n    callback = callback || function() {};\n\n    // npmjs.com URL to filter by keyword\n    var url = 'https://www.npmjs.com/browse/keyword/cordova:template';\n\n    // open the URL to filter by keywords. This isn't ideal, but it's\n    // the best that we can do until Apache Cordova improves plugins.cordova.io\n    opener.open(url);\n\n    // trigger async callback\n    process.nextTick(function() {\n        callback(null, data);\n    });\n\n    return self.phonegap;\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/lib/phonegap/util/opener.js":"/*\n * Module dependencies.\n */\n\nvar opener = require('opener');\n\n/**\n * Export opener in a way that we can test using `spyOn`.\n */\n\nmodule.exports.open = opener;\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/lib/phonegap/remote.build.js":"/*!\n * Module dependencies\n */\n\nvar Command = require('./util/command'),\n    project = require('./util/project'),\n    platforms = require('./util/platform'),\n    phonegapbuild = require('./util/phonegap-build'),\n    util = require('util');\n\n/*!\n * Command setup.\n */\n\nmodule.exports = {\n    create: function(phonegap) {\n        return new RemoteBuildCommand(phonegap);\n    }\n};\n\nfunction RemoteBuildCommand(phonegap) {\n    return Command.apply(this, arguments);\n}\n\nutil.inherits(RemoteBuildCommand, Command);\n\n/**\n * Build an App Remotely.\n *\n * Uses PhoneGap/Build to build the application.\n *\n * Options:\n *\n *   - `options` {Object}\n *   - `options.platforms` {Array} is a list of platforms (limited to 1).\n *   - [`options.protocol`] {String} is the protocol, e.g. 'http' or 'https'.\n *   - [`options.host`] {String} is the host address, e.g. 'build.phonegap.com'.\n *   - [`options.port`] {String} is the port, e.g. '80' or '443'.\n *   - [`options.path`] {String} is the api path, e.g. '/api/v1'\n *   - [`options.proxy`] {String} is proxy for requests through, e.g. 'http://myproxy.com'\n *   - [`callback`] {Function} is triggered after completion.\n *     - `e` {Error} is null unless there is an error.\n *     - `data` {Object} data returned by PhoneGap/Build API.\n *\n * Returns:\n *\n *   {PhoneGap} for chaining.\n */\n\nRemoteBuildCommand.prototype.run = function(options, callback) {\n    // require options\n    if (!options) throw new Error('requires option parameter');\n    if (!options.platforms) throw new Error('requires option.platforms parameter');\n\n    // optional callback\n    callback = callback || function() {};\n\n    // build app\n    this.execute(options, callback);\n\n    return this.phonegap;\n};\n\n/*!\n * Execute.\n */\n\nRemoteBuildCommand.prototype.execute = function(options, callback) {\n    var self = this,\n        platform = platforms.names(options.platforms)[0];\n\n    // change to project directory and delegate errors\n    if (!project.cd({ emitter: self.phonegap, callback: callback })) return;\n\n    // add platforms argument but keep the other options\n    options.platforms = [ platform.remote ];\n\n    phonegapbuild.build(options, function(e, data) {\n        if (e) {\n            callback(e);\n            return;\n        }\n\n        self.phonegap.emit('log', platform.human, 'build complete');\n        callback(null, data);\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/lib/phonegap/util/project.js":"/*!\n * Module dependencies.\n */\n\nvar fs = require('fs'),\n    path = require('path'),\n    cdvutil = require('../../cordova').util;\n\n/*!\n * Global constants.\n */\n\nvar HOME = process.env[(process.platform == 'win32') ? 'USERPROFILE' : 'HOME'];\n\n/**\n * Change Process to Project Root.\n *\n * Options:\n *\n *   - `delegate` {Object} error delegate.\n *     - `emitter` {EventEmitter} will emit an `error` event on error.\n *     - `callback` {Function} will be called on an error.\n *       - `e` {Error} describes the error.\n *\n * Returns:\n *\n *   - `null` {Object} if the project root is not found.\n *   - `path` {String} is the full path to the project root.\n */\n\nmodule.exports.cd = function(delegate) {\n    var currentPath = process.cwd();\n\n    // is the current working directory the PhoneGap project?\n    if (cdvutil.isCordova(currentPath)) {\n        return currentPath;\n    }\n\n    // if not, step back a directory\n    process.chdir(path.join(currentPath, '..'));\n\n    // recursively try again, unless we're not at the system root (/ or C:/ or whatever)\n    if (process.cwd() !== currentPath) {\n        return module.exports.cd(delegate);\n    }\n\n    // notify delegate of error because we are at the system root\n    var e = new Error('project directory could not be found');\n    delegate.emitter.emit('error', e);\n    delegate.callback(e);\n\n    return null;\n};\n\n/**\n * Check Path to be a Cordova Project.\n *\n * Options:\n *\n *   - `projectPath` {String} is path checked.\n *\n * Returns:\n *\n *   - {Boolean} true if valid Cordova project.\n */\n\n/**\n *  Read Phonegap's package.json file and return as an object\n *\n *  Options:\n *\n *    -  none\n *\n *  Returns\n *\n *    - {object} containing package.json data\n */\nmodule.exports.readPackage = function() {\n    // load package.json\n    var packagePath = path.join(__dirname, '..', '..', '..', 'package.json');\n\n    return packageJSON = JSON.parse(fs.readFileSync(packagePath), 'utf8');\n};\n\n/**\n * list installed platforms\n *\n *\n * Returns\n *\n *  - {array} containing names of installed platforms\n */\nlistPlatforms = function () {\n    var platforms = cdvutil.listPlatforms('.');\n    return platforms;\n};\n\n\n/**\n * check to see if a platform is installed\n *\n *\n * Returns\n *\n *  - {boolean} true if platform is installed\n */\ncheckPlatform = function (plat) {\n    var detected = listPlatforms();\n\n    if (detected.indexOf(plat) > -1) {\n        return true;\n    }\n    return false;\n};\n\n\n/**\n * Check Path to be User Home Directory.\n *\n * Options:\n *\n *   - `homePath` {String} is path checked.\n *\n * Returns:\n *\n *   - {Boolean} true if path is user's home directory.\n */\n\nmodule.exports.isHome = function(homePath) {\n    return (homePath === HOME);\n};\n\n/**\n * Madule Exports\n */\nmodule.exports.listPlatforms = listPlatforms;\nmodule.exports.checkPlatform = checkPlatform;\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/lib/phonegap/util/platform.js":"/*!\n * Module dependencies.\n */\n\n/**\n * Get Platform Names for each Environment.\n *\n * Options:\n *\n *   - `platforms` {Array} of {String} platform keywords.\n *\n * Returns:\n *\n *   - {Array} of {Object} that contain keywords for each environment.\n */\n\nmodule.exports.names = function(platforms) {\n    platforms = platforms || [];\n\n    // filter out unsupported platforms\n    platforms = platforms.filter(function(platform) {\n        return module.exports.map[platform];\n    });\n\n    // map platform names\n    return platforms.map(function(platform) {\n        return module.exports.map[platform];\n    });\n};\n\n/**\n * Platform Environment Names.\n *\n * Mapping:\n *   'local'  => cordova-cli\n *   'remote' => PhoneGap/Build\n *   'human'  => Human readable name\n */\n\nmodule.exports.map = {\n    android: {\n        local: 'android',\n        remote: 'android',\n        human: 'Android'\n    },\n    blackberry: {\n        local: 'blackberry10',\n        remote: 'blackberry',\n        human: 'BlackBerry'\n    },\n    ios: {\n        local: 'ios',\n        remote: 'ios',\n        human: 'iOS'\n    },\n    wp7: {\n        local: 'wp7',\n        remote: null,\n        human: 'Windows Phone 7'\n    },\n    wp8: {\n        local: 'wp8',\n        remote: 'winphone',\n        human: 'Windows Phone 8'\n    },\n    windows: {\n        local: 'windows',\n        remote: 'windows',\n        human: 'Windows'\n    },\n    firefoxos: {\n        local: 'firefoxos',\n        remote: null,\n        human: 'Firefox OS'\n    }\n};\n\n/**\n * check to see if a given set of platform labels are supported\n *\n * @param platforms to check, can be a platform label string or an array of platform label strings\n * @return array of valid platforms\n */\nmodule.exports.supports = function (platforms) {\n    var results = [];\n    var supported = module.exports.map;\n    var check = function(value) {\n        for (var i in supported) {\n            var plat = supported[i];\n            if (plat.local === value) {\n                return true;\n            }\n        }\n        return false;\n    };\n\n    if (!platforms.length) {\n        if (check(platforms)) {\n            results.push(platforms);\n        };\n    } else {\n        results = platforms.filter(function(value) {\n            return check(value);\n        });\n    }\n    return results;\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/lib/phonegap/remote.install.js":"/*!\n * Module dependencies\n */\n\nvar Command = require('./util/command'),\n    project = require('./util/project'),\n    platforms = require('./util/platform'),\n    qrcode = require('qrcode-terminal'),\n    util = require('util');\n\n/*!\n * Command setup.\n */\n\nmodule.exports = {\n    create: function(phonegap) {\n        return new RemoteInstallCommand(phonegap);\n    }\n};\n\nfunction RemoteInstallCommand(phonegap) {\n    return Command.apply(this, arguments);\n}\n\nutil.inherits(RemoteInstallCommand, Command);\n\n/**\n * Run a Remote App.\n *\n * Run is defined as a build and install.\n *\n * Options:\n *\n *   - `options` {Object}\n *   - `options.platforms` {Array} is a list of platforms (limited to 1).\n *   - [`options.protocol`] {String} is the protocol, e.g. 'http' or 'https'.\n *   - [`options.host`] {String} is the host address, e.g. 'build.phonegap.com'.\n *   - [`options.port`] {String} is the port, e.g. '80' or '443'.\n *   - [`options.path`] {String} is the api path, e.g. '/api/v1'\n *   - [`options.proxy`] {String} is proxy for requests through, e.g. 'http://myproxy.com'\n *   - [`callback`] {Function} is triggered after completion.\n *     - `e` {Error} is null unless there is an error.\n *\n * Returns:\n *\n *   {PhoneGap} for chaining.\n */\n\nRemoteInstallCommand.prototype.run = function(options, callback) {\n    // require options\n    if (!options) throw new Error('requires option parameter');\n    if (!options.platforms) throw new Error('requires option.platforms parameter');\n\n    // optional callback\n    callback = callback || function() {};\n\n    // build app\n    this.execute(options, callback);\n\n    return this.phonegap;\n};\n\n/*!\n * Execute.\n */\n\nRemoteInstallCommand.prototype.execute = function(options, callback) {\n    var self = this,\n        platform = platforms.names(options.platforms)[0];\n\n    // change to project directory and delegate errors\n    if (!project.cd({ emitter: self.phonegap, callback: callback })) return;\n\n    // require options.data (for now)\n    if (!options.data) {\n        var e = new Error('missing app data');\n        self.phonegap.emit('error', e);\n        callback(e);\n        return;\n    }\n\n    // url components\n    var protocol = options.protocol || 'https:',\n        host = options.host || 'build.phonegap.com',\n        port = options.port || '443';\n\n    // qrcode is url to download app\n    var url = protocol + '//' + host + ':' + port +\n              options.data.download[platform.remote] +\n              '?auth_token=' + options.data.token;\n\n    // output url\n    self.phonegap.emit('log','url: ' + url);\n    // generate qrcode\n    self.phonegap.emit('log', 'generating the QRCode...');\n\n    qrcode.generate(url, function(qrcode) {\n        self.phonegap.emit('raw', qrcode);\n        self.phonegap.emit('log', 'install the app by scanning the QRCode');\n\n        // add URL to returned data\n        options.data.url = url;\n\n        callback(null, options.data);\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/lib/phonegap/remote.login.js":"/*!\n * Module dependencies.\n */\n\nvar Command = require('./util/command'),\n    phonegapbuild = require('./util/phonegap-build'),\n    util = require('util');\n\n/*!\n * Command setup.\n */\n\nmodule.exports = {\n    create: function(phonegap) {\n        return new RemoteLoginCommand(phonegap);\n    }\n};\n\nfunction RemoteLoginCommand(phonegap) {\n    var self = this;\n\n    // bind PhoneGapBuild \"login\" event to this instance\n    phonegapbuild.on('login', function(options, callback) {\n        self.phonegap.emit('login', options, callback);\n    });\n\n    return Command.apply(this, arguments);\n}\n\nutil.inherits(RemoteLoginCommand, Command);\n\n/**\n * Login.\n *\n * Authenticates with PhoneGap Build, saves the token, and return an API object.\n * When the save token exists, the authentication step is skipped.\n *\n * Options:\n *\n *   - `options` {Object} contains the login credentials.\n *   - [`options.username`] {String} is the username.\n *   - [`options.password`] {String} is the password.\n *   - [`options.protocol`] {String} is the protocol, e.g. 'http' or 'https'.\n *   - [`options.host`] {String} is the host address, e.g. 'build.phonegap.com'.\n *   - [`options.port`] {String} is the port, e.g. '80' or '443'.\n *   - [`options.path`] {String} is the api path, e.g. '/api/v1'\n *   - [`options.proxy`] {String} is proxy for requests through, e.g. 'http://myproxy.com'\n *   - `[callback]` {Function} is called after the login.\n *     - `e` {Error} is null on a successful login attempt.\n *     - `api` {Object} the API object defined by phonegap-build-rest\n *\n * Returns:\n *\n *   {PhoneGap} for chaining.\n */\n\nRemoteLoginCommand.prototype.run = function(options, callback) {\n    var self = this;\n\n    // require options\n    if (!options) throw new Error('requires options parameter');\n\n    // optional callback\n    callback = callback || function() {};\n\n    // try to login; the event will fire if credentials are needed\n    phonegapbuild.login(options, function(e, api) {\n        if (!e) {\n            self.phonegap.emit('log', 'you are logged in');\n        }\n        callback(e, api);\n    });\n\n    return self.phonegap;\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/lib/phonegap/remote.logout.js":"/*!\n * Module dependencies.\n */\n\nvar Command = require('./util/command'),\n    phonegapbuild = require('./util/phonegap-build'),\n    util = require('util');\n\n/*!\n * Command setup.\n */\n\nmodule.exports = {\n    create: function(phonegap) {\n        return new RemoteLogoutCommand(phonegap);\n    }\n};\n\nfunction RemoteLogoutCommand(phonegap) {\n    return Command.apply(this, arguments);\n}\n\nutil.inherits(RemoteLogoutCommand, Command);\n\n/**\n * Logout.\n *\n * Logout of PhoneGap/Build.\n *\n * Options:\n *\n *   - `options` {Object} is unused and should be `{}`.\n *   - [`callback`] {Function} is a callback function.\n *     - `e` {Error} is null unless there is an error.\n *\n * Returns:\n *\n *   {PhoneGap} for chaining.\n */\n\nRemoteLogoutCommand.prototype.run = function(options, callback) {\n    var self = this;\n\n    // require options\n    if (!options) throw new Error('requires options parameter');\n\n    // optional callback\n    callback = callback || function() {};\n\n    // logout\n    phonegapbuild.logout(options, function(e) {\n        callback(e);\n    });\n\n    return self.phonegap;\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/lib/phonegap/remote.run.js":"/*!\n * Module dependencies\n */\n\nvar Command = require('./util/command'),\n    project = require('./util/project'),\n    platforms = require('./util/platform'),\n    config = require('../common/config'),\n    qrcode = require('qrcode-terminal'),\n    util = require('util');\n\n/*!\n * Command setup.\n */\n\nmodule.exports = {\n    create: function(phonegap) {\n        return new RemoteRunCommand(phonegap);\n    }\n};\n\nfunction RemoteRunCommand(phonegap) {\n    return Command.apply(this, arguments);\n}\n\nutil.inherits(RemoteRunCommand, Command);\n\n/**\n * Run a Remote App.\n *\n * Run is defined as a build and install.\n *\n * Options:\n *\n *   - `options` {Object}\n *   - `options.platforms` {Array} is a list of platforms (limited to 1).\n *   - [`options.protocol`] {String} is the protocol, e.g. 'http' or 'https'.\n *   - [`options.host`] {String} is the host address, e.g. 'build.phonegap.com'.\n *   - [`options.port`] {String} is the port, e.g. '80' or '443'.\n *   - [`options.path`] {String} is the api path, e.g. '/api/v1'\n *   - [`options.proxy`] {String} is proxy for requests through, e.g. 'http://myproxy.com'\n *   - [`callback`] {Function} is triggered after completion.\n *     - `e` {Error} is null unless there is an error.\n *\n * Returns:\n *\n *   {PhoneGap} for chaining.\n */\n\nRemoteRunCommand.prototype.run = function(options, callback) {\n    // require options\n    if (!options) throw new Error('requires option parameter');\n    if (!options.platforms) throw new Error('requires option.platforms parameter');\n\n    // optional callback\n    callback = callback || function() {};\n\n    // build app\n    this.execute(options, callback);\n\n    return this.phonegap;\n};\n\n/*!\n * Execute.\n */\n\nRemoteRunCommand.prototype.execute = function(options, callback) {\n    var self = this,\n        platform = platforms.names(options.platforms)[0];\n\n    // change to project directory and delegate errors\n    if (!project.cd({ emitter: self.phonegap, callback: callback })) return;\n\n    // build the app\n    self.phonegap.remote.build(options, function(e, data) {\n        if (e) {\n            callback(e);\n            return;\n        }\n\n        config.global.load(function(e, configData) {\n            if (e) {\n                callback(e);\n                return;\n            }\n\n            // qrcode is url to download app\n            var url = 'https://build.phonegap.com' +\n                      data.download[platform.remote] +\n                      '?auth_token=' + configData.phonegap.token;\n\n            // output url\n            self.phonegap.emit('log','url: ' + url);\n\n            // generate qrcode\n            self.phonegap.emit('log', 'generating the QRCode...');\n            qrcode.generate(url, function(qrcode) {\n                self.phonegap.emit('raw', qrcode);\n                self.phonegap.emit('log', 'install the app by scanning the QRCode');\n                callback(null, data);\n            });\n        });\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/lib/common/config.js":"/**\n * Configuration Files.\n *\n * Access configuration files on the local (project) and global (system) level.\n */\n\nmodule.exports = {\n    local: require('./config/local'),\n    global: require('./config/global')\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/lib/common/config/local.js":"/*\n * Module dependencies.\n */\n\nvar fs = require('fs'),\n    path = require('path'),\n    shell = require('shelljs');\n\n/**\n * Load the project configuration file.\n *\n * Loads the project configuration file as a JSON object.\n *\n * Options:\n *\n *   - `callback` {Function} is triggered after loading the configuration file.\n *     - `e` {Error} is null unless there is an error.\n *     - `data` {Object} is a JSON representation of the configuration file.\n */\n\nmodule.exports.load = function(callback) {\n    // require callback parameter\n    if (!callback) throw new Error('missing callback parameter');\n\n    var filepath = path.join(process.cwd(), '.cordova', 'config.json');\n\n    fs.readFile(filepath, function(e, data) {\n        // when the file does not exist, return an empty data object\n        data = JSON.parse(data || '{}');\n        callback(null, data);\n    });\n};\n\n/**\n * Save the project configuration file.\n *\n * Saves the project configuration file as a stringified representation of\n * the JSON object.\n *\n * Options:\n *\n *   - `data` {Object} is the configuration data to save.\n *   - `callback` {Object} is trigger after the file is saved.\n *     - `e` {Error} is null unless there is an error.\n */\n\nmodule.exports.save = function(data, callback) {\n    // required parameters\n    if (!data) throw new Error('missing data parameter');\n    if (!callback) throw new Error('missing callback parameter');\n\n    var filepath = path.join(process.cwd(), '.cordova', 'config.json');\n\n    // create the directory path when it does not exist\n    shell.mkdir('-p', path.dirname(filepath));\n\n    fs.writeFile(filepath, JSON.stringify(data), function(e) {\n        callback(e);\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/lib/common/config/global.js":"/*\n * Module dependencies.\n */\n\nvar shell = require('shelljs'),\n    path = require('path'),\n    fs = require('fs');\n\n/**\n * Path to config directory.\n *\n * By default, the config is shared with PhoneGap's config at: ~/.phonegap/\n *\n * You can override this desired.\n */\n\nmodule.exports.path = path.join(\n    process.env[(process.platform == 'win32') ? 'USERPROFILE' : 'HOME'],\n    '.cordova'\n);\n\n/**\n * Load the config.\n *\n * Returns the content of configuration file.\n * The configuration file is found at `PATH/config.json`.\n * The value of `PATH` is defined by `config.path`.\n *\n * Options:\n *\n *   - `callback` {Function} is triggered with the config data.\n *     - `e` {Error} is null when there is no error.\n *     - `data` {Object} is the JSON content of configuration file.\n */\n\nmodule.exports.load = function(callback) {\n    // require callback\n    if (!callback) {\n        throw new Error('missing callback argument');\n    }\n\n    var filepath = path.join(module.exports.path, 'config.json');\n\n    // check if config exists\n    fs.exists(filepath, function(exists) {\n        if (exists) {\n            // read config file\n            fs.readFile(filepath, function(e, data) {\n                if (e) {\n                    callback(e);\n                    return;\n                }\n\n                // return config file object\n                data = JSON.parse(data);\n                data.phonegap = data.phonegap || {};\n                callback(null, data);\n            });\n        }\n        else {\n            // create config file\n            var data = { phonegap: {} };\n            module.exports.save(data, function(e) {\n                if (e) {\n                    callback(e);\n                    return;\n                }\n\n                // return config file object\n                callback(null, data);\n            });\n        }\n    });\n};\n\n/**\n * Save the config.\n *\n * Write the data object as a string to the configuration document.\n *\n * Options:\n *\n *   - `data` {Object} is the data to append to the config file.\n *   - `callback` {Function} is trigger after the save operation.\n *     - `e` {Error} is null when there is no error.\n */\n\nmodule.exports.save = function(data, callback) {\n    // require data\n    if (!data) {\n        throw new Error('missing data argument');\n    }\n\n    // require callback\n    if (!callback) {\n        throw new Error('missing callback argument');\n    }\n\n    var filepath = path.join(module.exports.path, 'config.json');\n\n    // create the path\n    shell.mkdir('-p', path.dirname(filepath));\n\n    // write to config file\n    fs.writeFile(filepath, JSON.stringify(data), function(e) {\n        callback(e);\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/lib/phonegap/serve.js":"/*!\n * Module dependencies.\n */\n\nvar Command         = require('./util/command'),\n    cordova         = require('../cordova').cordova,\n    project         = require('./util/project'),\n    server          = require('connect-phonegap'),\n    proxy           = require('./util/connect-proxy'),\n    util            = require('util');\n\n/**\n * Server Default Settings\n */\nvar ServeDefaults = {\n    port: 3000,\n    autoreload: true,\n    browser: true,\n    console: true,\n    deploy: true,\n    homepage: true,\n    localtunnel: false,\n    proxy: true,\n    push: true,\n    refresh: true,\n    connect: false\n};\n\n/*!\n * Command setup.\n */\n\nmodule.exports = {\n    create: function(phonegap) {\n        return new AppCommand(phonegap);\n    },\n    default_settings: ServeDefaults\n};\n\nfunction AppCommand(phonegap) {\n    return Command.apply(this, arguments);\n}\n\nutil.inherits(AppCommand, Command);\n\n/**\n * Serve the App.\n *\n * Creates a local server to serve up the project. The intended\n * receiver is the PhoneGap App but any browser can consume the\n * content.\n *\n * Options:\n *\n *   - `options` {Object}\n *     - `[port]` {Number} is the server port (default: 3000).\n *     - `[autoreload]` {Boolean} refreshes app on file system changes (default: true)\n *   - `[callback]` {Function} is triggered when server starts.\n *     - `e` {Error} is null unless there is an error.\n *\n * Returns:\n *\n *   {PhoneGap} for chaining.\n */\n\nAppCommand.prototype.run = function(options, callback) {\n    // require options\n    if (!options) throw new Error('requires option parameter');\n\n    // optional parameters\n    options.port = options.port || ServeDefaults.port;\n    options.autoreload = (typeof options.autoreload === 'boolean') ? options.autoreload : ServeDefaults.autoreload;\n    options.browser = (typeof options.browser === 'boolean') ? options.browser : ServeDefaults.browser;\n    options.console = (typeof options.console === 'boolean') ? options.console : ServeDefaults.console;\n    options.deploy = (typeof options.deploy === 'boolean') ? options.deploy : ServeDefaults.deploy;\n    options.homepage = (typeof options.homepage === 'boolean') ? options.homepage : ServeDefaults.homepage;\n    options.localtunnel = (typeof options.localtunnel === 'boolean') ? options.localtunnel : ServeDefaults.localtunnel;\n    options.proxy = (typeof options.proxy === 'boolean') ? options.proxy : ServeDefaults.proxy;\n    options.push = (typeof options.push === 'boolean') ? options.push : ServeDefaults.push;\n    options.refresh = (typeof options.refresh === 'boolean') ? options.refresh : ServeDefaults.refresh;\n    options.connect = (typeof options.connect === 'boolean') ? options.connect : ServeDefaults.connect;\n    options.phonegap = this.phonegap;\n    callback = callback || function() {};\n\n    // start app\n    this.execute(options, callback);\n\n    return this.phonegap;\n};\n\n/*!\n * Execute command.\n */\n\nAppCommand.prototype.execute = function(options, callback) {\n    var self = this;\n\n    // change to project directory and delegate errors\n    if (!project.cd({ emitter: self.phonegap, callback: callback })) return;\n\n    var _errorHandler = function(err) {\n        self.phonegap.emit('error', err);\n        callback(err);\n    };\n\n    /**\n     * Start Server\n     */\n    var startServer = function (self, options) {\n        self.phonegap.emit('log', 'starting app server...');\n\n        server.listen(options)\n              .on('browserAdded', function() {\n                  self.phonegap.emit('browserAdded');\n              })\n              .on('deviceConnected', function() {\n                  self.phonegap.emit('deviceConnected');\n              })\n              .on('error', _errorHandler)\n              .on('log', function(statusCode, url) {\n                  self.phonegap.emit('log', statusCode, url);\n              })\n              .on('update', function(c) {\n                  if(options.connect === true) proxy.uploadUpdatedZip(options);\n              })\n              .on('complete', function(data) {\n                  callback(null, data);\n                  if(options.connect === true) proxy.uploadAppZip(options);\n              });\n    };\n\n    // prepare to execute appropriate cordova hooks\n    // try because cordova is shitting the bed on promise fulfillment\n    try {\n        cordova.prepare([], function(err, data) {\n            startServer(self, options);\n        });\n    } catch (e) {\n        startServer(self, options);\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/lib/phonegap/util/connect-proxy.js":"var http = require('http'),\n    path = require('path'),\n    fs = require('fs'),\n    local_opt = {\n        hostname: '127.0.0.1',\n        method: \"GET\"\n    },\n    remote_opt = {\n        hostname: 'connect.phonegap.com',\n        port: 80\n            // hostname: '127.0.0.1',\n            // port: 1234\n    };\n\nfunction _settings(data) {\n    var projectRootPath = require('../../cordova').util.isCordova();\n    var settings = projectRootPath ? path.join(projectRootPath, \".connectrc\") : null;\n    return new Promise(\n        function(resolve, reject) {\n            if (settings && fs.existsSync(settings) && data === undefined) {\n                fs.readFile(settings, (err, data) => {\n                    if (err) throw err;\n                    resolve(JSON.parse(data));\n                });\n            } else if (data !== undefined) {\n                fs.writeFile(settings, JSON.stringify(data, null, 4), (err) => {\n                    if (err) throw err;\n                    resolve(data);\n                });\n            } else {\n                resolve(null);\n            }\n        }\n    );\n}\nmodule.exports = {\n\n    uploadStatic: function(archive, options) {\n        _settings().then(settings => {\n            remote_opt.method = \"POST\";\n            remote_opt.path = \"/\";\n\n            function upload() {\n                if (!settings) throw new Error(\"Not settings found. An error occurred\");\n                var upload_req = http.request(remote_opt);\n                settings.chrome = true;\n                upload_req.setHeader('Connect-API-Arg', JSON.stringify(settings));\n                upload_req.on('response', (response) => {\n                    var data = '';\n                    response.on('data', chunk => {\n                        data += chunk;\n                    });\n                    response.on('end', () => {\n                        var result = JSON.parse(data);\n                        if (response.statusCode === 200 && result && result.uploaded === true) {\n                            console.log(`Your app will be available at http://share.phonegap.com/${settings.id} in a few minutes`);\n                        } else {\n                            console.log(result.message);\n                        }\n                    });\n                });\n                archive.pipe(upload_req);\n                archive.finalize();\n            }\n\n\n            if (settings) {\n                upload();\n            } else {\n                var remote_req = http.request(remote_opt);\n                remote_req.on('response', response => {\n                    var data = '';\n                    response.on('data', chunk => {\n                        data += chunk;\n                    });\n                    response.on('end', chunk => {\n                        if (response.statusCode === 200) {\n                            settings = JSON.parse(data);\n                            _settings(settings);\n                            upload();\n                        } else {\n                            console.error('an error occurred', data);\n                        }\n                    });\n                });\n                remote_req.end();\n            }\n        });\n    },\n\n    uploadAppZip: function(options) {\n        _settings().then(settings => {\n            local_opt.path = \"/__api__/appzip\";\n            local_opt.port = options.port || 3000;\n\n            remote_opt.method = \"POST\";\n            remote_opt.path = \"/\";\n\n            var local_req = http.request(local_opt),\n                remote_req = http.request(remote_opt);\n\n            if (settings) {\n                remote_req.setHeader('Connect-API-Arg', JSON.stringify(settings));\n            }\n\n\n            remote_req.on('response', response => {\n                var data = '';\n                response.on('data', chunk => {\n                    data += chunk;\n                });\n                response.on('end', chunk => {\n                    if (response.statusCode === 200) {\n                        settings = JSON.parse(data);\n                        _settings(settings);\n                        if (settings.uploaded === true) {\n                            console.log(`Updating your app with ID ${settings.id}`);\n                        }\n                        local_req.setHeader('Host', `${remote_opt.hostname}:${remote_opt.port}/${settings.id}`);\n                        local_req.end();\n                    } else {\n                        console.error('an error occurred', data);\n                    }\n                });\n            });\n            local_req.on('response', (response) => {\n                remote_req = http.request(remote_opt);\n                if (!settings) {\n                    throw new Error(\"No settings set. An error occurred\");\n                }\n                remote_req.setHeader('Connect-API-Arg', JSON.stringify(settings));\n                remote_req.on('response', (response) => {\n                    var data = '';\n                    response.on('data', chunk => {\n                        data += chunk;\n                    });\n                    response.on('end', () => {\n                        var result = JSON.parse(data);\n                        if (response.statusCode === 200 && result && result.uploaded === true) {\n                            console.log(`Your app is available at http://${remote_opt.hostname}:${remote_opt.port}/${settings.id}`);\n                        }\n                    });\n                });\n                response.pipe(remote_req);\n            });\n            remote_req.end();\n        });\n    },\n\n    uploadUpdatedZip: function(options) {\n        _settings().then(settings => {\n            if (!settings || !settings.id) throw new Error('Settings file could not be found!');\n            local_opt.path = \"/__api__/update\";\n            local_opt.port = options.port || 3000;\n            remote_opt.method = \"PUT\";\n            remote_opt.path = `/${settings.id}`;\n\n            var local_req = http.request(local_opt);\n\n            local_req.setHeader('Host', `${remote_opt.hostname}:${remote_opt.port}/${settings.id}`);\n\n            local_req.on('response', function(response) {\n                var remote_req = http.request(remote_opt);\n                remote_req.on('response', response => {\n                    var data = '';\n                    response.on('data', chunk => {\n                        data += chunk;\n                    });\n                    response.on('end', chunk => {\n                        settings = JSON.parse(data);\n                        if (settings && settings.id) {\n                            _settings(settings);\n                            console.log(`Your app has been updated at http://${remote_opt.hostname}:${remote_opt.port}/${settings.id}`);\n                        } else {\n                            console.error(data);\n                        }\n                    });\n                });\n                if (response.statusCode === 200) {\n                    remote_req.setHeader('Connect-API-Arg', JSON.stringify(settings));\n                    response.pipe(remote_req);\n                }\n            });\n            local_req.end();\n        });\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/lib/phonegap/version.js":"/*!\n * Module dependencies.\n */\n\nvar Command = require('./util/command'),\n    util = require('util'),\n    project = require('./util/project');\n\n/*!\n * Command setup.\n */\n\nmodule.exports = {\n    create: function(phonegap) {\n        return new VersionCommand(phonegap);\n    }\n};\n\nfunction VersionCommand(phonegap) {\n    return Command.apply(this, arguments);\n}\n\nutil.inherits(VersionCommand, Command);\n\n/**\n * Version reporter.\n *\n * Report the version of npm package, npm module, or PhoneGap.\n *\n * Example:\n *\n *   => 2.8.0-0.10.6\n *\n *   {\n *       npm:      '2.8.0-0.10.6',\n *       module:   '0.10.6',\n *       phonegap: '2.8.0'\n *   }\n *\n * Returns:\n *\n *   {Object} that contains the versions.\n */\n\nVersionCommand.prototype.run = function(options, callback) {\n    // parse package.json\n    var packageJSON = project.readPackage();\n\n    // get version\n    var version = packageJSON.version;\n\n    // parse version types\n    return {\n        npm: version,\n        phonegap: version.split('-')[0],\n        module: version.split('-')[1]\n    };\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/lib/phonegap/push.js":"/*!\n * Module dependencies.\n */\n\nvar Command = require('./util/command'),\n    util = require('util'),\n    fs = require('fs'),\n    http = require('http');\n\n/**\n * Server Default Settings\n */\nvar PushServerDefaults = {\n    port: 80,\n    host: 'push.api.phonegap.com'\n};\n\n/*!\n * Command setup.\n */\n\nmodule.exports = {\n    create: function(phonegap) {\n        return new PushCommand(phonegap);\n    },\n    default_settings: PushServerDefaults\n};\n\nfunction PushCommand(phonegap) {\n    return Command.apply(this, arguments);\n}\n\nutil.inherits(PushCommand, Command);\n\n/**\n * Push.\n *\n */\n\nPushCommand.prototype.run = function(options, callback) {\n    // require options\n    if (!options) throw new Error('requires option parameter');\n\n    // optional parameters\n    options.port = options.port || PushServerDefaults.port;\n    options.host = options.host || PushServerDefaults.host;\n    options.phonegap = this.phonegap;\n    callback = callback || function() {};\n\n    // send push\n    this.execute(options, callback);\n\n    return this.phonegap;\n};\n/*!\n * Execute command.\n */\n\nPushCommand.prototype.execute = function(options, callback) {\n    if (options.file) {\n        var payload = fs.readFileSync(options.file, 'utf8');\n        options.payload = payload;\n    }\n\n    if (!options.payload) throw new Error('requires payload parameter');\n\n    var data = JSON.stringify({\n      'deviceID': options.deviceID,\n      'type': options.service,\n      'appID': 'com.adobe.phonegap.app',\n      'payload': JSON.parse(options.payload)\n    });\n\n    var postOptions = {\n        host: options.host,\n        port: options.port,\n        path: '/v1/push',\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'Content-Length': Buffer.byteLength(data)\n        }\n    };\n\n    var req = http.request(postOptions, function(res) {\n        //res.setEncoding('utf8');\n        res.on('data', function (chunk) {\n            console.log(\"body: \" + chunk);\n        });\n        res.on('error', function (e) {\n            console.log(\"error: \" + e);\n        });\n    });\n\n    req.write(data);\n    req.end();\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/lib/phonegap/share.js":"var util = require('util');\nvar path = require('path');\nvar Command = require('./util/command');\nvar dropbox = require('./util/dropbox');\nvar proxy = require('./util/connect-proxy');\nvar serve = require('./serve');\nvar cordova = require('../cordova').cordova;\n\n/*\n *\n * Shares the app, valid options are\n * 1) dropbox\n * 2) connect.phonegap.com\n *\n */\n\nvar ShareDefaults = {};\n\nmodule.exports = {\n    create: function(phonegap) {\n        return new ShareCommand(phonegap);\n    },\n    default_settings: ShareDefaults\n};\n\nfunction ShareCommand(phonegap) {\n    return Command.apply(this, arguments);\n}\n\nutil.inherits(ShareCommand, Command);\n\nShareCommand.prototype.run = function(options, callback) {\n    options.phonegap = this.phonegap;\n    callback = callback || function() {};\n\n    this.execute(options, callback);\n\n    return this.phonegap;\n};\n\nShareCommand.prototype.execute = function(options, callback) {\n    if (options.dropbox === true) {\n        dropbox.upload();\n    } else if (options.connect === true) {\n        serve.create(options.phonegap)(options);\n    } else {\n        var projectRootPath = require('../cordova').util.isCordova();\n        if (projectRootPath === false) {\n            throw new Error(\"This is not a phonegap project\");\n        }\n        cordova.prepare({\n            verbose: true,\n            platforms: [\"browser\"]\n        }, function(err, data) {\n            dropbox.createZipArchive(path.join(projectRootPath, \"platforms/browser/www\")).then((archive) => {\n                proxy.uploadStatic(archive, {});\n            }, (err) => {\n                console.log(err);\n            });\n        });\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/lib/phonegap/util/dropbox.js":"var http = require('http');\nvar https = require('https');\nvar opn = require('opn');\nvar util = require('util');\nvar fs = require('fs');\nvar path = require('path');\nvar qs = require('querystring');\nvar projectRootPath = require('../../cordova').util.isCordova();\nvar settings = projectRootPath ? path.join(projectRootPath, \".dropboxrc\") : null;\n\nfunction authenticate() {\n    return new Promise(\n        function(resolve, reject) {\n            _getToken().then((token) => {\n                resolve(token);\n            }).catch(() => {\n                const auth_url = \"https://www.dropbox.com/oauth2/authorize\";\n\n                const PORT = 1234;\n\n                var state = require('./util/hex').randomValueHex(12);\n                var redirect_uri = \"http://localhost:\" + PORT;\n                const app_key = \"2f1ec7whk04rhuq\";\n\n                var params = util.format(`?response_type=token&client_id=%s\\\n&redirect_uri=%s&\\\nstate=%s`,\n                    app_key, redirect_uri, state);\n\n                var server;\n\n                function handleRequest(request, response) {\n                    if (request.url === \"/token\" && request.method === \"POST\") {\n                        var body = [];\n                        request.on('data', (chunk) => {\n                            body.push(chunk);\n                            if (body.length > 1e6) {\n                                request.connection.destroy();\n                            }\n                        });\n                        request.on('end', () => {\n                            body = Buffer.concat(body).toString();\n                            var params = qs.parse(body);\n                            if (params.state !== state) {\n                                console.error(\"Wrong state. CSRF forged\");\n                                process.exit(69);\n                            }\n                            // TODO write token and shit to local file\n                            if (settings === null) reject(new Error(\"Settings file not configured\"));\n                            fs.writeFile(settings, JSON.stringify(params, null, 4), () => {\n                                //console.log(\"Config file written successfully\");\n                                request.connection.destroy();\n                                server.close(function(err) {\n                                    resolve(params.access_token);\n                                });\n                            });\n                        });\n                        response.end();\n                    } else {\n                        response.setHeader('Content-Type', 'text/html');\n                        response.end(fs.readFileSync(path.join(__dirname, \"./util/public/index.html\")));\n                    }\n                }\n                    //console.log(auth_url + params);\n\n                server = http.createServer(handleRequest);\n\n                server.listen(PORT, () => {\n                    //console.log(\"Server listening on: http://localhost:%s\", PORT);\n                    console.log(\"waiting for API authorization...\");\n                    // Dropbox authentication\n\n                    opn(auth_url + params, {\n                        app: 'firefox',\n                        wait: false\n                    }).then((browser) => {\n                        // TODO\n                    });\n                });\n            });\n        }\n    );\n}\n\nfunction _getToken() {\n    return new Promise(\n        function(resolve, reject) {\n            if (settings && fs.existsSync(settings)) {\n                resolve(JSON.parse(fs.readFileSync(settings)).access_token);\n            }\n            reject(new Error(\"Dropbox config file does not exist. Please authenticate\"));\n        }\n    );\n}\n\nfunction getPublicLinkUrl() {\n    return new Promise(\n        function(resolve, reject) {\n            authenticate().then((token) => {\n                var options = {\n                    hostname: 'api.dropboxapi.com',\n                    port: 443,\n                    path: '/1/account/info',\n                    method: 'POST',\n                    headers: {\n                        'Authorization': 'Bearer ' + token\n                    }\n                };\n\n                var account = https.request(options, (res) => {\n                    // console.log(`STATUS: ${res.statusCode}`);\n                    // console.log(`HEADERS: ${JSON.stringify(res.headers)}`);\n                    var body = '';\n                    res.setEncoding('utf8');\n                    res.on('data', (chunk) => {\n                        body += chunk;\n                        //console.log(`BODY: ${chunk}`);\n                    });\n                    res.on('end', () => {\n                        resolve(`https://dl.dropboxusercontent.com/u/${JSON.parse(body).uid}/pgdevapp/`);\n                    });\n                });\n                account.end();\n            });\n        }\n    );\n}\n\nfunction upload(archive) {\n    return authenticate().then((token) => {\n        var api_args = {\n            \"path\": \"/Public/pgdevapp/__api__/appzip\",\n            \"mode\": \"overwrite\",\n            \"autorename\": true,\n            \"mute\": false\n        };\n\n\n        var options = {\n            hostname: 'content.dropboxapi.com',\n            port: 443,\n            path: '/2/files/upload',\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/octet-stream',\n                'Authorization': 'Bearer ' + token,\n                'Dropbox-API-Arg': JSON.stringify(api_args)\n            }\n        };\n\n        var up = https.request(options, (res) => {\n            //console.log(`STATUS: ${res.statusCode}`);\n            //console.log(`HEADERS: ${JSON.stringify(res.headers)}`);\n            res.setEncoding('utf8');\n            res.on('data', (chunk) => {\n                //console.log(`BODY: ${chunk}`);\n            });\n            res.on('end', () => {\n                getPublicLinkUrl().then((link) => {\n                    console.log(`your app will is available here ${link}`);\n                    resolve(link);\n                });\n            });\n        });\n        console.log(`uploading archive to Dropbox...`);\n        // TODO pipe directly from archiver\n        // TODO handle 150M+ cases\n        archive.pipe(up);\n        archive.finalize();\n    }).catch((e) => {\n        console.error(e.message);\n    });\n}\n\nfunction createZipArchive(dir) {\n    return new Promise(function(resolve, reject) {\n        var archiver = require('archiver');\n\n        var archive = archiver('zip');\n\n        archive.on('error', function(err) {\n            reject(err);\n            throw err;\n        });\n        archive.directory(dir, 'www');\n        resolve(archive);\n    });\n}\n\nmodule.exports = {\n    upload: function(callback) {\n        createZipArchive(path.join(projectRootPath, 'www')).then((archive) => {\n            upload(archive).then(() => {\n                callback();\n            });\n        });\n    },\n    createZipArchive: createZipArchive\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/bin/phonegap.js":"#!/usr/bin/env node\n\n/*!\n * Module dependencies.\n */\n\nvar CLI = require('../lib/cli');\nvar cli = new CLI();\nvar analytics = cli.analytics;\n\nif (analytics.statusUnknown()) {\n    // if it is an analytics command, just run it\n    if (process.argv.length > 2 && process.argv[2] === 'analytics') {\n        runPhoneGapCommand();\n    }\n    else {\n        // otherwise prompt and then run it\n        analytics.prompt(runPhoneGapCommand);\n    }\n}\nelse {\n    runPhoneGapCommand();\n}\n\n/*!\n * Run the command-line client.\n */\nfunction runPhoneGapCommand() {\n    // pass it into normal flow\n    cli.argv(process.argv, function(e) {\n        var args = Array.prototype.slice.call(process.argv);\n        // analytics module will skip if it is not enabled\n        analytics.trackEvent(args.slice(2), e); // slice off the first two, as that contains node [0] and phonegap.js [1]\n        process.exitCode = e ? e.exitCode || 1 : 0;\n    });\n}\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/lib/cli.js":"/*!\n * Module dependencies.\n */\n\nvar phonegap = require('./main'),\n    console = require('./cli/util/console'),\n    updateCheck = require('./cli/util/update-check');\n\n/**\n * Command line interface object.\n */\n\nfunction CLI() {\n    // This can be prevented by using dependency injection\n    this.cli = this;\n    this.local.cli = this;\n    this.remote.cli = this;\n}\n\n/**\n * Command line commands.\n */\n\nCLI.prototype.argv = require('./cli/argv');\nCLI.prototype.cordova = require('./cli/cordova');\nCLI.prototype.create = require('./cli/create');\nCLI.prototype.help = require('./cli/help');\nCLI.prototype.install = require('./cli/install');\nCLI.prototype.local = require('./cli/local');\nCLI.prototype.template = require('./cli/template');\nCLI.prototype.template.list = require('./cli/template.list');\nCLI.prototype.template.search = require('./cli/template.search');\nCLI.prototype.recipe = require('./cli/template');\nCLI.prototype.recipe.list = require('./cli/template.list');\nCLI.prototype.remote = require('./cli/remote');\nCLI.prototype.remote.build = require('./cli/remote.build');\nCLI.prototype.remote.install = require('./cli/remote.install');\nCLI.prototype.remote.login = require('./cli/remote.login');\nCLI.prototype.remote.logout = require('./cli/remote.logout');\nCLI.prototype.remote.run = require('./cli/remote.run');\nCLI.prototype.serve = require('./cli/serve');\nCLI.prototype.app = CLI.prototype.serve;\nCLI.prototype.unknown = require('./cli/unknown');\nCLI.prototype.version = require('./cli/version');\nCLI.prototype.push = require('./cli/push');\nCLI.prototype.analytics = require('./cli/analytics');\nCLI.prototype.share = require('./cli/share');\nCLI.prototype['report-issue'] = require('./cli/report-issue');\n\n/*!\n * Check for updated CLI (if it was not spawned from the Desktop app)\n */\nif (!process.env.ELECTRON_RUN_AS_NODE) {\n    updateCheck.start();\n}\n\n\n/*!\n * CLI messages.\n */\n\nphonegap.on('log', function() {\n    console.log.apply(this, arguments);\n});\n\nphonegap.on('warn', function() {\n    console.warn.apply(this, arguments);\n});\n\nphonegap.on('error', function(e) {\n    console.error.call(this, (e.message || e));\n});\n\nphonegap.on('raw', function() {\n    console.raw.apply(this, arguments);\n});\n\n/*!\n * Expose the CLI object.\n */\n\nmodule.exports = CLI;\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/lib/cli/util/console.js":"/*!\n * Module dependencies.\n */\n\nvar prompt = require('prompt');\n\n/**\n * Console Log.\n *\n * Passes the parameters to `console.log`.\n *\n * Outputs:\n *\n *     $ [phonegap] message\n */\n\nmodule.exports.log = function() {\n    var args = Array.prototype.slice.call(arguments);\n    args.unshift('[phonegap]'.cyan);\n    console.log.apply(this, format(args, '[phonegap]'.cyan));\n};\n\n/**\n * Console Warning.\n *\n * Passes the parameters to `console.warn`.\n *\n * Outputs:\n *\n *     $ [warning] message\n */\n\nmodule.exports.warn = function() {\n    var args = Array.prototype.slice.call(arguments);\n    args.unshift(' [warning]'.yellow);\n    console.log.apply(this, format(args, ' [warning]'.yellow));\n};\n\n/**\n * Console Error.\n *\n * Passes the parameters to `console.error`.\n *\n * Outputs:\n *\n *     $ [error] message\n */\n\nmodule.exports.error = function() {\n    var args = Array.prototype.slice.call(arguments);\n    args.unshift('   [error]'.red);\n    console.log.apply(this, format(args, '   [error]'.red));\n};\n\n/**\n * Console Prompt.\n *\n * Prompts for a value.\n *\n * Outputs:\n *\n *     $ [prompt] message:\n */\n\nmodule.exports.prompt = function(options, callback) {\n    // prompt setup\n    prompt.override = options.override;\n    prompt.colors = false;\n    prompt.message = '  [prompt]'.green;\n    prompt.delimiter = ' ';\n    prompt.start();\n\n    // begin prompting\n    prompt.get(options.data, callback);\n};\n\n/**\n * RAW Console Log.\n *\n * Passes the parameters to `console.log` with no prefix.\n *\n * Outputs:\n *\n *     $ message\n */\n\nmodule.exports.raw = function() {\n    var args = Array.prototype.slice.call(arguments);\n    console.log.apply(this, args);\n};\n\n/**\n * Format Multiline Messages.\n *\n * Some messages will have newlines embedded within the message.\n * The formatter can correctly display these messages by calling:\n *\n *     format(messages, '[phonegap]');\n *\n * Options:\n *\n *   - `args` {Array} of `String` elements to output.\n *   - `prefix` {String} is prepended to each new line of the output.\n *\n * Returns:\n *\n *   {Array} of the correctly formatted args.\n */\n\nfunction format(args, prefix) {\n    for(var i = 0, l = args.length; i < l; i++) {\n        if (typeof args[i] == 'string') {\n            args[i] = args[i].replace(/\\n/g, new FormatMatcher(prefix));\n        }\n    }\n    return args;\n}\n\nfunction FormatMatcher(prefix) {\n    return function formatMatcher(match, p1) {\n        return '\\n' + prefix + ' ';\n    };\n}\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/lib/cli/util/update-check.js":"/*!\n * Module dependencies.\n */\n\nvar pkg = require('../../../package.json'),\n    updateNotifier = require('update-notifier');\n\n/*!\n * Check if there is a newer version of the CLI published.\n */\n\nmodule.exports.start = function() {\n    var notifier = updateNotifier({\n        pkg: pkg\n    });\n\n    notifier.notify();\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/lib/cli/argv.js":"/**\n * Module dependencies.\n */\n\nvar path = require('path'),\n    phonegap = require('../main');\n\n/**\n * Parse command-line arguments.\n *\n * Inspects the arguments and calls the appropriate action.\n *\n * Options:\n *\n *   - `argv` {Object} is an optimist.argv object.\n *   - `[callback]` {Function} is called on completion.\n */\n\nmodule.exports = function(argv, callback) {\n    // optional callback\n    callback = callback || function() {};\n\n    // parse process.argv for easy --flag handling\n    // skipped when already parsed\n    if (!argv._) {\n        var processArgv = Array.prototype.slice.call(argv);\n        argv = require('minimist')(argv.slice(2), {\n            boolean: module.exports.FLAGS,\n            default: {\n                'autoreload': true,\n                'browser': true,\n                'console': true,\n                'deploy': true,\n                'homepage': true,\n                'localtunnel': false,\n                'proxy': false,\n                'push': true,\n                'refresh': true\n            }\n        });\n\n        // add $0 for backward-compatibility for optimist.\n        argv.$0 = path.basename(processArgv[1]).replace('.js', '');\n\n        // add original argv command without minimist formatting\n        argv.processArgv = processArgv;\n\n        // add -e support to Cordova commands\n        if (argv.e) {\n            var index = argv.processArgv.indexOf('-e');\n            if (index >= 0) {\n                argv.processArgv[index] = '--emulator';\n                argv.emulator = true;\n                argv.e = false;\n            }\n        }\n    }\n\n    // cordova commands should bypass all processing\n    if (argv._[0] && argv._[0].match(/cordova/i)) {\n        this.cordova(argv, callback);\n        return;\n    }\n\n    // --version\n    if (argv.version || argv.v) {\n        this.version(argv, callback);\n        return;\n    }\n\n    // --verbose\n    if (argv.verbose || argv.d) {\n        argv.verbose = true;\n        phonegap.mode({ verbose: true });\n    }\n\n    // --help\n    // --help <command>\n    if (argv.help || argv.h) {\n        argv._.unshift('help');\n    }\n\n    // support <command> help\n    if (argv._[argv._.length-1] === 'help' && argv._.length > 1) {\n        argv._.pop();\n        argv._.unshift('help');\n    }\n\n    // no command displays help\n    if (!argv._.length) {\n        argv._.unshift('help');\n    }\n\n    // lookup command to execute\n    var command = this;\n    for (var i = 0, l = argv._.length; i < l; i++) {\n        if (typeof command[argv._[i]] === 'function') {\n            command = command[argv._[i]];\n        }\n        else {\n            break;\n        }\n    }\n\n    // execute unknown commands with cordova\n    if (command === this) {\n        argv.processArgv.splice(2, 0, 'cordova');\n        argv._.unshift('cordova');\n        this.cordova(argv, callback);\n    }\n    // execute all other commands with phonegap\n    else {\n        command.call(this, argv, callback);\n    }\n};\n\nmodule.exports.FLAGS = [\n    'd', 'device',\n    'e', 'emulator',\n    'd', 'verbose',\n    'v', 'version',\n    'h', 'help',\n    'autoreload',\n    'browser',\n    'console',\n    'deploy',\n    'homepage',\n    'localtunnel',\n    'proxy',\n    'push',\n    'refresh'\n];\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/lib/cli/cordova.js":"/*!\n * Module dependencies.\n */\nvar phonegap = require('../main');\n\n/**\n * $ phonegap cordova [[commands] options]\n *\n * Execute an arbitrary Cordova CLI command.\n *\n * Options:\n *\n *   - `argv` {Object} is an optimist object.\n *   - `callback` {Function} is a completion callback.\n *     - `e` {Error} is null unless there was an error.\n */\n\nmodule.exports = function(argv, callback) {\n    var cordovaCommand = Array.prototype.slice.call(argv.processArgv);\n\n    // given the command:\n    //    $ phonegap cordova run some command --foo=BAR\n    // construct the equivalent cordova command:\n    //    $ cordova run some command --foo=BAR\n    while(cordovaCommand[0] !== 'cordova') {\n        cordovaCommand.shift();\n    }\n\n    // wrap any arguments that contain whitespace in quotations.\n    // example: cordova create path/to/my-app --name \"Hello World\"\n    cordovaCommand = cordovaCommand.map(function(command) {\n        return (/\\s/.test(command)) ? '\"' + command + '\"' : command;\n    });\n\n    // stop cordova-cli from tracking us!\n    cordovaCommand.push(\"--no-telemetry\");\n\n    // create a string representing the cordova command\n    cordovaCommand = cordovaCommand.join(' ');\n\n    phonegap.cordova({\n        cmd: cordovaCommand,\n        verbose: argv.verbose\n    }, callback);\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/lib/cli/create.js":"/*!\n * Module dependencies.\n */\n\nvar phonegap = require('../main');\n\n/**\n * $ phonegap create <path>\n *\n * Create a Cordova-compatible project.\n *\n * Options:\n *\n *   - `argv` {Object} is an optimist object.\n *   - `callback` {Function} is a completion callback.\n *     - `e` {Error} is null unless there was an error.\n */\n\nmodule.exports = function(argv, callback) {\n    // display help on $ phonegap create\n    if (argv._.length <= 1) {\n        argv._.unshift('help');\n        this.argv(argv, callback);\n        return;\n    }\n\n    // project info\n    var data = {\n        path: argv._[1],\n        id: argv._[2] || argv.id || argv.i,\n        name: argv._[3] || argv.name || argv.n,\n        config: JSON.parse(argv._[4] || '{}'),\n        'link-to': argv['link-to'],\n        'copy-from': argv['copy-from'],\n        'template': argv['template'] || argv['recipe']\n    };\n\n    // support cordova's unconventional -src shorthand flag\n    if (!data['copy-from']) {\n        if (argv.s && argv.r && argv.c && typeof argv.c === 'string') {\n            data['copy-from'] = argv.c;\n        }\n    }\n\n    // create the project\n    phonegap.create(data, function(e) {\n        callback(e);\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/lib/cli/help.js":"/*!\n * Module dependencies.\n */\n\nvar path = require('path'),\n    fs = require('fs');\n\n/**\n * $ phonegap help [command]\n *\n * Outputs the usage information for a given command.\n * Each command documents the help information under /doc/cli/command.txt\n *\n * Options:\n *\n *   - `argv` {Object} is an optimist object.\n *   - `callback` {Function} is null unless there is an error.\n */\n\nmodule.exports = function(argv, callback) {\n    // help file directory\n    var basepath = path.join(__dirname, '..', '..', 'doc', 'cli'),\n        filepath,\n        data;\n\n    // filename format: command.command.txt\n    filepath = argv._.slice(0);\n    filepath.push('txt');\n    filepath = filepath.join('.');\n\n    // alias for the serve, plugin, template commands\n    filepath = filepath.replace('help.app.txt', 'help.serve.txt');\n    filepath = filepath.replace('help.plugin', 'help.local.plugin');\n    filepath = filepath.replace('help.recipe', 'help.template');\n\n    // full path\n    filepath = path.join(basepath, filepath);\n\n    // get help info and replace $0 with process name\n    if (!fs.existsSync(filepath)) {\n        this.cli.unknown(argv, callback);\n        return;\n    }\n    data = fs.readFileSync(filepath, 'utf8');\n    data = data.trim().replace(/\\$0/g, argv.$0);\n\n    console.log('\\n' + data + '\\n');\n    callback(null);\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/lib/cli/install.js":"/*!\n * Module dependencies.\n */\n\nvar phonegap = require('../main');\n\n/**\n * $ phonegap create <path>\n *\n * Create a Cordova-compatible project.\n *\n * Options:\n *\n *   - `argv` {Object} is an optimist object.\n *   - `callback` {Function} is a completion callback.\n *     - `e` {Error} is null unless there was an error.\n */\n\nmodule.exports = function(argv, callback) {\n    // display help on $ phonegap create\n    if (argv._.length <= 1) {\n        argv._.unshift('help');\n        this.argv(argv, callback);\n        return;\n    }\n\n    // delegate to `phonegap run <platform>`\n    for(var i = 0, l = argv._.length; i < l; i++) {\n        if (argv._[i] === 'install') {\n            argv.processArgv[i + 2] = 'run';\n            argv._[i] = 'run';\n            i = l;\n        }\n    }\n\n    phonegap.emit('warn', 'The command `phonegap install` has been DEPRECATED.');\n    phonegap.emit('warn', 'The command has been delegated to `phonegap run`.');\n    phonegap.emit('warn', 'The command will soon be removed.');\n\n    this.argv(argv, callback);\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/lib/cli/local.js":"/*!\n * Module dependencies.\n */\n\nvar phonegap = require('../main');\n\n/**\n * $ phonegap local [command]\n *\n * Groups all of the local commands under the... local... command.\n *\n * Options:\n *\n *   - `argv` {Object} is an optimist object.\n *   - `callback` {Function} is a completion callback.\n *     - `e` {Error} is null unless there was an error.\n */\n\nmodule.exports = function(argv, callback) {\n    var self = this;\n\n    // display help when given no command\n    if (argv._.length <= 1) {\n        argv._.unshift('help');\n        self.argv(argv, callback);\n        return;\n    }\n\n    phonegap.emit('warn', 'The command `phonegap local <command>` has been DEPRECATED.');\n    phonegap.emit('warn', 'The command has been delegated to `phonegap <command>`.');\n    phonegap.emit('warn', 'The command `phonegap local <command>` will soon be removed.');\n\n    // redirect to `$ phonegap <command>` which delegates to a cordova command\n    argv.processArgv.splice(2, 1);  // remove the 'local' command\n    argv._.shift();                 // remove the 'local' command\n    self.cli.argv(argv, callback);\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/lib/cli/template.js":"/**\n * $ phonegap template [command]\n *\n * Groups all of the template commands.\n *\n * Options:\n *\n *   - `argv` {Object} is an optimist object.\n *   - `callback` {Function} is a completion callback.\n *     - `e` {Error} is null unless there was an error.\n */\n\nmodule.exports = function(argv, callback) {\n    var self = this;\n\n    // display help when given no command\n    if (argv._.length <= 1) {\n        argv._[0] = 'template'; // replace recipe with template\n        argv._.unshift('help');\n        self.argv(argv, callback);\n        return;\n    }\n\n    // command is unknown\n    self.cli.unknown(argv, callback);\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/lib/cli/template.list.js":"/*!\n * Module dependencies.\n */\n\nvar phonegap = require('../main');\n\n/**\n * $ phonegap template list\n *\n * Lists availabe app templates.\n *\n * Options:\n *\n *   - `argv` {Object} is an optimist object.\n *   - `callback` {Function} is null unless there is an error.\n */\n\nmodule.exports = function(argv, callback) {\n    phonegap.template.list({}, function(e, data) {\n        // calculate the width of the name row.\n        // the width minus the current name will give us the indentation width\n        // to align the names and descriptions\n        var maxLength = 0;\n        data.templates.forEach(function(template) {\n            maxLength = Math.max(maxLength, template.name.length);\n        });\n        maxLength += 4; // space between the longest name and description\n\n        // display all templates\n        data.templates.forEach(function(template) {\n            var indent = new Array(maxLength - template.name.length).join(' ');\n            phonegap.emit('raw', template.name + indent + template.description);\n        });\n\n        callback();\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/lib/cli/template.search.js":"/*!\n * Module dependencies.\n */\n\nvar phonegap = require('../main');\n\n/**\n * $ phonegap template search [name]\n *\n * Display a list of available templates.\n *\n * Options:\n *\n *   - `argv` {Object} is an optimist object.\n *   - `callback` {Function} is null unless there is an error.\n */\n\nmodule.exports = function(argv, callback) {\n    phonegap.template.search({}, function(e, data) {\n        callback();\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/lib/cli/remote.js":"/**\n * $ phonegap remote [command]\n *\n * Groups all of the remote commands under the... remote... command.\n *\n * Options:\n *\n *   - `argv` {Object} is an optimist object.\n *   - `callback` {Function} is a completion callback.\n *     - `e` {Error} is null unless there was an error.\n */\n\nmodule.exports = function(argv, callback) {\n    var self = this;\n\n    // display help when given no command\n    if (argv._.length <= 1) {\n        argv._.unshift('help');\n        self.argv(argv, callback);\n        return;\n    }\n\n    // command is unknown\n    self.cli.unknown(argv, callback);\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/lib/cli/remote.build.js":"/*!\n * Module dependencies.\n */\n\nvar phonegap = require('../main');\n\n/**\n * $ phonegap remote build <platform>\n *\n * Build a specific platform. Eventually, it should support building multiple\n * platforms.\n *\n * The `phonegap.remote.build()` function will handle login requirements and\n * the login event handler is set with the CLI login function.\n *\n * Options:\n *\n *   - `argv` {Object} is an optimist object.\n *   - `callback` {Function} is a completion callback.\n *     - `e` {Error} is null unless there was an error.\n *     - `data` {Object} describes the built app.\n */\n\nmodule.exports = function(argv, callback) {\n    // display help when missing required parameter <platform>\n    // $ phonegap remote build\n    if (argv._.length <= 2) {\n        argv._.unshift('help');\n        this.cli.argv(argv, callback);\n        return;\n    }\n\n    // build data\n    var data = {\n        platforms: [argv._[2]],\n        protocol: argv.protocol,\n        host: argv.host,\n        port: argv.port,\n        path: argv.path,\n        proxy: argv.proxy\n    };\n\n    // build the project\n    phonegap.remote.build(data, function(e, data) {\n        callback(e, data);\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/lib/cli/remote.install.js":"/*!\n * Module dependencies.\n */\n\nvar phonegap = require('../main');\n\n/**\n * $ phonegap remote install <platform>\n *\n * Install the application remotely.\n *\n * Options:\n *\n *   - `argv` {Object} is an optimist object.\n *   - `callback` {Function} is a completion callback.\n *     - `e` {Error} is null unless there was an error.\n *     - `data` {Object} describes the built app.\n */\n\nmodule.exports = function(argv, callback) {\n    // display help when missing required parameter <platform>\n    if (argv._.length <= 2) {\n        argv._.unshift('help');\n        this.cli.argv(argv, callback);\n        return;\n    }\n\n    // run data\n    var data = {\n        platforms: [argv._[2]],\n        protocol: argv.protocol,\n        host: argv.host,\n        port: argv.port,\n        path: argv.path,\n        proxy: argv.proxy\n    };\n\n    // run the project\n    phonegap.remote.install(data, function(e, data) {\n        callback(e, data);\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/lib/cli/remote.login.js":"/*!\n * Module dependencies.\n */\n\nvar phonegap = require('../main'),\n    console = require('./util/console');\n\n/**\n * $ phonegap remote login [options]\n *\n * Prompts for the username and password.\n *\n * Options:\n *\n *   - `argv` {Object} is an optimist object.\n *   - `callback` {Function} is a completion callback.\n *     - `e` {Error} is null unless there is an error.\n *     - `api` {Object} is the phonegap-build-rest API object.\n */\n\nmodule.exports = function(argv, callback) {\n    // login credentials\n    var data = {\n        username: argv.username || argv.u,\n        password: argv.password || argv.p,\n        protocol: argv.protocol,\n        host: argv.host,\n        port: argv.port,\n        path: argv.path,\n        proxy: argv.proxy\n    };\n\n    phonegap.remote.login(data, function(e, api) {\n        callback(e, api);\n    });\n};\n\n/**\n * Bind login event handler.\n *\n * This event is fired when a username and password are required.\n *\n * Options:\n *\n *   - `data` {Object} describes the known auth data.\n       - `username` {String} is the username or undefined.\n       - `password` {String} is the password or undefined.\n *   - `callback` {Function} is called with the login credentials.\n *     - `e` {Error} is null unless there was an error.\n *     - `options` {Object}\n *     - `options.username` {String} is the username to authenticate.\n *     - `options.password` {String} is the password to authenticate.\n */\n\nphonegap.on('login', function(data, callback) {\n    // console.prompt setup\n    var promptOptions = {\n        // use provided values\n        override: data,\n\n        // prompt properties\n        data: {\n            properties: {\n                username: {\n                    required: true,\n                    description: 'enter username:'\n                },\n                password: {\n                    hidden: true,\n                    required: true,\n                    description: 'enter password:'\n                }\n            }\n        }\n    };\n\n    // begin prompting\n    console.prompt(promptOptions, function(e, result) {\n        callback(e, result);\n    });\n});\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/lib/cli/remote.logout.js":"/*!\n * Module dependencies.\n */\n\nvar phonegap = require('../main');\n\n/**\n * $ phonegap remote logout\n *\n * Logout of the current account and report whether it was a success or failure.\n *\n * Options:\n *\n *   - `argv` {Object} is an optimist object.\n *   - `callback` {Function} is a completion callback.\n */\n\nmodule.exports = function(argv, callback) {\n    phonegap.remote.logout(argv, function(e) {\n        callback(e);\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/lib/cli/remote.run.js":"/*!\n * Module dependencies.\n */\n\nvar phonegap = require('../main');\n\n/**\n * $ phonegap remote run <platform>\n *\n * Run will build and install the application.\n *\n * Options:\n *\n *   - `argv` {Object} is an optimist object.\n *   - `callback` {Function} is a completion callback.\n *     - `e` {Error} is null unless there was an error.\n *     - `data` {Object} describes the built app.\n */\n\nmodule.exports = function(argv, callback) {\n    // display help when missing required parameter <platform>\n    if (argv._.length <= 2) {\n        argv._.unshift('help');\n        this.cli.argv(argv, callback);\n        return;\n    }\n\n    // run data\n    var data = {\n        platforms: [argv._[2]],\n        protocol: argv.protocol,\n        host: argv.host,\n        port: argv.port,\n        path: argv.path,\n        proxy: argv.proxy\n    };\n\n    // run the project\n    phonegap.remote.run(data, function(e, data) {\n        callback(e, data);\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/lib/cli/serve.js":"/*!\n * Module dependencies.\n */\n\nvar phonegap = require('../main'),\n    console = require('./util/console');\n\n/**\n * $ phonegap serve [options]\n *\n * Serves the app on a local web server.\n *\n * Options:\n *\n *   - `argv` {Object} is an optimist object.\n *   - `callback` {Function} is a completion callback.\n *     - `e` {Error} is null unless there was an error.\n */\n\nmodule.exports = function(argv, callback) {\n    // options\n    var data = {\n        port: argv.port || argv.p,\n        autoreload: argv.autoreload,\n        browser: argv.browser,\n        console: argv.console,\n        deploy: argv.deploy,\n        homepage: argv.homepage,\n        localtunnel: argv.localtunnel,\n        proxy: !argv.proxy, // build commands expect default of false, but connect-phonegap expects default of true\n        push: argv.push,\n        refresh: argv.refresh,\n        verbose: argv.verbose\n    };\n\n    phonegap.serve(data, function(e, server) {\n        if (!e) {\n            console.log('');\n            console.log('ctrl-c to stop the server');\n            console.log('');\n        }\n\n        callback(e);\n    });\n\n    // gracefully exit on ctrl-c\n    process.on('SIGINT', function() {\n        process.exit();\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/lib/cli/unknown.js":"/*!\n * Module dependencies.\n */\n\nvar console = require('./util/console'),\n    util = require('util');\n\n/**\n * $ phonegap noop\n *\n * Outputs that the command-line command is unsupported.\n *\n * Options:\n *\n *   - `argv` {Object} is an optimist object.\n *   - `callback` {Function} is a completion callback.\n */\n\nmodule.exports = function(argv, callback) {\n    console.error(util.format(\n        \"'%s' is not a %s command. See '%s help'\",\n        argv._.join(' '),\n        argv.$0,\n        argv.$0\n    ));\n    callback();\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/lib/cli/version.js":"/*!\n * Module dependencies.\n */\n\nvar phonegap = require('../main');\n\n/**\n * $ phonegap version\n *\n * Outputs the version to the console.\n *\n * Options:\n *\n *   - `argv` {Object} is an optimist object.\n *   - `callback` {Function} is a completion callback.\n */\n\nmodule.exports = function(argv, callback) {\n    console.log(phonegap.version().npm);\n    callback();\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/lib/cli/push.js":"/*!\n * Module dependencies.\n */\n\nvar phonegap = require('../main');\n\n/**\n * $ phonegap push\n *\n * Outputs the version to the console.\n *\n * Options:\n *\n *   - `argv` {Object} is an optimist object.\n *   - `callback` {Function} is a completion callback.\n */\n\nmodule.exports = function(argv, callback) {\n    // options\n    var data = {\n        deviceID: argv.deviceID,\n        service: argv.service,\n        payload: argv.payload,\n        file: argv.file\n    };\n\n    phonegap.push(data, function(e, server) {\n        callback(e);\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/lib/cli/analytics.js":"/*\ncommand: phonegap analytics\n\nwhen: user has opted in\nresult: outputs message \"Analytics is enabled! Nice, you are helping us make phonegap tooling better.\"\n\"If you would like to turn analytics off, simply run `phonegap analytics off`\n\nwhen: user has opted out\nresult: outputs message \"Analytics is off. If you would like to enable analytics simply run `phonegap analytics on`\"\n\nwhen: user has not specified anything yet\nresult: user is presented with y/n option to explicitely turn it on or off\n\ncommands:\nphonegap analytics reset|on|off\n*/\n\nvar Insight = require('insight');\nvar Configstore = require('configstore');\nvar fs = require('fs');\nvar path = require('path');\nvar request = require('request');\nvar sanitizeArgs = require('./util/sanitize-args');\nvar os_name = require('os-name');\n\n// Google Analytics tracking code\nvar trackingCode = 'UA-94271-37'; // this is the default production tracking code\n\nvar rootPath = require.resolve('../../package.json');\nvar gitPath = path.join(path.dirname(rootPath),'.git');\nif(fs.existsSync(gitPath)) {\n    // set it to the dev tracking code\n    trackingCode = 'UA-94271-38';\n}\nvar pkg_json = require('../../package.json');\n\nvar insight = new Insight({\n    \"trackingCode\": trackingCode,\n    \"pkg\": pkg_json\n});\n\nvar PromptPreamble = '\\nHow you use PhoneGap provides us with important data that we can use to make\\n' +\n                     'our products better. Please read our privacy policy for more information on the\\n' +\n                     'data we collect. http://www.adobe.com/privacy.html';\nvar PromptMessage = 'Would you like to allow PhoneGap to collect anonymous usage data?';\nvar AnalyticsOffMessage  = '\\nAnalytics is off. \\nIf you would like to turn analytics on, simply run `phonegap analytics on`\\n';\nvar AnalyticsOnMessage  = '\\nAnalytics is on! Nice, you are helping us improve PhoneGap tooling.\\n' +\n                         'If you would like to turn analytics off, simply run `phonegap analytics off`\\n';\n\n/*\n    Helper function to determine if cli is a production/dev release\n*/\n\nfunction getEnvironment(package_json) {\n    if(/cordova/.test(package_json.version)) {\n        return 1;\n    } else {\n        return 0;\n    }\n}\n\n\n/*\n    Helper function to send events to the analytics end point\n*/\nfunction sendAnalytics(data) {\n    if (!data) return;\n\n    request.post({\n        url: 'https://metrics.phonegap.com/gelf',\n        form: JSON.stringify(data)\n    }, function(err, res, body) {\n        // TODO: do we want to report errors to somewhere???\n        if (err && err.code == 'ETIMEDOUT') {\n            // We had a timeout! oh no.\n            if (err.connect) {\n                // this was a connection timeout, meaning, we timed out\n                // establishing a connection to metrics.phonegap.com\n            } else {\n                // this was a read timeout, meaning, we timed out waiting for a\n                // response from the server\n            }\n        }\n    });\n}\n\nmodule.exports = function analytics(argv, callback) {\n    var params = argv._.slice(1);\n\n    if (params.length > 0) {\n        switch(params[0].toLowerCase()) {\n            case \"on\" :\n                // only track it if the value is changing\n                if (insight.optOut !== false) {\n                    // must change it before we use it\n                    insight.optOut = false;\n                    module.exports.trackEvent(argv._);\n                }\n                break;\n            case \"off\" :\n                // track it only if it changes\n                if (insight.optOut !== true) {\n                    // must use it before we change it\n                    module.exports.trackEvent(argv._);\n                    insight.optOut = true;\n                }\n                break;\n            case \"reset\" :\n                // this is a secret api, mainly just for testing the prompt messages\n                console.log(\"resetting it .. \");\n                insight.optOut = undefined;\n                break;\n        }\n    }\n    if (insight.optOut === undefined) {\n    } else {\n        // somewhat confusing tri-state, it could be true|false|undefined\n        if (insight.optOut) {\n            console.log(AnalyticsOffMessage);\n        }\n        else {\n            console.log(AnalyticsOnMessage);\n        }\n    }\n    callback();\n};\n\nvar EVENT_EXPIRY_TIME = 30 * 60 * 1000; // 30 minutes in milliseconds\nmodule.exports.EVENT_EXPIRY_TIME = EVENT_EXPIRY_TIME;\n// Use the same underlying filesystem config object that the `Insight` module\n// above uses. This way we hopefully don't litter config objects everywhere.\nvar config = new Configstore('insight-phonegap');\nmodule.exports.config = config;\n/*\n    Helper function to help build up GELF formatted json\n*/\n\nfunction basicGELF() {\n    var event = {\n        \"version\": \"1.1\",\n        \"host\": \"cli\",\n        \"short_message\": \"\",\n        \"_userID\": insight.clientId,\n        \"_session\": true,\n        \"_appVersion\": pkg_json.version,\n        \"_nodeVersion\": process.version,\n        \"_platform\": os_name(),\n        \"_env\": getEnvironment(pkg_json)\n    };\n    var now = (new Date()).valueOf(); // in ms\n    var lastRun = config.get('lastRun');\n    if (lastRun && (now - lastRun < EVENT_EXPIRY_TIME)) {\n        // If the CLI ran consecutive actions within the expiry time, use the same session id.\n        event[\"_session\"] = lastRun;\n    } else {\n        event[\"_session\"] = now;\n        config.set('lastRun', now);\n    }\n    return event;\n}\nmodule.exports.hasOptedOut = function hasOptedOut() {\n    return insight.optOut === true;\n};\n\n\nmodule.exports.prompt = function prompt(callback) {\n    console.log(PromptPreamble);\n\n    insight.askPermission(PromptMessage,function(error,optIn) {\n        if (optIn) {\n            // user has accepted, we will thank them and track this\n            insight.trackEvent({\"category\":\"analytics-prompt\",\n                                \"action\":\"accepted\",\n                                \"label\":\"\"});\n\n            var info = basicGELF();\n            info.short_message = \"analytics-prompt accepted\";\n            sendAnalytics(info);\n\n            console.log(AnalyticsOnMessage);\n        }\n        else {\n            // user has declined, we still want to track this\n            insight.optOut = false;\n            insight.trackEvent({\"category\":\"analytics-prompt\",\n                                \"action\":\"declined\",\n                                \"label\":\"\"});\n\n            var info = basicGELF();\n            info.short_message = \"analytics-prompt declined\";\n            sendAnalytics(info);\n\n            insight.optOut = true;\n            console.log(AnalyticsOffMessage);\n        }\n        callback();\n    });\n};\n\nmodule.exports.statusUnknown = function statusUnknown() {\n    return insight.optOut === undefined;\n};\n\nmodule.exports.trackEvent = function trackEvent(args, error) {\n    // if we received an error, then we will exit with an error status\n    // if an exit code was attached to the error, then use it\n    // otherwise default to 1.\n    var exitCode = error ? error.exitCode || 1 : 0;\n    var cleanedResult = sanitizeArgs.stringifyForGoogleAnalytics(args);\n    var category = cleanedResult.command;\n    var action = cleanedResult.params;\n    var label = exitCode + \"\";\n    var value = cleanedResult.count;\n    if (module.exports.hasOptedOut() === false) {\n        if (cleanedResult.command) {\n            // If we have a command parsed out, send it off to metrics\n            var info = basicGELF();\n            info.short_message = sanitizeArgs.getCommand(args);\n            info._flags = sanitizeArgs.getSwitches(args);\n            info._exitCode = exitCode;\n            info._params = sanitizeArgs.filterParameters(args);\n            if (error) {\n                if (error.stack) info._error_stack = error.stack;\n                if (error.output) info._error_msg = error.output;\n            }\n            sendAnalytics(info);\n        }\n        category = category || \"-\";\n        action = action || \"-\";\n        label = label || \"-\";\n        value = value || 0;\n        insight.trackEvent({\"category\":category,\n                            \"action\":action,\n                            \"label\":label,\n                            \"value\":value});\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/lib/cli/util/sanitize-args.js":"/*\n    Module to sanitize args to be sent to analytics, removing\n    private user info.\n// command hierarchy\n    * indicates arg values are stripped and only count, and list of used flags is returned\nphonegap\n    [help, create*, push*, build, prepare, compile, info, serve*, app*, install, run]\n    remote\n        [login*, logout, build, install, run]\n    plugin\n        [ls, list, rm, remove, add*]\n    plugins\n        [ls, list, rm, remove, add*]\n    platform\n        [ls, list, rm, remove, add*]\n    platforms\n        [ls, list, rm, remove, add*]\n    template\n        [list, search]\n    cordova\n        [create*, serve*]\n        plugin\n            [ls, list, rm, remove, add*]\n        plugins\n            [ls, list, rm, remove, add*]\n        platform\n            [ls, list, rm, remove, add*]\n        platforms\n            [ls, list, rm, remove, add*]\n*/\n\n// returns an array of args that are switches ex. --target, -d, --verbose, --secret=forbidden\nfunction getSwitches(args) {\n    return args.filter(function(arg) { // only switch elems\n        return arg && arg.indexOf(\"-\") === 0 && arg != \"-v\";\n    }).map(function(elem) { // remove anything after an '='\n        return elem.split(\"=\")[0];\n    });\n}\n\n// helper, returns the first index into arr1 of the items in arr2\nfunction indexOfAny(arr1,arr2) {\n    var index = -1;\n    arr2.some(function (elem,pos) {\n        if (arr1.indexOf(elem) > -1) {\n            index = pos;\n            return true;\n        }\n    });\n    return index;\n}\n\n// returns an array of args that are NOT switches\nfunction filterSwitches(args) {\n    return args.filter(function(arg) {\n        return arg && !(arg.indexOf(\"-\") === 0);\n    });\n}\n\n// Returns an array of filtered parameters that we can log to analytics\n// Removes certain tokens, such as particular plugins being added/removed, for privacy reasons\nfunction filterParameters(args) {\n    var params = [];\n    if (args.length === 0) return params;\n    if (indexOfAny(args,[\"help\",\"--help\",\"-h\"]) > -1) {\n        params = args.slice(1);\n    } else {\n        var cmd = args[0].toLowerCase();\n        switch(cmd) {\n            case \"template\" : // these choices log ALL args\n            case \"build\"    :\n            case \"prepare\"  :\n            case \"compile\"  :\n            case \"emulate\"  :\n            case \"install\"  :\n            case \"version\"  :\n            case \"-v\"       :\n            case \"info\"     :\n            case \"run\"      :\n                // add 'em all if they exist\n                if (args.length > 1) {\n                    params = args.slice(1);\n                }\n                break;\n            case \"serve\"  : // for these commands, we do not want to log anything beyond just the command\n            case \"app\" :\n            case \"create\" :\n            case \"push\" :\n                break;\n            case \"cordova\" : // log `cordova + command`\n            case \"local\" : // log `local + command`\n                // these commands need recursive parsing of parameters - invoke one more time\n                params = filterParameters(args.slice(1)); // recurse\n                break;\n            case \"platforms\": // this is an alias, just fall thru\n            case \"platform\" :\n            case \"plugins\": // alias fall thru\n            case \"plugin\" :\n                // For the list commands, log all arguments.\n                if (indexOfAny(args,[\"list\",\"ls\"]) > -1) {\n                    params = args.slice(1);\n                } else {\n                    // for the add+rm command, we dont log _which_ plugins/platforms are\n                    // being added/removed.\n                    // TODO: perhaps we should log core plugins?\n                    params = [args[1]];\n                    if ([\"platform\", \"platforms\"].indexOf(cmd) > -1) {\n                        // For platforms add/rm, for certain specific platforms, we log\n                        // which platform is being managed.\n                        // TODO: only pull out local dir platforms\n                        // cordova-platform-id should be fine\n                        // git urls (may) be fine ??\n                        // ios, android, windows, wp8, ...\n                        if (args[2] && [\"android\",\"ios\",\"wp8\",\"windows\"].indexOf(args[2]) > -1) {\n                            params.push(args[2]);\n                        }\n                    }\n                }\n                break;\n            case \"remote\" :\n                // login needs special treatment\n                if (args.length > 2 && args[1].toLowerCase() == \"login\") {\n                    params = [\"login\"];\n                } else { // logout, build, install, run <platform>\n                    params = args.slice(1);\n                }\n                break;\n        }\n    }\n    return filterSwitches(params);\n}\n\n// Returns a string representing the command the user ran.\n// May return a compound command in the case of \"cordova\" or \"local\" commands\nfunction getCommand(args) {\n    var cmd = args[0] || \"help\"; // if no command is passed, assume it is help\n    if (cmd.toLowerCase() == \"cordova\" || cmd.toLowerCase() == \"local\") {\n        cmd += \":\" + args[1];\n    }\n    return cmd;\n}\n\nmodule.exports = {\n    getSwitches: getSwitches,\n    filterParameters: filterParameters,\n    getCommand: getCommand,\n    // this function takes an args array which is expect to start with the command\n    // so if we call `phonegap serve --port 1337` this method would receive `serve --port 1337`\n    // ideally we only want to log `serve --port`\n    // returns an object with \"command\" and \"params\" string properties\n    stringifyForGoogleAnalytics:function(args) {\n        args = args || [];\n        var argsToLog = {\"command\":\"-\", \"params\":\"-\",\"count\":0};\n\n        if (args.length > 0) {\n            argsToLog.command = getCommand(args);\n            argsToLog.count = args.length;\n            var filteredParams = filterParameters(args);\n            argsToLog.params = filteredParams.join() || \"-\";\n            if ([\"platform\", \"platforms\"].indexOf(args[0].toLowerCase()) > -1) {\n                var subCommand = filteredParams[0] ? filteredParams[0] : \"-\";\n                if ([\"add\", \"rm\", \"remove\"].indexOf(subCommand) > -1) {\n                    var platform = filteredParams[1];\n                    // todo: only pull out local dir platforms\n                    // cordova-platform-id should be fine\n                    // git urls (may) be fine ??\n                    // ios, android, windows, wp8, ...\n                    if (platform && [\"android\",\"ios\",\"wp8\",\"windows\"].indexOf(platform) > -1) {\n                        subCommand += \":\" + platform;\n                    }\n                    argsToLog.params = subCommand;\n                }\n            }\n            // Tack on switches at the end, or if there are no parameters, replace with just switches\n            var switches = getSwitches(args);\n            if (switches.length) {\n                if (argsToLog.params == \"-\") {\n                    argsToLog.params = \"\" + switches;\n                } else {\n                    argsToLog.params += \" \" + switches;\n                }\n            }\n        }\n        return argsToLog;\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/lib/cli/share.js":"/*!\n * Module dependencies.\n */\n\nvar phonegap = require('../main');\n\n/**\n * $ phonegap share\n *\n * Outputs the version to the console.\n *\n * Options:\n *\n *   - `argv` {Object} is an optimist object.\n *   - `callback` {Function} is a completion callback.\n */\n\nmodule.exports = function(argv, callback) {\n    var data = {\n        dropbox: argv.dropbox,\n        chrome: argv.chrome,\n        connect: argv.connect\n    };\n\n    phonegap.share(data, function(e) {\n        callback(e);\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/lib/cli/report-issue.js":"var opener = require('opener');\nvar os_name = require('os-name');\nvar pkgjson = require('../../package.json');\n\nvar baseUrl = \"https://github.com/phonegap/phonegap-cli/issues/new?\";\nvar prelude = \"body=\";\nvar coda = \"%0aSteps+to+Reproduce%3a%0a%0a1.%0a2\";\n\n/**\n * $ phonegap report-issue\n *\n * Opens the default webbrowser where you can submit an issue to the team\n *\n * Options:\n *\n *   - `argv` {Object} is an optimist object.\n *   - `callback` {Function} is a completion callback.\n */\n\nmodule.exports = function(argv, callback) {\n    var dataStr =  '\\nnode-version:\\t' + process.version +\n                   '\\ncli-version:\\t' + pkgjson.version +\n                   '\\nplatform:\\t' + os_name() +\n                   '\\n --- \\n';\n\n    var url = baseUrl + prelude + escape(dataStr) + coda;\n\n    opener(url);\n    callback();\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/spec/analytics.spec.js":"var cli = require('../lib/cli');\nvar analytics = require('../lib/cli/analytics');\nvar request = require('request');\n\nfunction trigger_phonegap_cli() {\n    require('../bin/phonegap');\n}\n\ndescribe('PhoneGap Analytics', function() {\n    beforeEach(function() {\n        // ensure we dont prompt for turning analytics on\n        spyOn(cli.prototype.analytics, 'statusUnknown').andReturn(false);\n    });\n    afterEach(function() {\n        // delete the phonegap cli entry module from require cache\n        // so we can exercise its logic in each test case\n        delete require.cache[require.resolve('../bin/phonegap')];\n    });\n    it('should pass error objects from command invocations to analytics', function() {\n        var fake_error = {message: 'yo dawg'};\n        var track = spyOn(cli.prototype.analytics, 'trackEvent');\n        spyOn(cli.prototype, 'argv').andCallFake(function(argv, cb) {\n            cb(fake_error);\n        });\n        trigger_phonegap_cli();\n        expect(track).toHaveBeenCalledWith(jasmine.any(Array), fake_error);\n    });\n    describe('trackEvent', function() {\n        var post_spy;\n        var get_spy;\n        var set_spy;\n        beforeEach(function() {\n            spyOn(analytics, 'hasOptedOut').andReturn(false);\n            post_spy = spyOn(request, 'post');\n            get_spy = spyOn(analytics.config, 'get');\n            set_spy = spyOn(analytics.config, 'set');\n        });\n        it('should POST to metrics.phonegap.com on successfully-parsed commands', function() {\n            analytics.trackEvent([\"platform\", \"list\"]);\n            expect(post_spy).toHaveBeenCalled();\n        });\n        it('should attach command exit codes to event tracking', function() {\n            analytics.trackEvent([\"platform\", \"explode\"], {exitCode:21});\n            var dump = JSON.parse(post_spy.calls[0].args[0].form);\n            expect(dump._exitCode).toEqual(21);\n        });\n        it('should track top-level commands in the short_message event field', function() {\n            var cmds = ['serve', 'platform', 'plugins', 'version'];\n            cmds.forEach(function(cmd) {\n                analytics.trackEvent([cmd]);\n                var last_call = post_spy.calls[post_spy.calls.length - 1];\n                var dump = JSON.parse(last_call.args[0].form);\n                expect(dump.short_message).toEqual(cmd);\n            });\n        });\n        it('should track switches in the _switches event field', function() {\n            var cmd = ['serve', '--yourself', '--verbose'];\n            analytics.trackEvent(cmd);\n            var dump = JSON.parse(post_spy.calls[0].args[0].form);\n            expect(dump._flags).toContain('--yourself');\n            expect(dump._flags).toContain('--verbose');\n        });\n        it('should track parameters in the _params event field', function() {\n            var cmd = ['plugins', 'list'];\n            analytics.trackEvent(cmd);\n            var dump = JSON.parse(post_spy.calls[0].args[0].form);\n            expect(dump._params).toContain('list');\n        });\n        describe('session tracking', function() {\n            it('should tag events with a session id', function() {\n                var cmd = ['plugins', 'list'];\n                analytics.trackEvent(cmd);\n                var dump = JSON.parse(post_spy.calls[0].args[0].form);\n                expect(dump._session).toEqual(jasmine.any(Number));\n            });\n            it('should tag events with the same session ID if consecutive commands are issued within the event expiry time', function() {\n                var session = (new Date().valueOf() - (analytics.EVENT_EXPIRY_TIME / 2)); // set last session time to half the expiry time\n                get_spy.andReturn(session);\n                var cmd = ['plugins', 'list'];\n                analytics.trackEvent(cmd);\n                var dump = JSON.parse(post_spy.calls[0].args[0].form);\n                expect(dump._session).toEqual(session);\n            });\n            it('should tag events with a new session ID if consecutive commands are issued outside the event expiry time, and store the session id (timestamp) in configstore', function() {\n                var now = new Date().valueOf();\n                var session = (new Date().valueOf() - (2 * analytics.EVENT_EXPIRY_TIME)); // set last session time to double the expiry time\n                get_spy.andReturn(session);\n                var cmd = ['plugins', 'list'];\n                analytics.trackEvent(cmd);\n                var dump = JSON.parse(post_spy.calls[0].args[0].form);\n                expect(dump._session).not.toEqual(session);\n                expect(set_spy).toHaveBeenCalledWith('lastRun', jasmine.any(Number));\n                expect(Math.abs(set_spy.calls[0].args[1] - now)).toBeLessThan(5); // give some leeway in case the clock ticks on e.g. Travis\n            });\n        });\n    });\n});\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/spec/main.spec.js":"/*!\n * Module dependencies.\n */\n\nvar PhoneGap = require('../lib/phonegap'),\n    phonegap = require('../lib/main');\n\n/*!\n * Specification: phonegap.\n */\n\ndescribe('main', function() {\n    it('should be an instance of PhoneGap', function() {\n        expect(phonegap).toEqual(jasmine.any(PhoneGap));\n    });\n});\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/spec/phonegap.spec.js":"/*!\n * Module dependencies.\n */\n\nvar PhoneGap = require('../lib/phonegap'),\n    phonegap = new PhoneGap();\n\n/*!\n * Specification: PhoneGap.\n */\n\ndescribe('phonegap', function() {\n    it('should define phonegap.app', function() {\n        expect(phonegap.app).toEqual(jasmine.any(Function));\n    });\n\n    it('should define phonegap.create', function() {\n        expect(phonegap.create).toEqual(jasmine.any(Function));\n    });\n\n    it('should define phonegap.remote', function() {\n        expect(phonegap.remote).toEqual(jasmine.any(Object));\n    });\n\n    it('should define phonegap.remote.build', function() {\n        expect(phonegap.remote.build).toEqual(jasmine.any(Function));\n    });\n\n    it('should define phonegap.remote.login', function() {\n        expect(phonegap.remote.login).toEqual(jasmine.any(Function));\n    });\n\n    it('should define phonegap.remote.logout', function() {\n        expect(phonegap.remote.logout).toEqual(jasmine.any(Function));\n    });\n\n    it('should define phonegap.template', function() {\n        expect(phonegap.template).toEqual(jasmine.any(Object));\n    });\n});\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/spec/shell.spec.js":"var cli = require('../lib/cli');\n\nfunction trigger_phonegap_cli() {\n    require('../bin/phonegap');\n}\n\ndescribe('$ phonegap [options] commands', function() {\n    var orig_args;\n    beforeEach(function() {\n        // delete the phonegap cli entry module from require cache\n        // so we can exercise its logic in each test case\n        delete require.cache[require.resolve('../bin/phonegap')];\n        // ensure we dont prompt for turning analytics on\n        spyOn(cli.prototype.analytics, 'statusUnknown').andReturn(false);\n        // dont log analytics during tests - fake the cli out into thinking we opted out\n        spyOn(cli.prototype.analytics, 'hasOptedOut').andReturn(true);\n        orig_args = process.argv;\n        spyOn(console, 'log');\n    });\n    afterEach(function() {\n        process.argv = orig_args;\n    });\n\n    it('should support no arguments and post help', function() {\n        process.argv = ['node', 'phonegap.js'];\n        trigger_phonegap_cli();\n        expect(console.log.mostRecentCall.args[0]).toMatch('Usage:');\n    });\n\n    it('should support commands', function() {\n        process.argv = ['node', 'phonegap.js', 'version'];\n        trigger_phonegap_cli();\n        expect(console.log.mostRecentCall.args[0]).toMatch(/^\\w+\\.\\w+\\.\\w+/);\n    });\n\n    it('should support options', function() {\n        process.argv = ['node', 'phonegap.js', '--version'];\n        trigger_phonegap_cli();\n        expect(console.log.mostRecentCall.args[0]).toMatch(/^\\w+\\.\\w+\\.\\w+/);\n    });\n\n    it('should have exit code 0 on successful commands', function() {\n        process.argv = ['node', 'phonegap.js', '--version'];\n        trigger_phonegap_cli();\n        expect(process.exitCode).toEqual(0);\n    });\n\n    describe('on an error', function() {\n        it('should have non-zero exit code', function() {\n            // in updateCheck.spec, we clear require cache to exercise lib/cli properly.\n            // here we re-require it just so we have a loaded cache and are using the\n            // actual lib/cli module when spying on the cli prototype below.\n            cli = require('../lib/cli');\n            process.argv = ['node', 'phonegap.js', 'cordova', 'noop'];\n            spyOn(cli.prototype, 'argv').andCallFake(function(args, cb) {\n                // have argv just blast back an error object to the callback to trigger error flow\n                cb({exitCode:1337});\n            });\n            trigger_phonegap_cli();\n            expect(process.exitCode).toEqual(1337);\n        });\n    });\n});\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/spec/cli/analytics.spec.js":"/*\n * Module dependencies.\n */\n\nvar CLI = require('../../lib/cli'),\n    argv,\n    cli,\n    stdout;\n\n/*\n * Specification: $ phonegap help analytics\n */\n\ndescribe('phonegap help analytics', function() {\n    beforeEach(function() {\n        cli = new CLI();\n        argv = ['node', '/usr/local/bin/phonegap'];\n        spyOn(cli, 'analytics');\n        spyOn(process.stdout, 'write');\n        spyOn(process.stderr, 'write');\n        stdout = process.stdout.write;\n    });\n\n    describe('$ phonegap analytics help', function() {\n        it('should output usage info', function() {\n            cli.argv(argv.concat(['analytics', 'help']));\n            expect(stdout.mostRecentCall.args[0]).toMatch(/usage: [\\S]+ analytics/i);\n        });\n    });\n\n    describe('$ phonegap analytics --help', function() {\n        it('should output usage info', function() {\n            cli.argv(argv.concat(['analytics', '--help']));\n            expect(stdout.mostRecentCall.args[0]).toMatch(/usage: [\\S]+ analytics/i);\n        });\n    });\n\n    describe('$ phonegap analytics -h', function() {\n        it('should output usage info', function() {\n            cli.argv(argv.concat(['analytics', '-h']));\n            expect(stdout.mostRecentCall.args[0]).toMatch(/usage: [\\S]+ analytics/i);\n        });\n    });\n});\n\n/*\n * Specification: $ phonegap analytics\n */\n\ndescribe('phonegap analytics', function() {\n    beforeEach(function() {\n        cli = new CLI();\n        argv = ['node', '/usr/local/bin/phonegap'];\n        spyOn(process.stdout, 'write');\n        spyOn(cli, 'analytics').andReturn({\n            on: function() {}\n        });\n    });\n\n    describe('$ phonegap analytics', function() {\n        it('should connect to phonegap analytics', function() {\n            cli.argv(argv.concat(['analytics']));\n            expect(cli.analytics).toHaveBeenCalled();\n        });\n    });\n\n    describe('$ phonegap analytics on', function() {\n        it('should connect to phonegap analytics', function() {\n            cli.argv(argv.concat(['analytics', 'on']));\n            expect(cli.analytics).toHaveBeenCalled();\n            var analytics_params = cli.analytics.mostRecentCall.args[0]['_'];\n            expect(analytics_params).toContain(\"analytics\");\n            expect(analytics_params).toContain(\"on\");\n        });\n    });\n\n    describe('$ phonegap analytics off', function() {\n        it('should connect to phonegap analytics', function() {\n            cli.argv(argv.concat(['analytics', 'off']));\n            expect(cli.analytics).toHaveBeenCalled();\n            var analytics_params = cli.analytics.mostRecentCall.args[0]['_'];\n            expect(analytics_params).toContain(\"analytics\");\n            expect(analytics_params).toContain(\"off\");\n        });\n    });\n});\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/spec/cli/app.spec.js":"/*\n * Module dependencies.\n */\n\nvar phonegap = require('../../lib/main'),\n    CLI = require('../../lib/cli'),\n    cli,\n    argv,\n    stdout;\n\n/*\n * Specification: $ phonegap help app\n */\n\ndescribe('phonegap help app', function() {\n    beforeEach(function() {\n        cli = new CLI();\n        argv = ['node', '/usr/local/bin/phonegap'];\n        spyOn(phonegap, 'app');\n        spyOn(process.stdout, 'write');\n        spyOn(process.stderr, 'write');\n        stdout = process.stdout.write;\n    });\n\n    describe('$ phonegap help', function() {\n        it('should not include the command', function() {\n            cli.argv(argv.concat(['help']));\n            expect(stdout.mostRecentCall.args[0]).not.toMatch(/\\r?\\n\\s+app.*\\r?\\n/i);\n        });\n    });\n\n    describe('$ phonegap help app', function() {\n        it('should output usage info', function() {\n            cli.argv(argv.concat(['help', 'app']));\n            expect(stdout.mostRecentCall.args[0]).toMatch(/usage: [\\S]+ serve/i);\n        });\n    });\n\n    describe('$ phonegap app help', function() {\n        it('should output usage info', function() {\n            cli.argv(argv.concat(['app', 'help']));\n            expect(stdout.mostRecentCall.args[0]).toMatch(/usage: [\\S]+ serve/i);\n        });\n    });\n\n    describe('$ phonegap app --help', function() {\n        it('should output usage info', function() {\n            cli.argv(argv.concat(['app', '--help']));\n            expect(stdout.mostRecentCall.args[0]).toMatch(/usage: [\\S]+ serve/i);\n        });\n    });\n\n    describe('$ phonegap app -h', function() {\n        it('should output usage info', function() {\n            cli.argv(argv.concat(['app', '-h']));\n            expect(stdout.mostRecentCall.args[0]).toMatch(/usage: [\\S]+ serve/i);\n        });\n    });\n});\n\n/*\n * Specification: $ phonegap app\n */\n\ndescribe('phonegap app', function() {\n    beforeEach(function() {\n        cli = new CLI();\n        argv = ['node', '/usr/local/bin/phonegap'];\n        spyOn(process.stdout, 'write');\n        spyOn(phonegap, 'serve').andReturn({\n            on: function() {}\n        });\n    });\n\n    describe('$ phonegap app', function() {\n        it('should use phonegap.serve', function() {\n            cli.argv(argv.concat(['app']));\n            expect(phonegap.serve).toHaveBeenCalled();\n        });\n    });\n});\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/spec/cli/cordova.spec.js":"/*!\n * Module dependencies.\n */\n\nvar phonegap = require('../../lib/main'),\n    CLI = require('../../lib/cli'),\n    argv,\n    cli;\n\n/*!\n * Specification: $ phonegap cordova <command>\n */\n\ndescribe('$ phonegap cordova', function() {\n    beforeEach(function() {\n        cli = new CLI();\n        argv = ['node', '/usr/local/bin/phonegap'];\n        spyOn(process.stdout, 'write');\n        spyOn(process.stderr, 'write');\n    });\n\n    it('should bypass the PhoneGap CLI chain', function(done) {\n        var version = require('../../node_modules/cordova/package.json').version;\n        phonegap.on('raw', function(data) {\n            // cordova@6.4.0 adds an extra '\\n' after all output\n            if (data !== '\\n') {\n                expect(data).toMatch(version);\n                done();\n            }\n        });\n        cli.argv(argv.concat(['cordova', '--version']));\n    });\n\n    describe('reconstructing the original command:', function() {\n        beforeEach(function() {\n            spyOn(phonegap, 'cordova');\n        });\n\n        it('$ phonegap build ios --release', function() {\n            cli.argv(argv.concat(['cordova', 'build', 'ios', '--release']));\n            expect(phonegap.cordova).toHaveBeenCalledWith(\n                {\n                    cmd: 'cordova build ios --release --no-telemetry',\n                    verbose: false\n                },\n                jasmine.any(Function)\n            );\n        });\n\n        it('$ phonegap cordova create my-app --name \"Hello World\"', function() {\n            cli.argv(argv.concat(['cordova', 'create', 'my-app', '--name', 'Hello World']));\n            expect(phonegap.cordova).toHaveBeenCalledWith(\n                {\n                    cmd: 'cordova create my-app --name \"Hello World\" --no-telemetry',\n                    verbose: false\n                },\n                jasmine.any(Function)\n            );\n        });\n    });\n\n    describe('argument mapping', function() {\n        beforeEach(function() {\n            spyOn(phonegap, 'cordova');\n        });\n\n        it('should map -e to --emulator', function() {\n            cli.argv(argv.concat(['cordova', 'run', 'ios', '-e']));\n            expect(phonegap.cordova).toHaveBeenCalledWith(\n                {\n                    cmd: 'cordova run ios --emulator --no-telemetry',\n                    verbose: false\n                },\n                jasmine.any(Function)\n            );\n        });\n    });\n});\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/spec/cli/create.spec.js":"/*\n * Module dependencies.\n */\n\nvar phonegap = require('../../lib/main'),\n    CLI = require('../../lib/cli'),\n    argv,\n    cli,\n    stdout;\n\n/*\n * Specification: $ phonegap help create\n */\n\ndescribe('phonegap help create', function() {\n    beforeEach(function() {\n        cli = new CLI();\n        argv = ['node', '/usr/local/bin/phonegap'];\n        spyOn(process.stdout, 'write');\n        spyOn(process.stderr, 'write');\n        stdout = process.stdout.write;\n    });\n\n    describe('$ phonegap help', function() {\n        it('should include the command', function() {\n            cli.argv(argv.concat(['help']));\n            expect(stdout.mostRecentCall.args[0]).toMatch(/\\r?\\n\\s+create <path>.*\\r?\\n/i);\n        });\n    });\n\n    describe('$ phonegap create', function() {\n        it('should output usage info', function() {\n            cli.argv(argv.concat(['create']));\n            expect(stdout.mostRecentCall.args[0]).toMatch(/usage: [\\S]+ create/i);\n        });\n    });\n\n    describe('$ phonegap help create', function() {\n        it('should output usage info', function() {\n            cli.argv(argv.concat(['help', 'create']));\n            expect(stdout.mostRecentCall.args[0]).toMatch(/usage: [\\S]+ create/i);\n        });\n    });\n\n    describe('$ phonegap create help', function() {\n        it('should output usage info', function() {\n            cli.argv(argv.concat(['create', 'help']));\n            expect(stdout.mostRecentCall.args[0]).toMatch(/usage: [\\S]+ create/i);\n        });\n    });\n\n    describe('$ phonegap create --help', function() {\n        it('should output usage info', function() {\n            cli.argv(argv.concat(['create', '--help']));\n            expect(stdout.mostRecentCall.args[0]).toMatch(/usage: [\\S]+ create/i);\n        });\n    });\n\n    describe('$ phonegap create -h', function() {\n        it('should output usage info', function() {\n            cli.argv(argv.concat(['create', '-h']));\n            expect(stdout.mostRecentCall.args[0]).toMatch(/usage: [\\S]+ create/i);\n        });\n    });\n});\n\n/*\n * Specification: $ phonegap create <path>\n */\n\ndescribe('phonegap create <path>', function() {\n    beforeEach(function() {\n        cli = new CLI();\n        argv = ['node', '/usr/local/bin/phonegap'];\n        spyOn(process.stdout, 'write');\n        spyOn(phonegap, 'create');\n    });\n\n    describe('$ phonegap create ./my-app', function() {\n        it('should try to create the project', function() {\n            cli.argv(argv.concat(['create', './my-app']));\n            expect(phonegap.create).toHaveBeenCalledWith({\n                path: './my-app',\n                id: undefined,\n                name: undefined,\n                config: {},\n                'copy-from': undefined,\n                'link-to': undefined\n            },\n            jasmine.any(Function));\n        });\n    });\n\n    describe('$ phonegap create ./my-app com.example.app', function() {\n        it('should try to create the project', function() {\n            cli.argv(argv.concat(['create', './my-app', 'com.example.app']));\n            expect(phonegap.create).toHaveBeenCalledWith({\n                path: './my-app',\n                id: 'com.example.app',\n                name: undefined,\n                config: {},\n                'copy-from': undefined,\n                'link-to': undefined\n            },\n            jasmine.any(Function));\n        });\n    });\n\n    describe('$ phonegap create ./my-app com.example.app \"My App\"', function() {\n        it('should try to create the project', function() {\n            cli.argv(argv.concat(['create', './my-app', 'com.example.app', 'My App']));\n            expect(phonegap.create).toHaveBeenCalledWith({\n                path: './my-app',\n                id: 'com.example.app',\n                name: 'My App',\n                config: {},\n                'copy-from': undefined,\n                'link-to': undefined\n            },\n            jasmine.any(Function));\n        });\n    });\n\n    describe('$ phonegap create ./my-app com.example.app \"My App\" \"{ \\\\\"lib\\\\\": { \\\\\"www\\\\\": { \\\\\"id\\\\\": \\\\\"com.example.app\\\\\", \\\\\"version\\\\\": \\\\\"1.0.0\\\\\", \\\\\"uri\\\\\": \\\\\"http://example.com/app.tar.gz\\\\\" } } }\"', function() {\n        it('should try to create the project', function() {\n            cli.argv(argv.concat([\n                'create',\n                './my-app',\n                'com.example.app',\n                'My App',\n                '{ \"lib\": { \"www\": { \"id\": \"com.example.app\", \"version\": \"1.0.0\", \"uri\": \"http://example.com/app.tar.gz\" } } }'\n            ]));\n            expect(phonegap.create).toHaveBeenCalledWith({\n                path: './my-app',\n                id: 'com.example.app',\n                name: 'My App',\n                config: {\n                    lib: {\n                        www: {\n                            id: 'com.example.app',\n                            version: '1.0.0',\n                            uri: 'http://example.com/app.tar.gz'\n                        }\n                    }\n                },\n                'copy-from': undefined,\n                'link-to': undefined\n            },\n            jasmine.any(Function));\n        });\n    });\n\n    describe('$ phonegap create ./my-app --id com.example.app', function() {\n        it('should try to create the project', function() {\n            cli.argv(argv.concat(['create', './my-app', '--id', 'com.example.app']));\n            expect(phonegap.create).toHaveBeenCalledWith({\n                path: './my-app',\n                id: 'com.example.app',\n                name: undefined,\n                config: {},\n                'copy-from': undefined,\n                'link-to': undefined\n            },\n            jasmine.any(Function));\n        });\n    });\n\n    describe('$ phonegap create ./my-app -i com.example.app', function() {\n        it('should try to create the project', function() {\n            cli.argv(argv.concat(['create', './my-app', '-i', 'com.example.app']));\n            expect(phonegap.create).toHaveBeenCalledWith({\n                path: './my-app',\n                id: 'com.example.app',\n                name: undefined,\n                config: {},\n                'copy-from': undefined,\n                'link-to': undefined\n            },\n            jasmine.any(Function));\n        });\n    });\n\n    describe('$ phonegap create ./my-app --name \"My App\"', function() {\n        it('should try to create the project', function() {\n            cli.argv(argv.concat(['create', './my-app', '--name', 'My App']));\n            expect(phonegap.create).toHaveBeenCalledWith({\n                path: './my-app',\n                id: undefined,\n                name: 'My App',\n                config: {},\n                'copy-from': undefined,\n                'link-to': undefined\n            },\n            jasmine.any(Function));\n        });\n    });\n\n    describe('$ phonegap create ./my-app -n \"My App\"', function() {\n        it('should try to create the project', function() {\n            cli.argv(argv.concat(['create', './my-app', '-n', 'My App']));\n            expect(phonegap.create).toHaveBeenCalledWith({\n                path: './my-app',\n                id: undefined,\n                name: 'My App',\n                config: {},\n                'copy-from': undefined,\n                'link-to': undefined\n            },\n            jasmine.any(Function));\n        });\n    });\n\n    describe('$ phonegap create ./my-app --id com.example.app --name \"My App\"', function() {\n        it('should try to create the project', function() {\n            cli.argv(argv.concat([\n                'create', './my-app',\n                '--id', 'com.example.app',\n                '--name', 'My App'\n            ]));\n            expect(phonegap.create).toHaveBeenCalledWith({\n                path: './my-app',\n                id: 'com.example.app',\n                name: 'My App',\n                config: {},\n                'copy-from': undefined,\n                'link-to': undefined\n            },\n            jasmine.any(Function));\n        });\n    });\n\n    describe('$ phonegap create ./my-app -i com.example.app -n \"My App\"', function() {\n        it('should try to create the project', function() {\n            cli.argv(argv.concat([\n                'create', './my-app',\n                '-i', 'com.example.app',\n                '-n', 'My App'\n            ]));\n            expect(phonegap.create).toHaveBeenCalledWith({\n                path: './my-app',\n                id: 'com.example.app',\n                name: 'My App',\n                config: {},\n                'copy-from': undefined,\n                'link-to': undefined\n            },\n            jasmine.any(Function));\n        });\n    });\n\n    describe('$ phonegap create ./my-app --copy-from http://example.com/app.tar.gz', function() {\n        it('should try to create the project', function() {\n            cli.argv(argv.concat([\n                'create', './my-app',\n                '--copy-from', 'http://example.com/app.tar.gz'\n            ]));\n            expect(phonegap.create).toHaveBeenCalledWith({\n                path: './my-app',\n                id: undefined,\n                name: undefined,\n                config: {},\n                'copy-from': 'http://example.com/app.tar.gz',\n                'link-to': undefined\n            },\n            jasmine.any(Function));\n        });\n    });\n\n    describe('$ phonegap create ./my-app -src http://example.com/app.tar.gz', function() {\n        it('should try to create the project', function() {\n            cli.argv(argv.concat([\n                'create', './my-app',\n                '-src', 'http://example.com/app.tar.gz'\n            ]));\n            expect(phonegap.create).toHaveBeenCalledWith({\n                path: './my-app',\n                id: undefined,\n                name: undefined,\n                config: {},\n                'copy-from': 'http://example.com/app.tar.gz',\n                'link-to': undefined\n            },\n            jasmine.any(Function));\n        });\n    });\n\n    describe('$ phonegap create ./my-app --link-to path/to/an-app', function() {\n        it('should try to create the project', function() {\n            cli.argv(argv.concat([\n                'create', './my-app',\n                '--link-to', 'path/to/an-app'\n            ]));\n            expect(phonegap.create).toHaveBeenCalledWith({\n                path: './my-app',\n                id: undefined,\n                name: undefined,\n                config: {},\n                'copy-from': undefined,\n                'link-to': 'path/to/an-app'\n            },\n            jasmine.any(Function));\n        });\n    });\n\n    describe('$ phonegap create ./my-app --template hello-world', function() {\n        it('should try to create the project with template', function() {\n            cli.argv(argv.concat([\n                'create', './my-app',\n                '--template', 'hello-world'\n            ]));\n            expect(phonegap.create).toHaveBeenCalledWith({\n                path: './my-app',\n                id: undefined,\n                name: undefined,\n                config: {},\n                'copy-from': undefined,\n                'link-to': undefined,\n                template: 'hello-world'\n            },\n            jasmine.any(Function));\n        });\n    });\n\n    describe('$ phonegap create ./my-app --recipe hello-world', function() {\n        it('should try to create the project with template', function() {\n            cli.argv(argv.concat([\n                'create', './my-app',\n                '--recipe', 'hello-world'\n            ]));\n            expect(phonegap.create).toHaveBeenCalledWith({\n                path: './my-app',\n                id: undefined,\n                name: undefined,\n                config: {},\n                'copy-from': undefined,\n                'link-to': undefined,\n                template: 'hello-world'\n            },\n            jasmine.any(Function));\n        });\n    });\n});\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/spec/cli/help.spec.js":"/*\n * Module dependencies.\n */\n\nvar CLI = require('../../lib/cli'),\n    argv,\n    cli;\n\n/*\n * Specification: $ phonegap help\n */\n\ndescribe('phonegap', function() {\n    beforeEach(function() {\n        cli = new CLI();\n        argv = ['node', '/usr/local/bin/phonegap'];\n        spyOn(process.stdout, 'write');\n        spyOn(process.stderr, 'write');\n    });\n\n    it('should output the usage information when invoked with no arguments eg $ phonegap', function() {\n        cli.argv(argv);\n        expect(process.stdout.write.mostRecentCall.args[0]).toMatch(/usage:/i);\n    });\n\n    it('should output the usage information when invoked with help argument eg $ phonegap help', function() {\n        cli.argv(argv.concat(['help']));\n        expect(process.stdout.write.mostRecentCall.args[0]).toMatch(/usage:/i);\n    });\n\n    it('should output the usage information when invoked with help flag eg $ phonegap --help', function() {\n        cli.argv(argv.concat(['--help']));\n        expect(process.stdout.write.mostRecentCall.args[0]).toMatch(/usage:/i);\n    });\n\n    it('should output the usage information when invoked with abbreviated help flag $ phonegap -h', function() {\n        cli.argv(argv.concat(['-h']));\n        expect(process.stdout.write.mostRecentCall.args[0]).toMatch(/usage:/i);\n    });\n\n    it('should output the help usage information when invoked with help eg $ phonegap help help', function() {\n        cli.argv(argv.concat(['help', 'help']));\n        expect(process.stdout.write.mostRecentCall.args[0]).toMatch(/usage:/i);\n    });\n\n    it('should output the help usage information when invoked with help eg $ phonegap help --help', function() {\n        cli.argv(argv.concat(['help', '--help']));\n        expect(process.stdout.write.mostRecentCall.args[0]).toMatch(/usage:/i);\n    });\n\n    it('should output the help usage information when invoked with help eg $ phonegap help -h', function() {\n        cli.argv(argv.concat(['help', '-h']));\n        expect(process.stdout.write.mostRecentCall.args[0]).toMatch(/usage:/i);\n    });\n\n    it('should remove the .js extension from the binary (windows-specific)', function() {\n        argv = ['node', '/user/local/bin/phonegap.js'];\n        cli.argv(argv.concat(['help']));\n        expect(process.stdout.write.mostRecentCall.args[0]).toMatch(/usage: phonegap/i);\n        expect(process.stdout.write.mostRecentCall.args[0]).not.toMatch('phonegap.js');\n    });\n});\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/spec/cli/install.spec.js":"/*\n * Module dependencies.\n */\n\nvar CLI = require('../../lib/cli'),\n    argv,\n    cli,\n    stdout;\n\n/*\n * Specification: phonegap help install\n */\n\ndescribe('phonegap help install', function() {\n    beforeEach(function() {\n        cli = new CLI();\n        argv = ['node', '/usr/local/bin/phonegap'];\n        spyOn(process.stdout, 'write');\n        spyOn(process.stderr, 'write');\n        stdout = process.stdout.write;\n    });\n\n    describe('$ phonegap help', function() {\n        it('should include the command', function() {\n            cli.argv(argv.concat(['help']));\n            expect(stdout.mostRecentCall.args[0]).toMatch(/\\r?\\n\\s+install <platforms>.*\\r?\\n/i);\n        });\n    });\n\n    describe('$ phonegap install', function() {\n        it('should output usage info', function() {\n            cli.argv(argv.concat(['install']));\n            expect(stdout.mostRecentCall.args[0]).toMatch(/usage: [\\S]+ install \\[<platforms>\\]/i);\n        });\n    });\n\n    describe('$ phonegap help install', function() {\n        it('should output usage info', function() {\n            cli.argv(argv.concat(['help', 'install']));\n            expect(stdout.mostRecentCall.args[0]).toMatch(/usage: [\\S]+ install \\[<platforms>\\]/i);\n        });\n    });\n\n    describe('$ phonegap install help', function() {\n        it('should output usage info', function() {\n            cli.argv(argv.concat(['install', 'help']));\n            expect(stdout.mostRecentCall.args[0]).toMatch(/usage: [\\S]+ install \\[<platforms>\\]/i);\n        });\n    });\n\n    describe('$ phonegap install --help', function() {\n        it('should output usage info', function() {\n            cli.argv(argv.concat(['install', '--help']));\n            expect(stdout.mostRecentCall.args[0]).toMatch(/usage: [\\S]+ install \\[<platforms>\\]/i);\n        });\n    });\n\n    describe('$ phonegap install -h', function() {\n        it('should output usage info', function() {\n            cli.argv(argv.concat(['install', '-h']));\n            expect(stdout.mostRecentCall.args[0]).toMatch(/usage: [\\S]+ install \\[<platforms>\\]/i);\n        });\n    });\n});\n\n/*\n * Specification: phonegap install <platform>\n */\n\ndescribe('phonegap install <platform>', function() {\n    beforeEach(function() {\n        cli = new CLI();\n        argv = ['node', '/usr/local/bin/phonegap'];\n        spyOn(cli, 'cordova');\n        spyOn(process.stdout, 'write');\n        stdout = process.stdout.write;\n    });\n\n    describe('$ phonegap install android', function() {\n        it('should delegate to `cordova run`', function() {\n            cli.argv(argv.concat(['install', 'android']));\n            expect(cli.cordova).toHaveBeenCalled();\n        });\n\n        it('should emit a deprecation message', function() {\n            cli.argv(argv.concat(['install', 'android']));\n            expect(stdout.calls[0].args[0]).toMatch('DEPRECATED');\n        });\n    });\n});\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/spec/cli/local.spec.js":"/*\n * Module dependencies.\n */\n\nvar CLI = require('../../lib/cli'),\n    argv,\n    cli,\n    stdout;\n\n/*\n * Specification: $ phonegap help local\n */\n\ndescribe('phonegap help local', function() {\n    beforeEach(function() {\n        cli = new CLI();\n        argv = ['node', '/usr/local/bin/phonegap'];\n        spyOn(process.stdout, 'write');\n        spyOn(process.stderr, 'write');\n        stdout = process.stdout.write;\n    });\n\n    describe('$ phonegap help', function() {\n        it('should include the command', function() {\n            cli.argv(argv.concat(['help']));\n            expect(stdout.mostRecentCall.args[0]).toMatch(/\\r?\\n\\s+local \\[command\\].*\\r?\\n/i);\n        });\n    });\n\n    describe('$ phonegap local', function() {\n        it('should output usage info', function() {\n            cli.argv(argv.concat(['local']));\n            expect(stdout.mostRecentCall.args[0]).toMatch(/usage: [\\S]+ local/i);\n        });\n    });\n\n    describe('$ phonegap help local', function() {\n        it('should output usage info', function() {\n            cli.argv(argv.concat(['help', 'local']));\n            expect(stdout.mostRecentCall.args[0]).toMatch(/usage: [\\S]+ local/i);\n        });\n    });\n\n    describe('$ phonegap local help', function() {\n        it('should output usage info', function() {\n            cli.argv(argv.concat(['local', 'help']));\n            expect(stdout.mostRecentCall.args[0]).toMatch(/usage: [\\S]+ local/i);\n        });\n    });\n\n    describe('$ phonegap local --help', function() {\n        it('should output usage info', function() {\n            cli.argv(argv.concat(['local', '--help']));\n            expect(stdout.mostRecentCall.args[0]).toMatch(/usage: [\\S]+ local/i);\n        });\n    });\n\n    describe('$ phonegap local -h', function() {\n        it('should output usage info', function() {\n            cli.argv(argv.concat(['local', '-h']));\n            expect(stdout.mostRecentCall.args[0]).toMatch(/usage: [\\S]+ local/i);\n        });\n    });\n});\n\n/*\n * Specification: $ phonegap local [command]\n */\n\ndescribe('phonegap local <command>', function() {\n    beforeEach(function() {\n        cli = new CLI();\n        argv = ['node', '/usr/local/bin/phonegap'];\n        spyOn(cli, 'cordova');\n        spyOn(process.stdout, 'write');\n        stdout = process.stdout.write;\n    });\n\n    it('should redirect to cordova', function() {\n        cli.argv(argv.concat(['local', 'build', 'ios', 'android', '--verbose']));\n        ['cordova', 'build', 'ios', 'android', '--verbose'].forEach(function(arg) {\n            expect(cli.cordova.mostRecentCall.args[0].processArgv).toContain(arg);\n        });\n    });\n\n    it('should emit a deprecation message', function() {\n        cli.argv(argv.concat(['local', 'build', 'ios', 'android', '--verbose']));\n        expect(stdout.calls[0].args[0]).toMatch('DEPRECATED');\n    });\n\n    describe('install command', function() {\n        it('should delegate to `phonegap run`', function() {\n            cli.argv(argv.concat(['local', 'run', 'ios']));\n            ['cordova', 'run', 'ios'].forEach(function(arg) {\n                expect(cli.cordova.mostRecentCall.args[0].processArgv).toContain(arg);\n            });\n        });\n    });\n});\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/spec/cli/push.spec.js":"/*\n * Module dependencies.\n */\n\nvar phonegap = require('../../lib/main'),\n    CLI = require('../../lib/cli'),\n    argv,\n    cli;\n\n/*\n * Specification: $ phonegap version\n */\n\ndescribe('phonegap push', function() {\n    beforeEach(function() {\n        cli = new CLI();\n        argv = ['node', '/usr/local/bin/phonegap'];\n        spyOn(process.stdout, 'write');\n        spyOn(process.stderr, 'write');\n        spyOn(phonegap, 'version').andReturn({\n            npm: '2.8.0-0.10.6',\n            module: '0.10.6',\n            phonegap: '2.8.0'\n        });\n    });\n\n    describe('$ phonegap help', function() {\n        it('outputs info on the version command', function() {\n            cli.argv(argv.concat(['help']));\n            expect(process.stdout.write.mostRecentCall.args[0])\n                .toMatch(/Commands:[\\w\\W]*\\s+version/i);\n        });\n    });\n\n    describe('$ phonegap version', function() {\n        it('should output with the format x.x.x', function() {\n            cli.argv(argv.concat(['version']));\n            expect(process.stdout.write.mostRecentCall.args[0]).toMatch(/\\d+\\.\\d+\\.\\d+/);\n        });\n    });\n\n    describe('$ phonegap --version', function() {\n        it('should output with the format x.x.x', function() {\n            cli.argv(argv.concat(['--version']));\n            expect(process.stdout.write.mostRecentCall.args[0]).toMatch(/\\d+\\.\\d+\\.\\d+/);\n        });\n    });\n\n    describe('$ phonegap -v', function() {\n        it('should output with the format x.x.x', function() {\n            cli.argv(argv.concat(['-v']));\n            expect(process.stdout.write.mostRecentCall.args[0]).toMatch(/\\d+\\.\\d+\\.\\d+/);\n        });\n    });\n});\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/spec/cli/remote.install.spec.js":"/*\n * Module dependencies.\n */\n\nvar phonegap = require('../../lib/main'),\n    CLI = require('../../lib/cli'),\n    argv,\n    cli,\n    stdout;\n\n/*\n * Specification: $ phonegap help remote install\n */\n\ndescribe('phonegap help remote install', function() {\n    beforeEach(function() {\n        cli = new CLI();\n        argv = ['node', '/usr/local/bin/phonegap'];\n        spyOn(phonegap.remote, 'install');\n        spyOn(process.stdout, 'write');\n        spyOn(process.stderr, 'write');\n        stdout = process.stdout.write;\n    });\n\n    describe('$ phonegap help remote', function() {\n        it('should include the command', function() {\n            cli.argv(argv.concat(['help', 'remote']));\n            expect(stdout.mostRecentCall.args[0]).toMatch(/\\r?\\n\\s+install <platform>.*\\r?\\n/i);\n        });\n    });\n\n    describe('$ phonegap remote install', function() {\n        it('outputs usage info', function() {\n            cli.argv(argv.concat(['remote', 'install']));\n            expect(stdout.mostRecentCall.args[0]).toMatch(/usage: [\\S]+ remote install/i);\n        });\n    });\n\n    describe('$ phonegap help remote install', function() {\n        it('should output usage info', function() {\n            cli.argv(argv.concat(['help', 'remote', 'install']));\n            expect(stdout.mostRecentCall.args[0]).toMatch(/usage: [\\S]+ remote install/i);\n        });\n    });\n\n    describe('$ phonegap remote install help', function() {\n        it('should output usage info', function() {\n            cli.argv(argv.concat(['remote', 'install', 'help']));\n            expect(stdout.mostRecentCall.args[0]).toMatch(/usage: [\\S]+ remote install/i);\n        });\n    });\n\n    describe('$ phonegap remote install --help', function() {\n        it('should output usage info', function() {\n            cli.argv(argv.concat(['remote', 'install', '--help']));\n            expect(stdout.mostRecentCall.args[0]).toMatch(/usage: [\\S]+ remote install/i);\n        });\n    });\n\n    describe('$ phonegap remote install -h', function() {\n        it('should output usage info', function() {\n            cli.argv(argv.concat(['remote', 'install', '-h']));\n            expect(stdout.mostRecentCall.args[0]).toMatch(/usage: [\\S]+ remote install/i);\n        });\n    });\n});\n\n/*\n * Specification: $ phonegap remote install <platform>\n */\n\ndescribe('phonegap remote install <platform>', function() {\n    beforeEach(function() {\n        cli = new CLI();\n        argv = ['node', '/usr/local/bin/phonegap'];\n        spyOn(process.stdout, 'write');\n        spyOn(phonegap.remote, 'install');\n    });\n\n    describe('$ phonegap remote install android', function() {\n        it('should try to install the app', function() {\n            cli.argv(argv.concat(['remote', 'install', 'android']));\n            expect(phonegap.remote.install).toHaveBeenCalledWith(\n                jasmine.objectContaining({ platforms: ['android'] }),\n                jasmine.any(Function)\n            );\n        });\n\n        describe('successful install', function() {\n            beforeEach(function() {\n                phonegap.remote.install.andCallFake(function(opts, callback) {\n                    callback(null, {});\n                });\n            });\n\n            it('should call callback without an error', function(done) {\n                cli.argv(argv.concat(['remote', 'install', 'android']), function(e, data) {\n                    expect(e).toBeNull();\n                    done();\n                });\n            });\n\n            it('should call callback with a data object', function(done) {\n                cli.argv(argv.concat(['remote', 'install', 'android']), function(e, data) {\n                    expect(data).toEqual({});\n                    done();\n                });\n            });\n        });\n\n        describe('failed install', function() {\n            beforeEach(function() {\n                phonegap.remote.install.andCallFake(function(opts, callback) {\n                    callback(new Error('Could not connect to PhoneGap Build.'));\n                });\n            });\n\n            it('should call callback with an error', function(done) {\n                cli.argv(argv.concat(['remote', 'install', 'android']), function(e, data) {\n                    expect(e).toEqual(jasmine.any(Error));\n                    done();\n                });\n            });\n        });\n    });\n});\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/spec/cli/remote.login.spec.js":"/*\n * Module dependencies.\n */\n\nvar phonegap = require('../../lib/main'),\n    console = require('../../lib/cli/util/console'),\n    CLI = require('../../lib/cli'),\n    argv,\n    cli,\n    stdout;\n\n/*\n * Specification: $ phonegap help remote login\n */\n\ndescribe('phonegap help remote login', function() {\n    beforeEach(function() {\n        cli = new CLI();\n        argv = ['node', '/usr/local/bin/phonegap'];\n        spyOn(process.stdout, 'write');\n        spyOn(process.stderr, 'write');\n        stdout = process.stdout.write;\n    });\n\n    describe('$ phonegap help remote', function() {\n        it('should include the command', function() {\n            cli.argv(argv.concat(['help', 'remote']));\n            expect(stdout.mostRecentCall.args[0]).toMatch(/\\r?\\n\\s+login.*\\r?\\n/i);\n        });\n    });\n\n    describe('$ phonegap help remote login', function() {\n        it('should output usage info', function() {\n            cli.argv(argv.concat(['help', 'remote', 'login']));\n            expect(stdout.mostRecentCall.args[0]).toMatch(/usage: [\\S]+ remote login/i);\n        });\n    });\n\n    describe('$ phonegap remote login help', function() {\n        it('should output usage info', function() {\n            cli.argv(argv.concat(['remote', 'login', 'help']));\n            expect(stdout.mostRecentCall.args[0]).toMatch(/usage: [\\S]+ remote login/i);\n        });\n    });\n\n    describe('$ phonegap remote login --help', function() {\n        it('should output usage info', function() {\n            cli.argv(argv.concat(['remote', 'login', '--help']));\n            expect(stdout.mostRecentCall.args[0]).toMatch(/usage: [\\S]+ remote login/i);\n        });\n    });\n\n    describe('$ phonegap remote login -h', function() {\n        it('should output usage info', function() {\n            cli.argv(argv.concat(['remote', 'login', '-h']));\n            expect(stdout.mostRecentCall.args[0]).toMatch(/usage: [\\S]+ remote login/i);\n        });\n    });\n});\n\n/*\n * Specification: $ phonegap remote login\n */\n\ndescribe('phonegap remote login', function() {\n    beforeEach(function() {\n        cli = new CLI();\n        argv = ['node', '/usr/local/bin/phonegap'];\n        spyOn(process.stdout, 'write');\n        spyOn(phonegap.remote, 'login');\n        spyOn(console, 'prompt');\n    });\n\n    describe('$ phonegap remote login', function() {\n        it('should try to login', function() {\n            cli.argv(argv.concat(['remote', 'login']));\n            expect(phonegap.remote.login).toHaveBeenCalledWith(\n                jasmine.any(Object),\n                jasmine.any(Function)\n            );\n        });\n\n        describe('successful login', function() {\n            beforeEach(function() {\n                phonegap.remote.login.andCallFake(function(argv, callback) {\n                    phonegap.emit('login');\n                    callback(null, {});\n                });\n            });\n\n            it('should prompt for username and password', function() {\n                cli.argv(argv.concat(['remote', 'login']));\n                expect(console.prompt).toHaveBeenCalled();\n            });\n\n            it('should trigger callback without an error', function(done) {\n                cli.argv(argv.concat(['remote', 'login']), function(e, api) {\n                    expect(e).toBeNull();\n                    done();\n                });\n            });\n\n            it('should trigger callback with API object', function(done) {\n                cli.argv(argv.concat(['remote', 'login']), function(e, api) {\n                    expect(api).toBeDefined();\n                    done();\n                });\n            });\n        });\n\n        describe('failed login', function() {\n            beforeEach(function() {\n                phonegap.remote.login.andCallFake(function(argv, callback) {\n                    callback(new Error('Invalid password'));\n                });\n            });\n\n            it('should trigger callback with an error', function(done) {\n                cli.argv(argv.concat(['remote', 'login']), function(e, api) {\n                    expect(e).toBeDefined();\n                    done();\n                });\n            });\n\n            it('should trigger callback without an API object', function(done) {\n                cli.argv(argv.concat(['remote', 'login']), function(e, api) {\n                    expect(api).not.toBeDefined();\n                    done();\n                });\n            });\n        });\n    });\n\n    describe('$ phonegap remote login --username zelda', function() {\n        it('should try to login', function() {\n            cli.argv(argv.concat(['remote', 'login', '--username', 'zelda']));\n            expect(phonegap.remote.login).toHaveBeenCalledWith(\n                jasmine.objectContaining({ username: 'zelda', password: undefined }),\n                jasmine.any(Function)\n            );\n        });\n    });\n\n    describe('$ phonegap remote login -u zelda', function() {\n        it('should try to login', function() {\n            cli.argv(argv.concat(['remote', 'login', '-u', 'zelda']));\n            expect(phonegap.remote.login).toHaveBeenCalledWith(\n                jasmine.objectContaining({ username: 'zelda', password: undefined }),\n                jasmine.any(Function)\n            );\n        });\n    });\n\n    describe('$ phonegap remote login --password tr1force', function() {\n        it('should try to login', function() {\n            cli.argv(argv.concat(['remote', 'login', '--password', 'tr1force']));\n            expect(phonegap.remote.login).toHaveBeenCalledWith(\n                jasmine.objectContaining({ username: undefined, password: 'tr1force' }),\n                jasmine.any(Function)\n            );\n        });\n    });\n\n    describe('$ phonegap remote login -p tr1force', function() {\n        it('should try to login', function() {\n            cli.argv(argv.concat(['remote', 'login', '-p', 'tr1force']));\n            expect(phonegap.remote.login).toHaveBeenCalledWith(\n                jasmine.objectContaining({ username: undefined, password: 'tr1force' }),\n                jasmine.any(Function)\n            );\n        });\n    });\n\n    describe('$ phonegap remote login --username zelda --password tr1force', function() {\n        it('should try to login', function() {\n            cli.argv(argv.concat(['remote', 'login', '--username', 'zelda', '--password', 'tr1force']));\n            expect(phonegap.remote.login).toHaveBeenCalledWith(\n                jasmine.objectContaining({ username: 'zelda', password: 'tr1force' }),\n                jasmine.any(Function)\n            );\n        });\n    });\n\n    describe('login event', function() {\n        describe('no username and no password', function() {\n            it('should prompt for username', function() {\n                phonegap.emit('login', {}, function() {});\n                expect(console.prompt).toHaveBeenCalled();\n                expect(console.prompt.mostRecentCall.args[0].override.username).toBeUndefined();\n            });\n\n            it('should prompt for password', function() {\n                phonegap.emit('login', {}, function() {});\n                expect(console.prompt).toHaveBeenCalled();\n                expect(console.prompt.mostRecentCall.args[0].override.password).toBeUndefined();\n            });\n        });\n\n        describe('with username and no password', function() {\n            it('should not prompt for username', function() {\n                phonegap.emit('login', { username: 'zelda' }, function() {});\n                expect(console.prompt).toHaveBeenCalled();\n                expect(console.prompt.mostRecentCall.args[0].override.username).toEqual('zelda');\n            });\n\n            it('should prompt for password', function() {\n                phonegap.emit('login', { username: 'zelda' }, function() {});\n                expect(console.prompt).toHaveBeenCalled();\n                expect(console.prompt.mostRecentCall.args[0].override.password).toBeUndefined();\n            });\n        });\n\n        describe('no username and with password', function() {\n            it('should prompt for username', function() {\n                phonegap.emit('login', { password: 'tr1force' }, function() {});\n                expect(console.prompt).toHaveBeenCalled();\n                expect(console.prompt.mostRecentCall.args[0].override.username).toBeUndefined();\n            });\n\n            it('should not prompt for password', function() {\n                phonegap.emit('login', { password: 'tr1force' }, function() {});\n                expect(console.prompt).toHaveBeenCalled();\n                expect(console.prompt.mostRecentCall.args[0].override.password).toEqual('tr1force');\n            });\n        });\n\n        describe('with username and with password', function() {\n            it('should not prompt for username', function() {\n                phonegap.emit('login',\n                    { username: 'zelda', password: 'tr1force' },\n                    function() {}\n                );\n                expect(console.prompt).toHaveBeenCalled();\n                expect(console.prompt.mostRecentCall.args[0].override.username).toEqual('zelda');\n            });\n\n            it('should not prompt for password', function() {\n                phonegap.emit('login',\n                    { username: 'zelda', password: 'tr1force' },\n                    function() {}\n                );\n                expect(console.prompt).toHaveBeenCalled();\n                expect(console.prompt.mostRecentCall.args[0].override.password).toEqual('tr1force');\n            });\n        });\n\n        describe('successful prompt', function() {\n            beforeEach(function() {\n                console.prompt.andCallFake(function(options, callback) {\n                    callback(null, { username: 'zelda', password: 'tr1force' });\n                });\n            });\n\n            it('should trigger callback without an error', function(done) {\n                phonegap.emit('login', {}, function(e, data) {\n                    expect(e).toBeNull();\n                    done();\n                });\n            });\n\n            it('should trigger callback with username and password', function(done) {\n                phonegap.emit('login', {}, function(e, data) {\n                    expect(data).toEqual({ username: 'zelda', password: 'tr1force' });\n                    done();\n                });\n            });\n        });\n\n        describe('failed prompt', function() {\n            beforeEach(function() {\n                console.prompt.andCallFake(function(options, callback) {\n                    callback(new Error('prompt was cancelled'));\n                });\n            });\n\n            it('should trigger callback with an error', function(done) {\n                phonegap.emit('login', {}, function(e, data) {\n                    expect(e).toEqual(jasmine.any(Error));\n                    done();\n                });\n            });\n        });\n    });\n});\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/spec/cli/remote.logout.spec.js":"/*\n * Module dependencies.\n */\n\nvar phonegap = require('../../lib/main'),\n    CLI = require('../../lib/cli'),\n    argv,\n    cli,\n    stdout;\n\n/*\n * Specification: $ phonegap help remote logout\n */\n\ndescribe('phonegap help remote logout', function() {\n    beforeEach(function() {\n        cli = new CLI();\n        argv = ['node', '/usr/local/bin/phonegap'];\n        spyOn(process.stdout, 'write');\n        spyOn(process.stderr, 'write');\n        stdout = process.stdout.write;\n    });\n\n    describe('$ phonegap help remote', function() {\n        it('should include the command', function() {\n            cli.argv(argv.concat(['help', 'remote']));\n            expect(stdout.mostRecentCall.args[0]).toMatch(/\\r?\\n\\s+logout.*\\r?\\n/i);\n        });\n    });\n\n    describe('$ phonegap help remote logout', function() {\n        it('should output usage info', function() {\n            cli.argv(argv.concat(['help', 'remote', 'logout']));\n            expect(stdout.mostRecentCall.args[0]).toMatch(/usage: [\\S]+ remote logout/i);\n        });\n    });\n\n    describe('$ phonegap remote logout help', function() {\n        it('should output usage info', function() {\n            cli.argv(argv.concat(['remote', 'logout', 'help']));\n            expect(stdout.mostRecentCall.args[0]).toMatch(/usage: [\\S]+ remote logout/i);\n        });\n    });\n\n    describe('$ phonegap remote logout --help', function() {\n        it('should output usage info', function() {\n            cli.argv(argv.concat(['remote', 'logout', '--help']));\n            expect(stdout.mostRecentCall.args[0]).toMatch(/usage: [\\S]+ remote logout/i);\n        });\n    });\n\n    describe('$ phonegap remote logout -h', function() {\n        it('should output usage info', function() {\n            cli.argv(argv.concat(['remote', 'logout', '-h']));\n            expect(stdout.mostRecentCall.args[0]).toMatch(/usage: [\\S]+ remote logout/i);\n        });\n    });\n});\n/*\n * Specification: $ phonegap remote logout\n */\n\ndescribe('phonegap remote logout', function() {\n    beforeEach(function() {\n        cli = new CLI();\n        argv = ['node', '/usr/local/bin/phonegap'];\n        spyOn(phonegap.remote, 'logout');\n        spyOn(process.stdout, 'write');\n    });\n\n    describe('$ phonegap remote logout', function() {\n        it('should try to logout', function() {\n            cli.argv(argv.concat(['remote', 'logout']));\n            expect(phonegap.remote.logout).toHaveBeenCalled();\n        });\n\n        describe('successful logout', function() {\n            beforeEach(function() {\n                phonegap.remote.logout.andCallFake(function(argv, callback) {\n                    callback(null);\n                });\n            });\n\n            it('should not return an error', function(done) {\n                cli.argv(argv.concat(['remote', 'logout']), function(e) {\n                    expect(e).toBeNull();\n                    done();\n                });\n            });\n        });\n\n        describe('failed logout', function() {\n            beforeEach(function() {\n                phonegap.remote.logout.andCallFake(function(argv, callback) {\n                    callback(new Error('Account does not exist.'));\n                });\n            });\n\n            it('should not return an error', function(done) {\n                cli.argv(argv.concat(['remote', 'logout']), function(e) {\n                    expect(e).not.toBeNull();\n                    done();\n                });\n            });\n        });\n    });\n});\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/spec/cli/remote.run.spec.js":"/*\n * Module dependencies.\n */\n\nvar phonegap = require('../../lib/main'),\n    CLI = require('../../lib/cli'),\n    argv,\n    cli,\n    stdout;\n\n/*\n * Specification: $ phonegap help remote run\n */\n\ndescribe('phonegap help remote run', function() {\n    beforeEach(function() {\n        cli = new CLI();\n        argv = ['node', '/usr/local/bin/phonegap'];\n        spyOn(phonegap.remote, 'run');\n        spyOn(process.stdout, 'write');\n        spyOn(process.stderr, 'write');\n        stdout = process.stdout.write;\n    });\n\n    describe('$ phonegap help remote', function() {\n        it('should include the command', function() {\n            cli.argv(argv.concat(['help', 'remote']));\n            expect(stdout.mostRecentCall.args[0]).toMatch(/\\r?\\n\\s+run <platform>.*\\r?\\n/i);\n        });\n    });\n\n    describe('$ phonegap remote run', function() {\n        it('outputs usage info', function() {\n            cli.argv(argv.concat(['remote', 'run']));\n            expect(stdout.mostRecentCall.args[0]).toMatch(/usage: [\\S]+ remote run/i);\n        });\n    });\n\n    describe('$ phonegap help remote run', function() {\n        it('should output usage info', function() {\n            cli.argv(argv.concat(['help', 'remote', 'run']));\n            expect(stdout.mostRecentCall.args[0]).toMatch(/usage: [\\S]+ remote run/i);\n        });\n    });\n\n    describe('$ phonegap remote run help', function() {\n        it('should output usage info', function() {\n            cli.argv(argv.concat(['remote', 'run', 'help']));\n            expect(stdout.mostRecentCall.args[0]).toMatch(/usage: [\\S]+ remote run/i);\n        });\n    });\n\n    describe('$ phonegap remote run --help', function() {\n        it('should output usage info', function() {\n            cli.argv(argv.concat(['remote', 'run', '--help']));\n            expect(stdout.mostRecentCall.args[0]).toMatch(/usage: [\\S]+ remote run/i);\n        });\n    });\n\n    describe('$ phonegap remote run -h', function() {\n        it('should output usage info', function() {\n            cli.argv(argv.concat(['remote', 'run', '-h']));\n            expect(stdout.mostRecentCall.args[0]).toMatch(/usage: [\\S]+ remote run/i);\n        });\n    });\n});\n\n/*\n * Specification: $ phonegap remote run <platform>\n */\n\ndescribe('phonegap remote run <platform>', function() {\n    beforeEach(function() {\n        cli = new CLI();\n        argv = ['node', '/usr/local/bin/phonegap'];\n        spyOn(process.stdout, 'write');\n        spyOn(phonegap.remote, 'run');\n    });\n\n    describe('$ phonegap remote run android', function() {\n        it('should try to run the project', function() {\n            cli.argv(argv.concat(['remote', 'run', 'android']));\n            expect(phonegap.remote.run).toHaveBeenCalledWith(\n                jasmine.objectContaining({ platforms: ['android'] }),\n                jasmine.any(Function)\n            );\n        });\n\n        describe('successful run', function() {\n            beforeEach(function() {\n                phonegap.remote.run.andCallFake(function(opts, callback) {\n                    callback(null, {});\n                });\n            });\n\n            it('should call callback without an error', function(done) {\n                cli.argv(argv.concat(['remote', 'run', 'android']), function(e, data) {\n                    expect(e).toBeNull();\n                    done();\n                });\n            });\n\n            it('should call callback with a data object', function(done) {\n                cli.argv(argv.concat(['remote', 'run', 'android']), function(e, data) {\n                    expect(data).toEqual({});\n                    done();\n                });\n            });\n        });\n\n        describe('failed run', function() {\n            beforeEach(function() {\n                phonegap.remote.run.andCallFake(function(opts, callback) {\n                    callback(new Error('Could not connect to PhoneGap Build.'));\n                });\n            });\n\n            it('should call callback with an error', function(done) {\n                cli.argv(argv.concat(['remote', 'run', 'android']), function(e, data) {\n                    expect(e).toEqual(jasmine.any(Error));\n                    done();\n                });\n            });\n        });\n    });\n});\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/spec/cli/remote.spec.js":"/*\n * Module dependencies.\n */\n\nvar CLI = require('../../lib/cli'),\n    argv,\n    cli,\n    stdout;\n\n/*\n * Specification: $ phonegap help remote\n */\n\ndescribe('phonegap help remote', function() {\n    beforeEach(function() {\n        cli = new CLI();\n        argv = ['node', '/usr/local/bin/phonegap'];\n        spyOn(process.stdout, 'write');\n        spyOn(process.stderr, 'write');\n        stdout = process.stdout.write;\n    });\n\n    describe('$ phonegap help', function() {\n        it('should include the command', function() {\n            cli.argv(argv.concat(['help']));\n            expect(stdout.mostRecentCall.args[0]).toMatch(/\\r?\\n\\s+remote \\[command\\].*\\r?\\n/i);\n        });\n    });\n\n    describe('$ phonegap remote', function() {\n        it('should output usage info', function() {\n            cli.argv(argv.concat(['remote']));\n            expect(stdout.mostRecentCall.args[0]).toMatch(/usage: [\\S]+ remote/i);\n        });\n    });\n\n    describe('$ phonegap help remote', function() {\n        it('should output usage info', function() {\n            cli.argv(argv.concat(['help', 'remote']));\n            expect(stdout.mostRecentCall.args[0]).toMatch(/usage: [\\S]+ remote/i);\n        });\n    });\n\n    describe('$ phonegap remote help', function() {\n        it('should output usage info', function() {\n            cli.argv(argv.concat(['remote', 'help']));\n            expect(stdout.mostRecentCall.args[0]).toMatch(/usage: [\\S]+ remote/i);\n        });\n    });\n\n    describe('$ phonegap remote --help', function() {\n        it('should output usage info', function() {\n            cli.argv(argv.concat(['remote', '--help']));\n            expect(stdout.mostRecentCall.args[0]).toMatch(/usage: [\\S]+ remote/i);\n        });\n    });\n\n    describe('$ phonegap remote -h', function() {\n        it('should output usage info', function() {\n            cli.argv(argv.concat(['remote', '-h']));\n            expect(stdout.mostRecentCall.args[0]).toMatch(/usage: [\\S]+ remote/i);\n        });\n    });\n});\n\n/*\n * Specification: $ phonegap remote [command]\n */\n\ndescribe('phonegap remote <command>', function() {\n    beforeEach(function() {\n        cli = new CLI();\n        argv = ['node', '/usr/local/bin/phonegap'];\n    });\n\n    describe('unknown command', function() {\n        it('should output the unknown command', function() {\n            spyOn(cli, 'unknown');\n            var noop_cmds = ['remote', 'noop'];\n            cli.argv(argv.concat(noop_cmds));\n            noop_cmds.forEach(function(arg) {\n                expect(cli.unknown.mostRecentCall.args[0].processArgv).toContain(arg);\n            });\n        });\n    });\n});\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/spec/cli/report-issue.spec.js":"\n\nvar CLI = require('../../lib/cli');\n\ndescribe('phonegap report-issue', function() {\n    it('should be defined', function() {\n        var cli = new CLI();\n        expect(cli['report-issue']).toBeDefined();\n    });\n});\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/spec/cli/serve.spec.js":"/*\n * Module dependencies.\n */\n\nvar phonegap = require('../../lib/main'),\n    CLI = require('../../lib/cli'),\n    argv,\n    cli,\n    stdout;\n\n/*\n * Specification: $ phonegap help serve\n */\n\ndescribe('phonegap help serve', function() {\n    beforeEach(function() {\n        cli = new CLI();\n        argv = ['node', '/usr/local/bin/phonegap'];\n        spyOn(phonegap, 'serve');\n        spyOn(process.stdout, 'write');\n        spyOn(process.stderr, 'write');\n        stdout = process.stdout.write;\n    });\n\n    describe('$ phonegap serve help', function() {\n        it('should output usage info', function() {\n            cli.argv(argv.concat(['serve', 'help']));\n            expect(stdout.mostRecentCall.args[0]).toMatch(/usage: [\\S]+ serve/i);\n        });\n    });\n\n    describe('$ phonegap serve --help', function() {\n        it('should output usage info', function() {\n            cli.argv(argv.concat(['serve', '--help']));\n            expect(stdout.mostRecentCall.args[0]).toMatch(/usage: [\\S]+ serve/i);\n        });\n    });\n\n    describe('$ phonegap serve -h', function() {\n        it('should output usage info', function() {\n            cli.argv(argv.concat(['serve', '-h']));\n            expect(stdout.mostRecentCall.args[0]).toMatch(/usage: [\\S]+ serve/i);\n        });\n    });\n});\n\n/*\n * Specification: $ phonegap serve\n */\n\ndescribe('phonegap serve', function() {\n    beforeEach(function() {\n        cli = new CLI();\n        argv = ['node', '/usr/local/bin/phonegap'];\n        spyOn(process.stdout, 'write');\n        spyOn(phonegap, 'serve').andReturn({\n            on: function() {}\n        });\n    });\n\n    describe('$ phonegap serve', function() {\n        it('should connect to phonegap serve', function() {\n            cli.argv(argv.concat(['serve']));\n            expect(phonegap.serve).toHaveBeenCalled();\n        });\n    });\n\n    describe('$ phonegap serve --port 1337', function() {\n        it('should connect to phonegap serve on port 1337', function() {\n            cli.argv(argv.concat(['serve', '--port', '1337']));\n            expect(phonegap.serve).toHaveBeenCalled();\n            expect(phonegap.serve.mostRecentCall.args[0].port).toEqual(1337);\n        });\n    });\n\n    describe('$ phonegap serve -p 1337', function() {\n        it('should connect to phonegap serve on port 1337', function() {\n            cli.argv(argv.concat(['serve', '-p', '1337']));\n            expect(phonegap.serve).toHaveBeenCalled();\n            expect(phonegap.serve.mostRecentCall.args[0].port).toEqual(1337);\n        });\n    });\n\n    describe('$ phonegap serve --browser', function() {\n        it('should add browser platform on serve', function() {\n            cli.argv(argv.concat(['serve', '--browser']));\n            expect(phonegap.serve).toHaveBeenCalled();\n            expect(phonegap.serve.mostRecentCall.args[0].browser).toEqual(true);\n        });\n    });\n});\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/spec/cli/share.spec.js":"/*\n * Module dependencies.\n */\n\nvar phonegap = require('../../lib/main'),\n    CLI = require('../../lib/cli'),\n    argv,\n    cli;\n\n/*\n * Specification: $ phonegap version\n */\n\ndescribe('phonegap share', function() {\n    beforeEach(function() {\n        cli = new CLI();\n        argv = ['node', '/usr/local/bin/phonegap'];\n        spyOn(process.stdout, 'write');\n        spyOn(process.stderr, 'write');\n        spyOn(phonegap, 'version').andReturn({\n            npm: '2.8.0-0.10.6',\n            module: '0.10.6',\n            phonegap: '2.8.0'\n        });\n    });\n\n    describe('$ phonegap help', function() {\n        it('outputs info on the version command', function() {\n            cli.argv(argv.concat(['help']));\n            expect(process.stdout.write.mostRecentCall.args[0])\n                .toMatch(/Commands:[\\w\\W]*\\s+version/i);\n        });\n    });\n\n    describe('$ phonegap version', function() {\n        it('should output with the format x.x.x', function() {\n            cli.argv(argv.concat(['version']));\n            expect(process.stdout.write.mostRecentCall.args[0]).toMatch(/\\d+\\.\\d+\\.\\d+/);\n        });\n    });\n\n    describe('$ phonegap --version', function() {\n        it('should output with the format x.x.x', function() {\n            cli.argv(argv.concat(['--version']));\n            expect(process.stdout.write.mostRecentCall.args[0]).toMatch(/\\d+\\.\\d+\\.\\d+/);\n        });\n    });\n\n    describe('$ phonegap -v', function() {\n        it('should output with the format x.x.x', function() {\n            cli.argv(argv.concat(['-v']));\n            expect(process.stdout.write.mostRecentCall.args[0]).toMatch(/\\d+\\.\\d+\\.\\d+/);\n        });\n    });\n});\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/spec/cli/template.list.spec.js":"/*\n * Module dependencies.\n */\n\nvar phonegap = require('../../lib/main'),\n    CLI = require('../../lib/cli'),\n    argv,\n    cli,\n    stdout;\n\n/*\n * Specification: $ phonegap help template list\n */\n\ndescribe('phonegap help template list', function() {\n    beforeEach(function() {\n        cli = new CLI();\n        argv = ['node', '/usr/local/bin/phonegap'];\n        spyOn(process.stdout, 'write');\n        spyOn(process.stderr, 'write');\n        stdout = process.stdout.write;\n    });\n\n    describe('$ phonegap help template', function() {\n        it('should include the command', function() {\n            cli.argv(argv.concat(['help', 'template']));\n            expect(stdout.mostRecentCall.args[0]).toMatch(/\\r?\\n\\s+list.*\\r?\\n/i);\n        });\n    });\n\n    describe('$ phonegap help template list', function() {\n        it('should output usage info', function() {\n            cli.argv(argv.concat(['help', 'template', 'list']));\n            expect(stdout.mostRecentCall.args[0]).toMatch(/usage: [\\S]+ template list/i);\n        });\n    });\n\n    describe('$ phonegap template list help', function() {\n        it('should output usage info', function() {\n            cli.argv(argv.concat(['template', 'list', 'help']));\n            expect(stdout.mostRecentCall.args[0]).toMatch(/usage: [\\S]+ template list/i);\n        });\n    });\n\n    describe('$ phonegap template list --help', function() {\n        it('should output usage info', function() {\n            cli.argv(argv.concat(['template', 'list', '--help']));\n            expect(stdout.mostRecentCall.args[0]).toMatch(/usage: [\\S]+ template list/i);\n        });\n    });\n\n    describe('$ phonegap template list -h', function() {\n        it('should output usage info', function() {\n            cli.argv(argv.concat(['template', 'list', '-h']));\n            expect(stdout.mostRecentCall.args[0]).toMatch(/usage: [\\S]+ template list/i);\n        });\n    });\n});\n\n/*\n * Specification: $ phonegap template list\n */\n\ndescribe('phonegap template list', function() {\n    beforeEach(function() {\n        cli = new CLI();\n        argv = ['node', '/usr/local/bin/phonegap'];\n        spyOn(phonegap.template, 'list');\n        spyOn(phonegap, 'emit');\n    });\n\n    it('should call phonegap.template.list()', function() {\n        cli.argv(argv.concat(['template', 'list']));\n        expect(phonegap.template.list).toHaveBeenCalled();\n    });\n\n    it('should list each available template', function(done) {\n        var templates = require('../../package.json').templates;\n        phonegap.template.list.andCallThrough();\n        cli.argv(argv.concat(['template', 'list']), function() {\n            expect(phonegap.emit.calls.length).toEqual(\n                Object.keys(templates).length\n            );\n            done();\n        });\n    });\n});\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/spec/cli/template.search.spec.js":"/*\n * Module dependencies.\n */\n\nvar phonegap = require('../../lib/main'),\n    CLI = require('../../lib/cli'),\n    argv,\n    cli,\n    stdout;\n\n/*\n * Specification: $ phonegap help template search\n */\n\ndescribe('phonegap help template search', function() {\n    beforeEach(function() {\n        cli = new CLI();\n        argv = ['node', '/usr/local/bin/phonegap'];\n        spyOn(process.stdout, 'write');\n        spyOn(process.stderr, 'write');\n        stdout = process.stdout.write;\n    });\n\n    describe('$ phonegap help template', function() {\n        it('should include the command', function() {\n            cli.argv(argv.concat(['help', 'template']));\n            expect(stdout.mostRecentCall.args[0]).toMatch(/\\r?\\n\\s+search.*\\r?\\n/i);\n        });\n    });\n\n    describe('$ phonegap help template search', function() {\n        it('should output usage info', function() {\n            cli.argv(argv.concat(['help', 'template', 'search']));\n            expect(stdout.mostRecentCall.args[0]).toMatch(/usage: [\\S]+ template search/i);\n        });\n    });\n\n    describe('$ phonegap template search help', function() {\n        it('should output usage info', function() {\n            cli.argv(argv.concat(['template', 'search', 'help']));\n            expect(stdout.mostRecentCall.args[0]).toMatch(/usage: [\\S]+ template search/i);\n        });\n    });\n\n    describe('$ phonegap template search --help', function() {\n        it('should output usage info', function() {\n            cli.argv(argv.concat(['template', 'search', '--help']));\n            expect(stdout.mostRecentCall.args[0]).toMatch(/usage: [\\S]+ template search/i);\n        });\n    });\n\n    describe('$ phonegap template search -h', function() {\n        it('should output usage info', function() {\n            cli.argv(argv.concat(['template', 'search', '-h']));\n            expect(stdout.mostRecentCall.args[0]).toMatch(/usage: [\\S]+ template search/i);\n        });\n    });\n});\n\n/*\n * Specification: $ phonegap template search\n */\n\ndescribe('phonegap template search', function() {\n    beforeEach(function() {\n        cli = new CLI();\n        argv = ['node', '/usr/local/bin/phonegap'];\n        spyOn(phonegap.template, 'search');\n        spyOn(phonegap, 'emit');\n    });\n\n    it('should call phonegap.template.search()', function() {\n        cli.argv(argv.concat(['template', 'search']));\n        expect(phonegap.template.search).toHaveBeenCalled();\n    });\n});\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/spec/cli/template.spec.js":"/*\n * Module dependencies.\n */\n\nvar CLI = require('../../lib/cli'),\n    argv,\n    cli,\n    stdout;\n\n/*\n * Specification: $ phonegap help template\n */\n\ndescribe('phonegap help template', function() {\n    beforeEach(function() {\n        cli = new CLI();\n        argv = ['node', '/usr/local/bin/phonegap'];\n        spyOn(process.stdout, 'write');\n        spyOn(process.stderr, 'write');\n        stdout = process.stdout.write;\n    });\n\n    describe('$ phonegap help', function() {\n        it('should include the command', function() {\n            cli.argv(argv.concat(['help']));\n            expect(stdout.mostRecentCall.args[0]).toMatch(/\\r?\\n\\s+template.*\\r?\\n/i);\n        });\n    });\n\n    describe('$ phonegap template', function() {\n        it('should output usage info', function() {\n            cli.argv(argv.concat(['template']));\n            expect(stdout.mostRecentCall.args[0]).toMatch(/usage: [\\S]+ template/i);\n        });\n    });\n\n    describe('$ phonegap help template', function() {\n        it('should output usage info', function() {\n            cli.argv(argv.concat(['help', 'template']));\n            expect(stdout.mostRecentCall.args[0]).toMatch(/usage: [\\S]+ template/i);\n        });\n    });\n\n    describe('$ phonegap template help', function() {\n        it('should output usage info', function() {\n            cli.argv(argv.concat(['template', 'help']));\n            expect(stdout.mostRecentCall.args[0]).toMatch(/usage: [\\S]+ template/i);\n        });\n    });\n\n    describe('$ phonegap template --help', function() {\n        it('should output usage info', function() {\n            cli.argv(argv.concat(['template', '--help']));\n            expect(stdout.mostRecentCall.args[0]).toMatch(/usage: [\\S]+ template/i);\n        });\n    });\n\n    describe('$ phonegap template -h', function() {\n        it('should output usage info', function() {\n            cli.argv(argv.concat(['template', '-h']));\n            expect(stdout.mostRecentCall.args[0]).toMatch(/usage: [\\S]+ template/i);\n        });\n    });\n});\n\n/*\n * Specification: $ phonegap template noop\n */\n\ndescribe('phonegap template noop', function() {\n    beforeEach(function() {\n        cli = new CLI();\n        argv = ['node', '/usr/local/bin/phonegap'];\n        spyOn(process.stdout, 'write');\n        spyOn(process.stderr, 'write');\n        stdout = process.stdout.write;\n    });\n\n    describe('$ phonegap template noop', function() {\n        it('should include the command', function() {\n            cli.argv(argv.concat(['template', 'noop']));\n            expect(stdout.mostRecentCall.args[0]).toMatch('not a phonegap command');\n        });\n    });\n});\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/spec/cli/unknown.spec.js":"var unknown = require('../../lib/cli/unknown');\nvar cnsl = require('../../lib/cli/util/console');\n/*\n * Specification: $ phonegap unknown\n */\n\ndescribe('phonegap unknown', function() {\n    it('should output the unknown command as \"noop\"', function() {\n        spyOn(cnsl, 'error');\n        unknown({\n            _:['node', 'phonegap.js', 'noop']\n        }, function() {});\n        expect(cnsl.error.mostRecentCall.args[0]).toMatch('noop');\n        expect(cnsl.error.mostRecentCall.args[0]).toMatch(/is not a \\w+ command/);\n    });\n});\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/spec/cli/verbose.spec.js":"/*\n * Module dependencies.\n */\n\nvar phonegap = require('../../lib/main'),\n    CLI = require('../../lib/cli'),\n    argv,\n    cli;\n\n/*\n * Specification: $ phonegap --verbose <command>\n */\n\ndescribe('phonegap --verbose <command>', function() {\n    beforeEach(function() {\n        cli = new CLI();\n        argv = ['node', '/usr/local/bin/phonegap'];\n        spyOn(phonegap, 'create');\n        spyOn(phonegap, 'mode');\n        spyOn(process.stdout, 'write');\n        spyOn(process.stderr, 'write');\n    });\n\n    describe('$ phonegap --verbose <command>', function() {\n        it('should enable verbose mode', function() {\n            cli.argv(argv.concat(['create', 'my-app', '--verbose']));\n            expect(phonegap.mode).toHaveBeenCalledWith({\n                verbose: true\n            });\n        });\n    });\n\n    describe('$ phonegap -V <command>', function() {\n        it('should enable verbose mode', function() {\n            // @TODO fix this test to use -V\n            cli.argv(argv.concat(['create', 'my-app', '-d']));\n            expect(phonegap.mode).toHaveBeenCalledWith({\n                verbose: true\n            });\n        });\n    });\n});\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/spec/cli/version.spec.js":"/*\n * Module dependencies.\n */\n\nvar phonegap = require('../../lib/main'),\n    CLI = require('../../lib/cli'),\n    argv,\n    cli;\n\n/*\n * Specification: $ phonegap version\n */\n\ndescribe('phonegap --version', function() {\n    beforeEach(function() {\n        cli = new CLI();\n        argv = ['node', '/usr/local/bin/phonegap'];\n        spyOn(process.stdout, 'write');\n        spyOn(process.stderr, 'write');\n        spyOn(phonegap, 'version').andReturn({\n            npm: '2.8.0-0.10.6',\n            module: '0.10.6',\n            phonegap: '2.8.0'\n        });\n    });\n\n    describe('$ phonegap help', function() {\n        it('outputs info on the version command', function() {\n            cli.argv(argv.concat(['help']));\n            expect(process.stdout.write.mostRecentCall.args[0])\n                .toMatch(/Commands:[\\w\\W]*\\s+version/i);\n        });\n    });\n\n    describe('$ phonegap version', function() {\n        it('should output with the format x.x.x', function() {\n            cli.argv(argv.concat(['version']));\n            expect(process.stdout.write.mostRecentCall.args[0]).toMatch(/\\d+\\.\\d+\\.\\d+/);\n        });\n    });\n\n    describe('$ phonegap --version', function() {\n        it('should output with the format x.x.x', function() {\n            cli.argv(argv.concat(['--version']));\n            expect(process.stdout.write.mostRecentCall.args[0]).toMatch(/\\d+\\.\\d+\\.\\d+/);\n        });\n    });\n\n    describe('$ phonegap -v', function() {\n        it('should output with the format x.x.x', function() {\n            cli.argv(argv.concat(['-v']));\n            expect(process.stdout.write.mostRecentCall.args[0]).toMatch(/\\d+\\.\\d+\\.\\d+/);\n        });\n    });\n});\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/spec/cordova/index.spec.js":"/*\n * Module dependencies.\n */\n\nvar cordova = require('../../lib/cordova'),\n    original = require('cordova').cordova_lib;\n\n/*\n * Specification: cordova\n */\n\ndescribe('cordova.cordova', function() {\n    it('should be defined', function() {\n        expect(cordova.cordova).toEqual(jasmine.any(Object));\n        expect(cordova.cordova).toEqual(original.cordova);\n    });\n});\n\ndescribe('cordova.lib', function() {\n    it('should be defined', function() {\n        expect(cordova.lib).toEqual(jasmine.any(Object));\n        expect(cordova.lib).toEqual(original);\n    });\n\n    it('should customize the binary name (binname)', function() {\n        expect(cordova.lib.binname).toEqual('phonegap');\n    });\n});\n\ndescribe('cordova.util', function() {\n    it('should be defined', function() {\n        expect(cordova.util).toEqual(jasmine.any(Object));\n        expect(cordova.util.isCordova).toEqual(jasmine.any(Function));\n    });\n});\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/spec/phonegap/app.spec.js":"/*!\n * Module dependencies.\n */\n\nvar PhoneGap = require('../../lib/phonegap'),\n    phonegap;\n\n/*!\n * Specification: phonegap.app(options, [callback])\n */\n\ndescribe('phonegap.app(options, [callback])', function() {\n    beforeEach(function() {\n        phonegap = new PhoneGap();\n    });\n\n    it('should use phonegap.serve', function() {\n        expect(phonegap.app).toEqual(phonegap.serve);\n    });\n});\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/spec/phonegap/cordova.spec.js":"/*!\n * Module dependencies.\n */\n\nvar PhoneGap = require('../../lib/phonegap'),\n    events = require('events'),\n    cordova = require('../../lib/cordova'),\n    fs = require('fs'),\n    path = require('path'),\n    shell = require('shelljs'),\n    phonegap,\n    processSpy,\n    options;\n\n/*!\n * Specification: phonegap.cordova(options, [callback])\n */\n\ndescribe('phonegap.cordova(options, [callback])', function() {\n    beforeEach(function() {\n        phonegap = new PhoneGap();\n        options = {\n            cmd: 'cordova build ios'\n        };\n        spyOn(cordova.util, 'listPlatforms').andReturn(['ios']);\n        processSpy = {\n            stdout: new events.EventEmitter(),\n            stderr: new events.EventEmitter()\n        };\n        spyOn(shell, 'exec').andReturn(processSpy);\n        // disable adding phonegap.js\n        spyOn(cordova.util, 'isCordova').andReturn('/some/path');\n        spyOn(fs, 'existsSync').andReturn(false);\n        spyOn(shell, 'cp');\n        // disable phonegap.js deprecation warning\n        spyOn(shell, 'grep').andReturn('');\n    });\n\n    it('should require options', function() {\n        expect(function() {\n            options = undefined;\n            phonegap.cordova(options, function(e) {});\n        }).toThrow();\n    });\n\n    it('should require options.cmd', function() {\n        expect(function() {\n            options.cmd = undefined;\n            phonegap.cordova(options, function(e) {});\n        }).toThrow();\n    });\n\n    it('should not require callback', function() {\n        expect(function() {\n            phonegap.cordova(options);\n        }).not.toThrow();\n    });\n\n    it('should return itself', function() {\n        expect(phonegap.cordova(options)).toEqual(phonegap);\n    });\n\n    it('should try to execute the cordova command', function() {\n        phonegap.cordova(options);\n        expect(shell.exec).toHaveBeenCalled();\n        expect(shell.exec.mostRecentCall.args[0]).toMatch(options.cmd);\n    });\n\n    describe('executing a cordova command', function() {\n        beforeEach(function() {\n            options.verbose = true;\n        });\n\n        it('should support spaces in path to cordova executable', function() {\n            var fakeResolvedPath = 'C:\\\\Users\\\\User Name\\\\AppData\\\\Roaming\\\\npm',\n                _join = path.join;\n            // resolve returns a fake Windows OS styled path with a space\n            spyOn(path, 'resolve').andReturn(fakeResolvedPath);\n            // spy on join and only modify the faked path, allowing the rest to call the normal join\n            // this is required to allow the test to run on both Windows and Unix, since both use\n            // different delimiting slashes.\n            spyOn(path, 'join').andCallFake(function(p1, p2) {\n                if (p1 === fakeResolvedPath)\n                    return fakeResolvedPath + '\\\\' + p2;\n                else\n                    return _join.apply(path, arguments);\n            });\n\n            phonegap.cordova(options);\n            expect(shell.exec.mostRecentCall.args[0]).toEqual('\"C:\\\\Users\\\\User Name\\\\AppData\\\\Roaming\\\\npm\\\\cordova\" build ios');\n        });\n\n        it('should output stdout data', function(done) {\n            phonegap.on('raw', function(data) {\n                expect(data).toEqual('hello stdout');\n                done();\n            });\n            phonegap.cordova(options);\n            processSpy.stdout.emit('data', 'hello stdout');\n        });\n\n        it('should output stderr data', function(done) {\n            phonegap.on('raw', function(data) {\n                expect(data).toEqual('hello stderr');\n                done();\n            });\n            phonegap.cordova(options);\n            processSpy.stderr.emit('data', 'hello stderr');\n        });\n\n        describe('successful', function(done) {\n            beforeEach(function() {\n                shell.exec.andCallFake(function(cmd, options, callback) {\n                    process.nextTick(function() {\n                        callback(0, ''); // exit code 0, '' output\n                    });\n                    return processSpy;\n                });\n            });\n\n            it('should trigger the callback without an error', function(done) {\n                phonegap.cordova(options, function(e) {\n                    expect(e).toBeUndefined();\n                    done();\n                });\n            });\n        });\n\n        describe('failure', function(done) {\n            beforeEach(function() {\n                shell.exec.andCallFake(function(cmd, options, callback) {\n                    process.nextTick(function() {\n                        callback(1, 'bad error');\n                    });\n                    return processSpy;\n                });\n            });\n\n            it('should trigger the callback without an error', function(done) {\n                phonegap.cordova(options, function(e) {\n                    expect(e).toEqual(jasmine.any(Error));\n                    expect(e.exitCode).toEqual(1);\n                    done();\n                });\n            });\n        });\n\n        describe('when not a valid cordova project', function() {\n            beforeEach(function() {\n                cordova.util.isCordova.andReturn(false);\n                shell.exec.andCallThrough();\n            });\n\n            it('should trigger the callback without an error', function(done) {\n                phonegap.cordova(options, function(e) {\n                    expect(e).toEqual(jasmine.any(Error));\n                    done();\n                });\n            });\n        });\n    });\n\n    describe('adding plugin paths', function() {\n        it('should not alter the plugin path', function() {\n            options.cmd = 'cordova plugin add http://path/to/cordova-plugin.git';\n            phonegap.cordova(options);\n            expect(shell.exec).toHaveBeenCalled();\n            expect(shell.exec.mostRecentCall.args[0]).toMatch(options.cmd);\n        });\n    });\n\n    describe('adding/removing plugin', function() {\n        it('should save/remove the plugin in config.xml without --save flag', function() {\n            var options1 = {};\n            // test for phonegap plugin add\n            options1.cmd = options.cmd = 'cordova plugin add cordova-plugin-camera';\n            phonegap.cordova(options);\n            //options.cmd now has --save appended.\n            expect(shell.exec).toHaveBeenCalled();\n            expect(options.cmd).toBe(options1.cmd + \" --save\");\n            expect(shell.exec.mostRecentCall.args[0]).toMatch(options1.cmd + \" --save\");\n            // test for phonegap plugin rm\n            options1.cmd = options.cmd = 'cordova plugin rm cordova-plugin-camera';\n            phonegap.cordova(options);\n            expect(shell.exec).toHaveBeenCalled();\n            expect(options.cmd).toBe(options1.cmd + \" --save\");\n            expect(shell.exec.mostRecentCall.args[0]).toMatch(options1.cmd + \" --save\");\n\n            // test for phonegap plugin remove\n            options1.cmd = options.cmd = 'cordova plugin remove cordova-plugin-camera';\n            phonegap.cordova(options);\n            expect(shell.exec).toHaveBeenCalled();\n            expect(options.cmd).toBe(options1.cmd + \" --save\");\n            expect(shell.exec.mostRecentCall.args[0]).toMatch(options1.cmd + \" --save\");\n        });\n    });\n\n    describe('add platforms', function() {\n        describe('when the command is of the type:', function() {\n            beforeEach(function() {\n                cordova.util.listPlatforms.andReturn([]);\n            });\n\n            it('cordova prepare <platform>', function() {\n                options.cmd = 'cordova prepare ios';\n                phonegap.cordova(options);\n                expect(shell.exec.mostRecentCall.args[0]).toMatch('platform add --save ios');\n            });\n\n            it('cordova compile <platform>', function() {\n                options.cmd = 'cordova compile ios';\n                phonegap.cordova(options);\n                expect(shell.exec.mostRecentCall.args[0]).toMatch('platform add --save ios');\n            });\n\n            it('cordova build <platform>', function() {\n                options.cmd = 'cordova build ios';\n                phonegap.cordova(options);\n                expect(shell.exec.mostRecentCall.args[0]).toMatch('platform add --save ios');\n            });\n\n            it('cordova run <platform>', function() {\n                options.cmd = 'cordova run ios';\n                phonegap.cordova(options);\n                expect(shell.exec.mostRecentCall.args[0]).toMatch('platform add --save ios');\n            });\n\n            it('cordova emulate <platform>', function() {\n                options.cmd = 'cordova emulate ios';\n                phonegap.cordova(options);\n                expect(shell.exec.mostRecentCall.args[0]).toMatch('platform add --save ios');\n            });\n\n            it('not cordova prepare', function() {\n                options.cmd = 'cordova prepare';\n                phonegap.cordova(options);\n                expect(shell.exec.mostRecentCall.args[0]).not.toMatch('platform add --save ios');\n            });\n\n            it('not cordova compile', function() {\n                options.cmd = 'cordova compile';\n                phonegap.cordova(options);\n                expect(shell.exec.mostRecentCall.args[0]).not.toMatch('platform add --save ios');\n            });\n\n            it('not cordova build', function() {\n                options.cmd = 'cordova build';\n                phonegap.cordova(options);\n                expect(shell.exec.mostRecentCall.args[0]).not.toMatch('platform add --save ios');\n            });\n\n            it('not cordova run', function() {\n                options.cmd = 'cordova run';\n                phonegap.cordova(options);\n                expect(shell.exec.mostRecentCall.args[0]).not.toMatch('platform add --save ios');\n            });\n\n            it('not cordova emulate', function() {\n                options.cmd = 'cordova emulate';\n                phonegap.cordova(options);\n                expect(shell.exec.mostRecentCall.args[0]).not.toMatch('platform add --save ios');\n            });\n\n            it('not cordova create <path>', function() {\n                options.cmd = 'cordova create my-app';\n                phonegap.cordova(options);\n                expect(shell.exec.mostRecentCall.args[0]).not.toMatch('platform add');\n            });\n        });\n\n        describe('when no platform is specified', function() {\n            beforeEach(function() {\n                options.cmd = 'cordova run';\n            });\n\n            it('should not add a platform', function() {\n                phonegap.cordova(options);\n                expect(shell.exec.mostRecentCall.args[0]).not.toMatch('platform add --save');\n            });\n\n            it('should ignore an option and not add a platform', function() {\n                options.cmd = 'cordova run --emulator';\n                phonegap.cordova(options);\n                expect(shell.exec.mostRecentCall.args[0]).not.toMatch('platform add --save');\n            });\n            it('should ignore options and not add a platform', function() {\n                options.cmd = 'cordova run --emulator --target=\"Sim\"';\n                phonegap.cordova(options);\n                expect(shell.exec.mostRecentCall.args[0]).not.toMatch('platform add --save');\n            });\n        });\n\n        describe('when a platform does not exist', function() {\n            beforeEach(function() {\n                options.cmd = 'cordova build ios';\n                cordova.util.listPlatforms.andReturn([]);\n            });\n\n            it('should try to add the platform', function() {\n                phonegap.cordova(options);\n                expect(shell.exec.mostRecentCall.args[0]).toMatch('platform add --save ios');\n            });\n        });\n\n        describe('when multiple platforms do not exist', function() {\n            beforeEach(function() {\n                options.cmd = 'cordova build ios android';\n                cordova.util.listPlatforms.andReturn([]);\n            });\n\n            it('should try to add all of the platforms', function() {\n                phonegap.cordova(options);\n                expect(shell.exec.mostRecentCall.args[0]).toMatch('platform add --save ios android');\n            });\n        });\n\n        describe('when some platforms do not exist', function() {\n            beforeEach(function() {\n                options.cmd = 'cordova build ios android wp8';\n                cordova.util.listPlatforms.andReturn(['android']);\n            });\n\n            it('should try to add the missing platforms', function() {\n                phonegap.cordova(options);\n                expect(shell.exec.mostRecentCall.args[0]).toMatch('platform add --save ios wp8');\n            });\n        });\n\n        describe('after adding the platform(s)', function() {\n            beforeEach(function() {\n                options.cmd = 'cordova build ios';\n                cordova.util.listPlatforms.andReturn([]);\n                shell.exec.andCallFake(function(cmd, options, callback) {\n                    process.nextTick(function() {\n                        callback(0, '');\n                    });\n                    return processSpy;\n                });\n            });\n\n            it('should execute the original command', function(done) {\n                phonegap.cordova(options, function(e) {\n                    expect(shell.exec.calls[0].args[0]).toMatch('platform add --save ios');\n                    expect(shell.exec.calls[1].args[0]).toMatch('cordova build ios');\n                    done();\n                });\n            });\n        });\n    });\n\n    describe('adding phonegap.js backwards compatibility', function() {\n        beforeEach(function() {\n            // phonegap.js reference found\n            shell.grep.andReturn('<script src=\"phonegap.js\"></script>');\n            // enable injecting phonegap.js\n            fs.existsSync.andCallFake(function(filepath) {\n                // return true if checking cordova.js path\n                return (filepath.match('cordova.js'));\n            });\n        });\n\n        it('should add phonegap.js for ios', function() {\n            phonegap.cordova(options);\n            expect(shell.cp).toHaveBeenCalled();\n            expect(shell.cp.mostRecentCall.args[1]).toMatch(/ios.*cordova\\.js/);\n            expect(shell.cp.mostRecentCall.args[2]).toMatch(/ios.*phonegap\\.js/);\n        });\n\n        it('should add phonegap.js for ios and android', function() {\n            options.cmd = 'cordova build ios android';\n            cordova.util.listPlatforms.andReturn(['ios', 'android']);\n            phonegap.cordova(options);\n            expect(shell.cp).toHaveBeenCalled();\n            expect(shell.cp.calls.length).toEqual(2);\n            expect(shell.cp.calls[0].args[1]).toMatch(/ios.*cordova\\.js/);\n            expect(shell.cp.calls[0].args[2]).toMatch(/ios.*phonegap\\.js/);\n            expect(shell.cp.calls[1].args[1]).toMatch(/android.*cordova\\.js/);\n            expect(shell.cp.calls[1].args[2]).toMatch(/android.*phonegap\\.js/);\n        });\n    });\n\n    describe('adding phonegap.js deprecation warning', function() {\n        describe('when app does not reference phonegap.js', function() {\n            beforeEach(function() {\n                // no phonegap.js reference found\n                shell.grep.andReturn('');\n            });\n\n            it('should not emit a deprecation warning', function(done) {\n                phonegap.on('warn', function(message) {\n                    expect(false).toBe(true);\n                    done();\n                });\n                phonegap.cordova(options);\n                process.nextTick(function() {\n                    done(); // given time for warn event to be emitted\n                });\n            });\n        });\n\n        describe('when app references phonegap.js', function() {\n            beforeEach(function() {\n                // phonegap.js reference found\n                shell.grep.andReturn('<script src=\"phonegap.js\"></script>');\n            });\n\n            it('should not emit a deprecation warning', function(done) {\n                phonegap.on('warn', function(message) {\n                    expect(message).toMatch(/phonegap\\.js/i);\n                    done();\n                });\n                phonegap.cordova(options);\n            });\n        });\n    });\n});\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/spec/phonegap/create.spec.js":"/*\n * Module dependencies.\n */\n\nvar PhoneGap = require('../../lib/phonegap'),\n    cordova = require('../../lib/cordova'),\n    network = require('../../lib/phonegap/util/network'),\n    shell = require('shelljs'),\n    path = require('path'),\n    fs = require('fs'),\n    phonegap,\n    options;\n\n/*\n * Specification: phonegap.create(options, [callback])\n */\n\ndescribe('phonegap.create(options, [callback])', function() {\n    beforeEach(function() {\n        phonegap = new PhoneGap();\n        options = {\n            path: path.resolve('spec', 'fixture', 'app-with-config', 'www')\n        };\n        spyOn(phonegap, 'version').andReturn({ phonegap: '2.8.0' });\n        spyOn(phonegap, 'cordova');\n        spyOn(network, 'isOnline').andCallFake(function(callback) {\n            callback(false); // offline by default to speed up tests\n        });\n        spyOn(cordova.cordova, 'config');\n        spyOn(cordova.lib.configparser.prototype, 'write');\n        spyOn(shell, 'rm');\n        spyOn(shell, 'cp');\n        spyOn(fs, 'renameSync');\n        spyOn(fs, 'existsSync');\n        spyOn(fs, 'statSync').andReturn({\n            isDirectory: function() { return false; } // template is not cached\n        });\n\n        spyOn(process.stderr, 'write');\n    });\n\n    it('should require options', function() {\n        expect(function() {\n            options = undefined;\n            phonegap.create(options, function(e) {});\n        }).toThrow();\n    });\n\n    it('should require options.path', function() {\n        expect(function() {\n            options.path = undefined;\n            phonegap.create(options, function(e) {});\n        }).toThrow();\n    });\n\n    it('should accept a numeric path', function() {\n        expect(function() {\n            options.path = 123;\n            phonegap.create(options, function(e) {});\n        }).not.toThrow();\n    });\n\n    it('should not require callback', function() {\n        expect(function() {\n            phonegap.create(options);\n        }).not.toThrow();\n    });\n\n    it('should return itself', function() {\n        expect(phonegap.create(options)).toEqual(phonegap);\n    });\n\n    it('should try to create a project with default values', function() {\n        phonegap.create(options);\n        expect(phonegap.cordova).toHaveBeenCalledWith(\n            {\n                cmd: 'cordova create \"$path\" \"$id\" \"$name\" --template=\"phonegap-template-hello-world\"'\n                        .replace('$path', options.path)\n                        .replace('$id', options.id)\n                        .replace('$name', options.name)\n                        .replace('$config', options.config)\n            },\n            jasmine.any(Function)\n        );\n    });\n\n    it('should try to create a project with a given name and id', function() {\n        options.id = 'com.example.app';\n        options.name = 'My App';\n        phonegap.create(options);\n        expect(phonegap.cordova).toHaveBeenCalledWith(\n            {\n                cmd: 'cordova create \"$path\" \"$id\" \"$name\" --template=\"phonegap-template-hello-world\"'\n                        .replace('$path', options.path)\n                        .replace('$id', options.id)\n                        .replace('$name', options.name)\n                        .replace('$config', options.config)\n            },\n            jasmine.any(Function)\n        );\n    });\n\n    it('should try to create a project with a given config', function() {\n        options.id = 'com.example.app';\n        options.name = 'My App';\n        options.config = { some: 'value' };\n        phonegap.create(options);\n        expect(phonegap.cordova).toHaveBeenCalledWith(\n            {\n                cmd: 'cordova create \"$path\" \"$id\" \"$name\" \"$config\" --template=\"phonegap-template-hello-world\"'\n                        .replace('$path', options.path)\n                        .replace('$id', options.id)\n                        .replace('$name', options.name)\n                        .replace('$config', options.config)\n            },\n            jasmine.any(Function)\n        );\n    });\n\n    it('should try to create a project with a template with a npm name', function() {\n        options.template = 'phonegap-template-react-hot-loader';\n        phonegap.create(options);\n        expect(phonegap.cordova).toHaveBeenCalledWith(\n            {\n                cmd: 'cordova create \"$path\" \"$id\" \"$name\" --template=\"phonegap-template-react-hot-loader\"'\n                        .replace('$path', options.path)\n                        .replace('$id', options.id)\n                        .replace('$name', options.name)\n                        .replace('$config', options.config)\n            },\n            jasmine.any(Function)\n        );\n    });\n\n    it('should try to create a project with a template with a shortened name', function() {\n        options.template = 'blank';\n        phonegap.create(options);\n        expect(phonegap.cordova).toHaveBeenCalledWith(\n            {\n                cmd: 'cordova create \"$path\" \"$id\" \"$name\" --template=\"phonegap-template-blank\"'\n                        .replace('$path', options.path)\n                        .replace('$id', options.id)\n                        .replace('$name', options.name)\n                        .replace('$config', options.config)\n            },\n            jasmine.any(Function)\n        );\n    });\n\n    it('should create a default project when template name invalid', function() {\n        options.template = true; // equivalent to --template\n        phonegap.create(options);\n        expect(phonegap.cordova).toHaveBeenCalledWith(\n            {\n                cmd: 'cordova create \"$path\" \"$id\" \"$name\" --template=\"phonegap-template-hello-world\"'\n                        .replace('$path', options.path)\n                        .replace('$id', options.id)\n                        .replace('$name', options.name)\n                        .replace('$config', options.config)\n            },\n            jasmine.any(Function)\n        );\n    });\n\n    describe('successfully created a project', function() {\n        beforeEach(function() {\n            phonegap.cordova.andCallFake(function(options, callback) {\n                callback(null);\n            });\n        });\n\n        describe('when my-app/www/config.xml exists', function() {\n            beforeEach(function() {\n                fs.existsSync.andReturn(true);\n            });\n\n            it('should move it to my-app/config.xml', function(done) {\n                phonegap.create(options, function(e) {\n                    expect(fs.existsSync).toHaveBeenCalled();\n                    expect(fs.renameSync).toHaveBeenCalled();\n                    done();\n                });\n            });\n        });\n\n        describe('when my-app/www/config.xml does not exist', function() {\n            beforeEach(function() {\n                fs.existsSync.andReturn(false);\n            });\n\n            it('should not move it to my-app/config.xml', function(done) {\n                phonegap.create(options, function(e) {\n                    expect(fs.existsSync).toHaveBeenCalled();\n                    expect(fs.renameSync).not.toHaveBeenCalled();\n                    done();\n                });\n            });\n        });\n\n        describe('when config.xml does not exist', function() {\n            beforeEach(function() {\n                fs.existsSync.andReturn(false);\n            });\n\n            it('should trigger a \"warn\" event', function(done) {\n                phonegap.on('warn', function(message) {\n                    expect(message).toMatch('could not update');\n                    done();\n                });\n                phonegap.create(options, function(e) {});\n            });\n        });\n\n        describe('when --link-to is provided', function() {\n            beforeEach(function() {\n                options['link-to'] = '/path/to/app';\n            });\n\n            it('should not move config.xml', function(done) {\n                phonegap.create(options, function(e) {\n                    expect(fs.existsSync).not.toHaveBeenCalled();\n                    expect(fs.renameSync).not.toHaveBeenCalled();\n                    done();\n                });\n            });\n        });\n\n        describe('when complete', function() {\n            it('should trigger callback without an error', function(done) {\n                phonegap.create(options, function(e) {\n                    expect(e).toBeNull();\n                    done();\n                });\n            });\n        });\n    });\n\n    describe('failed to create a project', function() {\n        beforeEach(function() {\n            phonegap.cordova.andCallFake(function(options, callback) {\n                callback(new Error('path already exists'));\n            });\n        });\n\n        it('should trigger callback with an error', function(done) {\n            phonegap.create(options, function(e) {\n                expect(e).toEqual(jasmine.any(Error));\n                done();\n            });\n        });\n    });\n});\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/lib/phonegap/util/network.js":"/*!\n * Module dependencies.\n */\n\nvar dns = require('dns');\n\n/**\n * Check network connectivity.\n *\n * Options:\n *\n *   - `callback` {Function} triggered on completion.\n *     - `online` {Boolean} is true if connected to the Internet otherwise false.\n */\n\nmodule.exports.isOnline = function(callback) {\n    // This approach is very quick and appear to work correctly.\n    // However, the node.js documentation warns that `lookup`\n    // may not use the network connection.\n    //\n    // Reference: http://stackoverflow.com/questions/15270902/\n    //            check-for-internet-connectivity-in-nodejs\n    dns.lookup('google.com', function(e) {\n        if (e && e.code === 'ENOTFOUND') {\n            callback(false);\n        }\n        else {\n            callback(true);\n        }\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/spec/phonegap/mode.spec.js":"/*\n * Module dependencies.\n */\n\nvar PhoneGap = require('../../lib/phonegap'),\n    phonegapbuild = require('phonegap-build'),\n    cordova = require('../../lib/cordova').cordova,\n    phonegap,\n    options;\n\n/*\n * Specification: phonegap.mode(options, [callback])\n */\n\ndescribe('phonegap.mode(options, [callback])', function() {\n    beforeEach(function() {\n        phonegap = new PhoneGap();\n        options = {};\n        spyOn(cordova, 'on');\n    });\n\n    it('should require options', function() {\n        expect(function() {\n            options = undefined;\n            phonegap.mode(options, function(e) {});\n        }).toThrow();\n    });\n\n    it('should not require callback', function() {\n        expect(function() {\n            phonegap.mode(options);\n        }).not.toThrow();\n    });\n\n    it('should return itself', function() {\n        expect(phonegap.mode(options)).toEqual(phonegap);\n    });\n\n    describe('default mode', function() {\n        beforeEach(function() {\n            options = { verbose: false };\n        });\n\n        it('should listen to PhoneGap/Build events', function() {\n            phonegap.mode(options);\n            expect(phonegapbuild.listeners('log').length).toBeGreaterThan(0);\n            expect(phonegapbuild.listeners('warn').length).toBeGreaterThan(0);\n            expect(phonegapbuild.listeners('error').length).toBeGreaterThan(0);\n            expect(phonegapbuild.listeners('raw').length).toBeGreaterThan(0);\n            expect(cordova.on).toHaveBeenCalledWith('before_library_download', jasmine.any(Function));\n            expect(cordova.on).toHaveBeenCalledWith('after_library_download', jasmine.any(Function));\n            expect(cordova.on).toHaveBeenCalledWith('library_download', jasmine.any(Function));\n            expect(cordova.on).not.toHaveBeenCalledWith('log', jasmine.any(Function));\n            expect(cordova.on).not.toHaveBeenCalledWith('warn', jasmine.any(Function));\n        });\n    });\n\n    describe('verbose mode', function() {\n        beforeEach(function() {\n            options = { verbose: true };\n        });\n\n        it('should listen to PhoneGap/Build events', function() {\n            phonegap.mode(options);\n            expect(phonegapbuild.listeners('log').length).toBeGreaterThan(0);\n            expect(phonegapbuild.listeners('warn').length).toBeGreaterThan(0);\n            expect(phonegapbuild.listeners('error').length).toBeGreaterThan(0);\n            expect(phonegapbuild.listeners('raw').length).toBeGreaterThan(0);\n            expect(cordova.on).toHaveBeenCalledWith('before_library_download', jasmine.any(Function));\n            expect(cordova.on).toHaveBeenCalledWith('after_library_download', jasmine.any(Function));\n            expect(cordova.on).toHaveBeenCalledWith('library_download', jasmine.any(Function));\n            expect(cordova.on).toHaveBeenCalledWith('log', jasmine.any(Function));\n            expect(cordova.on).toHaveBeenCalledWith('warn', jasmine.any(Function));\n        });\n    });\n});\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/spec/phonegap/push.spec.js":"/*\n * Module dependencies.\n */\n\nvar PhoneGap = require('../../lib/phonegap'),\n    fs = require('fs'),\n    phonegap;\n\n/*\n * Specification: phonegap.version()\n */\n\ndescribe('phonegap.push()', function() {\n    beforeEach(function() {\n        phonegap = new PhoneGap();\n    });\n\n    it('should return a version object', function() {\n        expect(phonegap.version()).toEqual(jasmine.any(Object));\n    });\n\n    describe('version object', function() {\n        beforeEach(function() {\n            spyOn(fs, 'readFileSync').andReturn('{ \"version\": \"2.8.0-0.10.6\" }');\n        });\n\n        it('should contain version.npm', function() {\n            expect(phonegap.version().npm).toEqual('2.8.0-0.10.6');\n        });\n\n        it('should contain version.module', function() {\n            expect(phonegap.version().module).toEqual('0.10.6');\n        });\n\n        it('should contain version.phonegap', function() {\n            expect(phonegap.version().phonegap).toEqual('2.8.0');\n        });\n    });\n});\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/spec/phonegap/remote.install.spec.js":"/*\n * Module dependencies.\n */\n\nvar PhoneGap = require('../../lib/phonegap'),\n    project = require('../../lib/phonegap/util/project'),\n    qrcode = require('qrcode-terminal'),\n    phonegap,\n    options;\n\n/*\n * Specification: phonegap.remote.install(options, [callback])\n */\n\ndescribe('phonegap.remote.install(options, [callback])', function() {\n    beforeEach(function() {\n        phonegap = new PhoneGap();\n        options = {\n            platforms: ['android']\n        };\n        spyOn(process.stdout, 'write');\n        spyOn(process.stderr, 'write');\n        spyOn(project, 'cd').andReturn(true);\n    });\n\n    it('should require options', function() {\n        expect(function() {\n            options = undefined;\n            phonegap.remote.install(options, function(e) {});\n        }).toThrow();\n    });\n\n    it('should require options.platforms', function() {\n        expect(function() {\n            options.platforms = undefined;\n            phonegap.remote.install(options, function(e) {});\n        }).toThrow();\n    });\n\n    it('should not require options.data', function() {\n        expect(function() {\n            options.data = undefined;\n            phonegap.remote.install(options, function(e) {});\n        }).not.toThrow();\n    });\n\n    it('should not require callback', function() {\n        expect(function() {\n            phonegap.remote.install(options);\n        }).not.toThrow();\n    });\n\n    it('should change to project directory', function() {\n        phonegap.remote.install(options);\n        expect(project.cd).toHaveBeenCalledWith({\n            emitter: phonegap,\n            callback: jasmine.any(Function)\n        });\n    });\n\n    it('should return itself', function() {\n        expect(phonegap.remote.install(options)).toEqual(phonegap);\n    });\n\n    describe('with options.data', function() {\n        beforeEach(function() {\n            options.data = {\n                download: {\n                    android: '/api/v1/apps/1234'\n                },\n                token: 'abc123'\n            };\n        });\n\n        it('should generate a qrcode', function() {\n            spyOn(qrcode, 'generate');\n            phonegap.remote.install(options);\n            expect(qrcode.generate).toHaveBeenCalled();\n        });\n\n        it('should call callback without an error', function(done) {\n            phonegap.remote.install(options, function(e, data) {\n                expect(e).toBeNull();\n                done();\n            });\n        });\n\n        it('should call callback with a data object', function(done) {\n            phonegap.remote.install(options, function(e, data) {\n                expect(data).toEqual(jasmine.any(Object));\n                expect(data.url).toEqual(jasmine.any(String));\n                done();\n            });\n        });\n\n        describe('with optional server arguments', function() {\n            it('should call callback with a data object', function(done) {\n                options.protocol = 'http:';\n                options.host = 'stage.build.phonegap.com';\n                options.port = '80';\n\n                phonegap.remote.install(options, function(e, data) {\n                    expect(data).toEqual(jasmine.any(Object));\n                    expect(data.url).toMatch('http://stage.build.phonegap.com:80');\n                    done();\n                });\n            });\n        });\n    });\n\n    describe('without options.data', function() {\n        beforeEach(function() {\n            options.data = undefined;\n        });\n\n        it('should call callback an error', function(done) {\n            phonegap.remote.install(options, function(e, data) {\n                expect(e).toEqual(jasmine.any(Error));\n                done();\n            });\n        });\n\n        it('should fire \"error\" event', function(done) {\n            phonegap.on('error', function(e) {\n                expect(e).toEqual(jasmine.any(Error));\n                done();\n            });\n            phonegap.remote.install(options);\n        });\n    });\n});\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/spec/phonegap/remote.login.spec.js":"/*!\n * Module dependencies.\n */\n\nvar phonegapbuild = require('../../lib/phonegap/util/phonegap-build'),\n    PhoneGap = require('../../lib/phonegap'),\n    config = require('../../lib/common/config'),\n    phonegap,\n    options;\n\n/*!\n * Specification: phonegap.remote.login(options, [callback])\n */\n\ndescribe('phonegap.remote.login(options, [callback])', function() {\n    beforeEach(function() {\n        phonegap = new PhoneGap();\n        options = {};\n        spyOn(process.stderr, 'write');\n        spyOn(phonegapbuild, 'login');\n        spyOn(config.global, 'load');\n    });\n\n    it('should require options parameter', function() {\n        expect(function() {\n            options = undefined;\n            phonegap.remote.login(options, function() {});\n        }).toThrow();\n    });\n\n    it('should not require callback parameter', function() {\n        expect(function() {\n            phonegap.remote.login(options);\n        }).not.toThrow();\n    });\n\n    it('should return itself', function() {\n        expect(phonegap.remote.login(options)).toEqual(phonegap);\n    });\n\n    it('should try to login', function() {\n        phonegap.remote.login(options);\n        expect(phonegapbuild.login).toHaveBeenCalledWith(\n            options,\n            jasmine.any(Function)\n        );\n    });\n\n    describe('on \"login\" event', function() {\n        it('should map PhoneGapBuild \"login\" event', function(done) {\n            phonegapbuild.login.andCallFake(function(options, callback) {\n                phonegapbuild.emit('login', options, callback);\n            });\n            phonegap.on('login', function(options, callback) {\n                expect(options).toEqual(options);\n                expect(callback).toEqual(jasmine.any(Function));\n                done();\n            });\n            phonegap.remote.login(options);\n        });\n    });\n\n    describe('successful login', function() {\n        beforeEach(function() {\n            phonegapbuild.login.andCallFake(function(opt, callback) {\n                callback(null, {});\n            });\n        });\n\n        it('should trigger callback without an error', function(done) {\n            phonegap.remote.login(options, function(e, api) {\n                expect(e).toBeNull();\n                done();\n            });\n        });\n\n        it('should trigger callback with API object', function(done) {\n            phonegap.remote.login(options, function(e, api) {\n                expect(api).toBeDefined();\n                done();\n            });\n        });\n    });\n\n    describe('failed login', function() {\n        beforeEach(function() {\n            phonegapbuild.login.andCallFake(function(opt, callback) {\n                phonegapbuild.emit('error', new Error('Ganon stole the token!'));\n                callback(new Error('Ganon stole the token!'));\n            });\n        });\n\n        it('should trigger callback with an error', function(done) {\n            phonegap.remote.login(options, function(e, api) {\n                expect(e).toBeDefined();\n                done();\n            });\n        });\n\n        it('should trigger callback without an API object', function(done) {\n            phonegap.remote.login(options, function(e, api) {\n                expect(api).not.toBeDefined();\n                done();\n            });\n        });\n\n        it('should fire \"error\" event', function(done) {\n            phonegap.on('error', function(e) {\n                expect(e).toEqual(jasmine.any(Error));\n                done();\n            });\n            phonegap.remote.login(options);\n        });\n    });\n\n    describe('optional arguments', function() {\n        it('should support options.protocol', function() {\n            options.protocol = 'http';\n            phonegap.remote.login(options);\n            expect(phonegapbuild.login).toHaveBeenCalledWith(\n                options,\n                jasmine.any(Function)\n            );\n        });\n\n        it('should support options.host', function() {\n            options.host = 'stage.build.phonegap.com';\n            phonegap.remote.login(options);\n            expect(phonegapbuild.login).toHaveBeenCalledWith(\n                options,\n                jasmine.any(Function)\n            );\n        });\n\n        it('should support options.port', function() {\n            options.port = '1337';\n            phonegap.remote.login(options);\n            expect(phonegapbuild.login).toHaveBeenCalledWith(\n                options,\n                jasmine.any(Function)\n            );\n        });\n\n        it('should support options.path', function() {\n            options.path = '/api/v1';\n            phonegap.remote.login(options);\n            expect(phonegapbuild.login).toHaveBeenCalledWith(\n                options,\n                jasmine.any(Function)\n            );\n        });\n\n        it('should support options.proxy', function() {\n            options.proxy = 'my.proxy.com';\n            phonegap.remote.login(options);\n            expect(phonegapbuild.login).toHaveBeenCalledWith(\n                options,\n                jasmine.any(Function)\n            );\n        });\n    });\n});\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/spec/phonegap/remote.logout.spec.js":"/*!\n * Module dependencies.\n */\n\nvar phonegapbuild = require('../../lib/phonegap/util/phonegap-build'),\n    PhoneGap = require('../../lib/phonegap'),\n    phonegap,\n    options;\n\n/*!\n * Specification: phonegap.remote.logout(options, [callback])\n */\n\ndescribe('phonegap.remote.logout(options, [callback])', function() {\n    beforeEach(function() {\n        phonegap = new PhoneGap();\n        options = {};\n        spyOn(process.stderr, 'write');\n        spyOn(phonegapbuild, 'logout');\n    });\n\n    it('should require options parameter', function() {\n        expect(function() {\n            options = undefined;\n            phonegap.remote.logout(options, function() {});\n        }).toThrow();\n    });\n\n    it('should not require callback parameter', function() {\n        expect(function() {\n            phonegap.remote.logout(options);\n        }).not.toThrow();\n    });\n\n    it('should return itself', function() {\n        expect(phonegap.remote.logout(options)).toEqual(phonegap);\n    });\n\n    it('should try to call PhoneGapBuild logout', function() {\n        phonegap.remote.logout(options);\n        expect(phonegapbuild.logout).toHaveBeenCalledWith(\n            options,\n            jasmine.any(Function)\n        );\n    });\n\n    describe('successful logout', function() {\n        beforeEach(function() {\n            phonegapbuild.logout.andCallFake(function(options, callback) {\n                callback(null);\n            });\n        });\n\n        it('should trigger callback without an error', function(done) {\n            phonegap.remote.logout(options, function(e) {\n                expect(e).toBeNull();\n                done();\n            });\n        });\n    });\n\n    describe('failed logout', function() {\n        beforeEach(function() {\n            phonegapbuild.logout.andCallFake(function(options, callback) {\n                phonegapbuild.emit('error', new Error('write access denied'));\n                callback(new Error('write access denied'));\n            });\n        });\n\n        it('should trigger callback with an error', function(done) {\n            phonegap.remote.logout(options, function(e) {\n                expect(e).toEqual(jasmine.any(Error));\n                done();\n            });\n        });\n\n        it('should fire \"error\" event', function(done) {\n            phonegap.on('error', function(e) {\n                expect(e).toEqual(jasmine.any(Error));\n                done();\n            });\n            phonegap.remote.logout(options);\n        });\n    });\n});\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/spec/phonegap/remote.run.spec.js":"/*\n * Module dependencies.\n */\n\nvar phonegapbuild = require('../../lib/phonegap/util/phonegap-build'),\n    PhoneGap = require('../../lib/phonegap'),\n    project = require('../../lib/phonegap/util/project'),\n    config = require('../../lib/common/config'),\n    qrcode = require('qrcode-terminal'),\n    phonegap,\n    options;\n\n/*\n * Specification: phonegap.remote.run(options, [callback])\n */\n\ndescribe('phonegap.remote.run(options, [callback])', function() {\n    beforeEach(function() {\n        phonegap = new PhoneGap();\n        options = {\n            platforms: ['android']\n        };\n        spyOn(process.stdout, 'write');\n        spyOn(process.stderr, 'write');\n        spyOn(phonegap.remote, 'build');\n        spyOn(project, 'cd').andReturn(true);\n    });\n\n    it('should require options', function() {\n        expect(function() {\n            options = undefined;\n            phonegap.remote.run(options, function(e) {});\n        }).toThrow();\n    });\n\n    it('should require options.platforms', function() {\n        expect(function() {\n            options.platforms = undefined;\n            phonegap.remote.run(options, function(e) {});\n        }).toThrow();\n    });\n\n    it('should not require callback', function() {\n        expect(function() {\n            phonegap.remote.run(options);\n        }).not.toThrow();\n    });\n\n    it('should change to project directory', function() {\n        phonegap.remote.run(options);\n        expect(project.cd).toHaveBeenCalledWith({\n            emitter: phonegap,\n            callback: jasmine.any(Function)\n        });\n    });\n\n    it('should return itself', function() {\n        expect(phonegap.remote.run(options)).toEqual(phonegap);\n    });\n\n    it('should try to build', function() {\n        phonegap.remote.run(options);\n        expect(phonegap.remote.build).toHaveBeenCalled();\n    });\n\n    describe('successful build', function() {\n        beforeEach(function() {\n            phonegap.remote.build.andCallFake(function(options, callback) {\n                callback(null, {\n                    download: {\n                        android: '/api/v1/apps/1234'\n                    },\n                    token: 'abc123'\n                });\n            });\n            spyOn(config.global, 'load').andCallFake(function(callback) {\n                callback(null, {\n                    phonegap: {\n                        token: 'abc123'\n                    }\n                });\n            });\n        });\n\n        it('should generate a qrcode', function() {\n            spyOn(qrcode, 'generate');\n            phonegap.remote.run(options);\n            expect(qrcode.generate).toHaveBeenCalled();\n        });\n\n        it('should call callback without an error', function(done) {\n            phonegap.remote.run(options, function(e, data) {\n                expect(e).toBeNull();\n                done();\n            });\n        });\n\n        it('should call callback with a data object', function(done) {\n            phonegap.remote.run(options, function(e, data) {\n                expect(data).toEqual(jasmine.any(Object));\n                done();\n            });\n        });\n    });\n\n    describe('failed build', function() {\n        beforeEach(function() {\n            phonegap.remote.build.andCallFake(function(opts, callback) {\n                phonegapbuild.emit('error', new Error('Server did not respond'));\n                callback(new Error('Server did not respond'));\n            });\n        });\n\n        it('should call callback with an error', function(done) {\n            phonegap.remote.run(options, function(e, data) {\n                expect(e).toEqual(jasmine.any(Error));\n                done();\n            });\n        });\n\n        it('should fire \"error\" event', function(done) {\n            phonegap.on('error', function(e) {\n                expect(e).toEqual(jasmine.any(Error));\n                done();\n            });\n            phonegap.remote.run(options);\n        });\n    });\n\n    describe('optional arguments', function() {\n        it('should support options.protocol', function() {\n            options.protocol = 'http';\n            phonegap.remote.run(options);\n            expect(phonegap.remote.build).toHaveBeenCalledWith(\n                options,\n                jasmine.any(Function)\n            );\n        });\n\n        it('should support options.host', function() {\n            options.host = 'stage.build.phonegap.com';\n            phonegap.remote.run(options);\n            expect(phonegap.remote.build).toHaveBeenCalledWith(\n                options,\n                jasmine.any(Function)\n            );\n        });\n\n        it('should support options.port', function() {\n            options.port = '1337';\n            phonegap.remote.run(options);\n            expect(phonegap.remote.build).toHaveBeenCalledWith(\n                options,\n                jasmine.any(Function)\n            );\n        });\n\n        it('should support options.path', function() {\n            options.path = '/api/v1';\n            phonegap.remote.run(options);\n            expect(phonegap.remote.build).toHaveBeenCalledWith(\n                options,\n                jasmine.any(Function)\n            );\n        });\n\n        it('should support options.proxy', function() {\n            options.proxy = 'my.proxy.com';\n            phonegap.remote.run(options);\n            expect(phonegap.remote.build).toHaveBeenCalledWith(\n                options,\n                jasmine.any(Function)\n            );\n        });\n    });\n});\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/spec/phonegap/serve.spec.js":"\nvar serveModule = require(\"../../lib/phonegap/serve\"),\n    server = require(\"connect-phonegap\"),\n    cordova = require('../../lib/cordova').cordova,\n    project = require(\"../../lib/phonegap/util/project\"),\n    serve = null;\n\n\nvar dummyPromise = { then: function() {} },\n    realPromise = { then: function(f) { f(); } };\n\n\ndescribe(\"PhoneGap serve\", function () {\n    describe(\"module\", function () {\n        it(\"should export at object\", function() {\n            expect(serveModule).toEqual(any(Object));\n        });\n\n        it(\"should export an object with a create parameter\", function() {\n            expect(serveModule.create).toEqual(any(Function));\n        });\n    });\n\n    describe(\"when called\", function() {\n        var validOptions,\n            wrapper;\n\n        beforeEach(function() {\n            // valid options\n            validOptions = {\n                port:3939,\n                autoreload:true,\n                localtunnel:false\n            };\n            // define wrapper as a stub\n            wrapper = {\n                emit: function() {},\n                on: function() {}\n            };\n\n            // initialize the serve function with wrapper\n            serve = serveModule.create(wrapper);\n\n            // declare spies\n            spyOn(project,'cd').andReturn(true);\n\n            preparePromise = dummyPromise;\n            spyOn(cordova, 'prepare').andCallFake(function(platforms, callback) {\n                callback(true);\n            });\n\n            spyOn(server,'listen').andReturn({ on: function() { return this; }});\n        });\n\n        it(\"should be a function\", function() {\n            expect(serve).toEqual(any(Function));\n        });\n\n        it(\"should require options parameter\", function() {\n            expect(function() {\n                serve();\n            }).toThrow();\n        });\n\n        it(\"should return the wrapper object given to create\", function () {\n            var ret = serve({});\n            expect(ret).toEqual(wrapper);\n        });\n\n        it(\"should accept empty options\", function() {\n            expect(function() {\n                serve({});\n            }).not.toThrow();\n        });\n\n        it(\"should not require callback parameter\", function() {\n            expect(function() {\n                serve(validOptions);\n            }).not.toThrow();\n        });\n\n        it(\"should not require options.port\", function() {\n            expect(function() {\n                serve({port:undefined});\n            }).not.toThrow();\n        });\n\n        it(\"should not require options.port\", function() {\n            expect(function() {\n                serve({port:undefined});\n            }).not.toThrow();\n        });\n\n        it(\"should change to the project directory\", function () {\n            serve(validOptions);\n            expect(project.cd).toHaveBeenCalled();\n        });\n\n        it('should prepare the build first', function() {\n            serve({});\n            expect(cordova.prepare).toHaveBeenCalled();\n            expect(cordova.prepare).toHaveBeenCalledWith([], jasmine.any(Function));\n        });\n\n        it(\"should call connect-phonegap listen\", function () {\n            preparePromise = realPromise;\n            serve({});\n            expect(server.listen).toHaveBeenCalled();\n        });\n\n        it(\"should call connect-phonegap listen with valid options passed through\", function () {\n            preparePromise = realPromise;\n            serve(validOptions);\n            expect(server.listen).toHaveBeenCalledWith(validOptions);\n        });\n\n        describe(\"if cordova prepare throws\", function () {\n            var defaultOptions;\n\n            beforeEach(function () {\n                defaultOptions = {\n                    port: 3000,\n                    autoreload: true,\n                    localtunnel: false\n                };\n\n                cordova.prepare.andCallFake(function () {\n                    throw new Error('IWETTUM!');\n                });\n            });\n            it('should still serve', function() {\n                serve(defaultOptions);\n                expect(server.listen).toHaveBeenCalledWith(defaultOptions);\n            });\n        });\n\n        describe(\"if called with invalid options\", function () {\n            var invalidOptions,\n                defaultOptions;\n\n            beforeEach(function () {\n                invalidOptions = {\n                    port: undefined,\n                    autoreload:\"batman\",\n                    localtunnel:\"wonderwoman\"\n                };\n                defaultOptions = {\n                    port: 3000,\n                    autoreload: true,\n                    localtunnel: false,\n                    phonegap: {\n                        emit: function() {},\n                        on: function() {}\n                    }\n                };\n            });\n\n            it(\"should call connect-phonegap listen with default options\", function () {\n                preparePromise = realPromise;\n                serve(invalidOptions);\n                expect(server.listen).toHaveBeenCalledWith(\n                    jasmine.objectContaining({\n                        port: defaultOptions.port,\n                        autoreload: defaultOptions.autoreload,\n                        localtunnel: defaultOptions.localtunnel,\n                        phonegap: jasmine.any(Object)\n                    })\n                );\n            });\n\n            it(\"should call connect-phonegap listen with corrected autoreload option\", function () {\n                defaultOptions.autoreload = \"batman\";\n                preparePromise = realPromise;\n                serve(defaultOptions);\n                expect(server.listen.argsForCall[0][0].autoreload).toEqual(true);\n            });\n\n            it(\"should call connect-phonegap listen with corrected localtunnel option\", function () {\n                defaultOptions.localtunnel = \"batman\";\n                preparePromise = realPromise;\n                serve(defaultOptions);\n                expect(server.listen.argsForCall[0][0].localtunnel).toEqual(false);\n            });\n        });\n    });\n});\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/spec/phonegap/share.spec.js":"/*\n * Module dependencies.\n */\n\nvar PhoneGap = require('../../lib/phonegap'),\n    fs = require('fs'),\n    phonegap;\n\n/*\n * Specification: phonegap.version()\n */\n\ndescribe('phonegap.share()', function() {\n    beforeEach(function() {\n        phonegap = new PhoneGap();\n    });\n\n    it('should return a version object', function() {\n        expect(phonegap.version()).toEqual(jasmine.any(Object));\n    });\n\n    describe('version object', function() {\n        beforeEach(function() {\n            spyOn(fs, 'readFileSync').andReturn('{ \"version\": \"2.8.0-0.10.6\" }');\n        });\n\n        it('should contain version.npm', function() {\n            expect(phonegap.version().npm).toEqual('2.8.0-0.10.6');\n        });\n\n        it('should contain version.module', function() {\n            expect(phonegap.version().module).toEqual('0.10.6');\n        });\n\n        it('should contain version.phonegap', function() {\n            expect(phonegap.version().phonegap).toEqual('2.8.0');\n        });\n    });\n});\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/spec/phonegap/template.list.spec.js":"/*\n * Module dependencies.\n */\n\nvar PhoneGap = require('../../lib/phonegap'),\n    phonegap,\n    options;\n\n/*\n * Specification: phonegap.template.list(options, [callback])\n */\n\ndescribe('phonegap.template.list(options, [callback])', function() {\n    beforeEach(function() {\n        phonegap = new PhoneGap();\n        options = {};\n    });\n\n    it('should require options', function() {\n        expect(function() {\n            options = undefined;\n            phonegap.template.list(options, function(e) {});\n        }).toThrow();\n    });\n\n    it('should not require callback', function() {\n        expect(function() {\n            phonegap.template.list(options);\n        }).not.toThrow();\n    });\n\n    it('should return itself', function() {\n        expect(phonegap.template.list(options)).toEqual(phonegap);\n    });\n\n    it('should list the available template names', function(done) {\n        var templates = require('../../package.json').templates;\n        phonegap.template.list(options, function(e, data) {\n            expect(data.templates).toEqual(jasmine.any(Object));\n            expect(data.templates.length).toEqual(\n                Object.keys(templates).length\n            );\n            done();\n        });\n    });\n\n    describe('each template', function() {\n        it('should contain a name and description', function(done) {\n            phonegap.template.list(options, function(e, data) {\n                expect(data.templates[0].name).toEqual(jasmine.any(String));\n                expect(data.templates[0].description).toEqual(jasmine.any(String));\n                done();\n            });\n        });\n    });\n});\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/spec/phonegap/template.search.spec.js":"/*\n * Module dependencies.\n */\n\nvar PhoneGap = require('../../lib/phonegap'),\n    opener = require('../../lib/phonegap/util/opener'),\n    phonegap,\n    options;\n\n/*\n * Specification: phonegap.template.search(options, [callback])\n */\n\ndescribe('phonegap.template.search(options, [callback])', function() {\n    beforeEach(function() {\n        phonegap = new PhoneGap();\n        options = {};\n        spyOn(opener, 'open');\n    });\n\n    it('should require options', function() {\n        expect(function() {\n            options = undefined;\n            phonegap.template.search(options, function(e) {});\n        }).toThrow();\n    });\n\n    it('should not require callback', function() {\n        expect(function() {\n            phonegap.template.search(options);\n        }).not.toThrow();\n    });\n\n    it('should return itself', function() {\n        expect(phonegap.template.search(options)).toEqual(phonegap);\n    });\n\n    it('should open the browser to npmjs.com', function(done) {\n        phonegap.template.search(options, function(e, data) {\n            expect(opener.open).toHaveBeenCalledWith(\n                'https://www.npmjs.com/browse/keyword/cordova:template'\n            );\n            done();\n        });\n    });\n});\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/spec/phonegap/version.spec.js":"/*\n * Module dependencies.\n */\n\nvar PhoneGap = require('../../lib/phonegap'),\n    fs = require('fs'),\n    phonegap;\n\n/*\n * Specification: phonegap.version()\n */\n\ndescribe('phonegap.version()', function() {\n    beforeEach(function() {\n        phonegap = new PhoneGap();\n    });\n\n    it('should return a version object', function() {\n        expect(phonegap.version()).toEqual(jasmine.any(Object));\n    });\n\n    describe('version object', function() {\n        beforeEach(function() {\n            spyOn(fs, 'readFileSync').andReturn('{ \"version\": \"2.8.0-0.10.6\" }');\n        });\n\n        it('should contain version.npm', function() {\n            expect(phonegap.version().npm).toEqual('2.8.0-0.10.6');\n        });\n\n        it('should contain version.module', function() {\n            expect(phonegap.version().module).toEqual('0.10.6');\n        });\n\n        it('should contain version.phonegap', function() {\n            expect(phonegap.version().phonegap).toEqual('2.8.0');\n        });\n    });\n});\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/lib/phonegap/util/hex.js":"var crypto = require('crypto');\n\nmodule.exports = {\n  randomValueHex : function (len) {\n      return crypto.randomBytes(Math.ceil(len/2))\n          .toString('hex') // convert to hexadecimal format\n          .slice(0,len);   // return required number of characters\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/spec/cli/util/sanitize-args.spec.js":"\nvar sanitizeArgs = require('../../../lib/cli/util/sanitize-args');\n\ndescribe('sanitize-args', function() {\n    it('should exist and export a `stringifyForGoogleAnalytics` function', function() {\n        expect(sanitizeArgs).toBeDefined();\n        expect(sanitizeArgs.stringifyForGoogleAnalytics).toBeDefined();\n    });\n\n    describe('stringifyForGoogleAnalytics', function() {\n        it('should not fail with empty args', function() {\n            var result = sanitizeArgs.stringifyForGoogleAnalytics();\n            expect(result).toBeDefined();\n        });\n\n        /*\n            help --help and -h are treated specially because they can appear anywhere in\n            the input, but still have the same effect.\n        */\n\n        it('should return all args if either `help`, `--help` or `-h` is found anywhere',function() {\n            var cmds = [\"help\", \"--help\", \"-h\"];\n            var params = [\"a\", \"b\", \"c\"];\n            cmds.forEach(function(cmd) {\n                var test_params = params.slice(0);\n                test_params.unshift(cmd);\n                var result = sanitizeArgs.stringifyForGoogleAnalytics(test_params);\n                test_params.forEach(function(param) {\n                    if (param == \"help\") return;\n                    expect(result.params).toContain(param);\n                });\n            });\n        });\n\n        /*\n            build, prepare, compile, info, template, install\n        */\n        it('should return all args for basic commands',function() {\n            var params = [\"a\", \"b\", \"c\"];\n            var commands = [\"build\", \"version\", \"-v\", \"prepare\", \"compile\", \"info\", \"template\",\"install\",\"emulate\"];\n            commands.forEach(function(elem) {\n                var result = sanitizeArgs.stringifyForGoogleAnalytics([elem].concat(params));\n                expect(result).toBeDefined();\n                expect(result.command).toBeDefined();\n                expect(result.command).toBe(elem);\n                expect(result.params).toBeDefined();\n                expect(result.params).toBe(params.join());\n            });\n        });\n\n        /*\n            cordova -v\n        */\n        it('should handle `cordova -v` calls',function() {\n            var result = sanitizeArgs.stringifyForGoogleAnalytics([\"cordova\", \"-v\"]);\n            expect(result).toBeDefined();\n            expect(result.command).toBe(\"cordova:-v\");\n            expect(result.params).toBe(\"-\");\n        });\n\n        /*\n            create + cordova create\n        */\n        it('should filter out sensitive info from `create` calls',function() {\n            var result = sanitizeArgs.stringifyForGoogleAnalytics([\"create\",\"--verbose\",\"secretProjectPath\",\"projName\", \"-d\"]);\n            expect(result).toBeDefined();\n            expect(result.command).toBe(\"create\");\n            // sani result is count of args, and what flags are present\n            expect(result.params).toBe(\"--verbose,-d\");\n        });\n\n        it('should strip `create` calls with args like --key=???',function() {\n            var result = sanitizeArgs.stringifyForGoogleAnalytics([\"create\",\"--key1=secret\",\"--key2=alsosecret\"]);\n            expect(result).toBeDefined();\n            expect(result.command).toBe(\"create\");\n            // sani result is count of args, and what flags are present\n            expect(result.params).toBe(\"--key1,--key2\");\n        });\n\n        it('should filter out sensitive info from `cordova create` calls',function() {\n            var result = sanitizeArgs.stringifyForGoogleAnalytics([\"cordova\", \"create\", \"--verbose\",\"secretProjectPath\",\"projName\", \"-d\"]);\n            expect(result.command).toBe(\"cordova:create\");\n            expect(result).toBeDefined();\n            expect(result.params).toBe(\"--verbose,-d\");\n        });\n\n        /*\n            serve, app, cordova serve\n        */\n        it('should clean out sensitive info from `serve` calls',function() {\n            var result = sanitizeArgs.stringifyForGoogleAnalytics([\"serve\",\"--verbose\", \"--port\", \"secretPortNumber\",\"-p\",\"otherSecretPortNumber\"]);\n            expect(result).toBeDefined();\n            expect(result.command).toBe(\"serve\");\n            // sani result is count of args, and what flags are present\n            expect(result.params).toBe(\"--verbose,--port,-p\");\n        });\n\n        it('should clean out sensitive info from `app` calls',function() {\n            var result = sanitizeArgs.stringifyForGoogleAnalytics([\"app\",\"--verbose\", \"--port\", \"secretPortNumber\",\"-p\",\"otherSecretPortNumber\"]);\n            expect(result).toBeDefined();\n            expect(result.command).toBe(\"app\");\n            // sani result is count of args, and what flags are present\n            expect(result.params).toBe(\"--verbose,--port,-p\");\n        });\n\n        it('should clean out sensitive info from `cordova serve` calls',function() {\n            var result = sanitizeArgs.stringifyForGoogleAnalytics([\"cordova\",\"serve\",\"8008\"]);\n            expect(result).toBeDefined();\n            expect(result.command).toBe(\"cordova:serve\");\n            // sani result is count of args, and what flags are present\n            expect(result.params).toBe(\"-\");\n        });\n\n        // local\n        it('should properly tokenize `phonegap local * *` calls in the resulting command',function() {\n            var result = sanitizeArgs.stringifyForGoogleAnalytics([\"local\",\"platforms\", \"list\",\"extraJunk\"]);\n            expect(result).toBeDefined();\n            expect(result.command).toBeDefined();\n            expect(result.command).toBe(\"local:platforms\");\n            expect(result.params).toBe(\"list,extraJunk\");\n        });\n\n        /*\n            plugin ls, plugin list, cordova plugin ls, cordova plugin list\n            plugins ls, plugins list, cordova plugins ls, cordova plugins list\n        */\n        it('should handle `phonegap plugin list` (and derivates) calls and log extra parameters passed',function() {\n            var plugin_cmds = [\"plugins\", \"plugin\"];\n            var list_cmds = [\"ls\", \"list\"];\n            plugin_cmds.forEach(function(plug) {\n                list_cmds.forEach(function(ls) {\n                    var params = [plug, ls, \"extraJunk\"];\n                    var result = sanitizeArgs.stringifyForGoogleAnalytics(params);\n                    expect(result).toBeDefined();\n                    expect(result.command).toBe(plug);\n                    expect(result.params).toBe(ls + \",extraJunk\");\n                });\n            });\n        });\n\n        it('should handle `cordova plugin list` (and derivates) calls and log extra parameters passed',function() {\n            var plugin_cmds = [\"plugins\", \"plugin\"];\n            var list_cmds = [\"ls\", \"list\"];\n            plugin_cmds.forEach(function(plug) {\n                list_cmds.forEach(function(ls) {\n                    var params = [\"cordova\", plug, ls, \"extraJunk\"];\n                    var result = sanitizeArgs.stringifyForGoogleAnalytics(params);\n                    expect(result).toBeDefined();\n                    expect(result.command).toBe(\"cordova:\" + plug);\n                    expect(result.params).toBe(ls + \",extraJunk\");\n                });\n            });\n        });\n\n        /*\n            plugin rm, plugin remove, cordova plugin rm, cordova plugin remove\n            plugins rm, plugins remove, cordova plugins rm, cordova plugins remove\n        */\n        it('should not log what plugins are being removed during `phonegap plugin remove` (and derivates) calls',function() {\n            var plugin_cmds = [\"plugins\", \"plugin\"];\n            var rm_cmds = [\"rm\", \"remove\"];\n            plugin_cmds.forEach(function(plug) {\n                rm_cmds.forEach(function(rm) {\n                    var params = [plug, rm, \"extraJunk\"];\n                    var result = sanitizeArgs.stringifyForGoogleAnalytics(params);\n                    expect(result).toBeDefined();\n                    expect(result.command).toBe(plug);\n                    expect(result.params).toBe(rm);\n                });\n            });\n        });\n\n        it('should not log what plugins are being removed during `cordova plugin remove` (and derivates) calls',function() {\n            var plugin_cmds = [\"plugins\", \"plugin\"];\n            var rm_cmds = [\"rm\", \"remove\"];\n            plugin_cmds.forEach(function(plug) {\n                rm_cmds.forEach(function(rm) {\n                    var params = [\"cordova\", plug, rm, \"extraJunk\"];\n                    var result = sanitizeArgs.stringifyForGoogleAnalytics(params);\n                    expect(result).toBeDefined();\n                    expect(result.command).toBe(\"cordova:\" + plug);\n                    expect(result.params).toBe(rm);\n                });\n            });\n        });\n\n        /*\n            remote [login*, logout, build, install, run]\n        */\n        it('should handle `phonegap remote` calls without additional args',function() {\n            var result = sanitizeArgs.stringifyForGoogleAnalytics([\"remote\"]);\n            expect(result).toBeDefined();\n            expect(result.params).toBe(\"-\");\n        });\n\n        it('should remove sensitive info from `phonegap remote login` calls',function() {\n            var result = sanitizeArgs.stringifyForGoogleAnalytics([\"remote\",\"login\",\"secret\"]);\n            expect(result).toBeDefined();\n            expect(result.params).toBe(\"login\");\n        });\n\n        it('should handle `remote logout` calls',function() {\n            var result = sanitizeArgs.stringifyForGoogleAnalytics([\"remote\", \"logout\",\"-d\"]);\n            expect(result).toBeDefined();\n            expect(result.params).toBe(\"logout -d\");\n        });\n\n        it('should handle `remote build` calls',function() {\n            var result = sanitizeArgs.stringifyForGoogleAnalytics([\"remote\", \"build\",\"some-platform\"]);\n            expect(result).toBeDefined();\n            expect(result.params).toBe(\"build,some-platform\");\n        });\n\n        it('should handle `remote install` calls',function() {\n            var result = sanitizeArgs.stringifyForGoogleAnalytics([\"remote\", \"install\",\"some-platform\"]);\n            expect(result).toBeDefined();\n            expect(result.params).toBe(\"install,some-platform\");\n        });\n\n        it('should handle `remote run` calls',function() {\n            var result = sanitizeArgs.stringifyForGoogleAnalytics([\"remote\", \"run\",\"some-platform\"]);\n            expect(result).toBeDefined();\n            expect(result.params).toBe(\"run,some-platform\");\n        });\n\n        /*\n            platform ls, platform list, cordova platform ls, cordova platform list\n            platforms ls, platforms list, cordova platforms ls, cordova platforms list\n        */\n\n        it('should handle `phonegap platforms ls` (and derivates) calls',function() {\n            var platform_cmds = [\"platforms\", \"platform\"];\n            var list_cmds = [\"ls\", \"list\"];\n            platform_cmds.forEach(function(platform) {\n                list_cmds.forEach(function(ls) {\n                    var result = sanitizeArgs.stringifyForGoogleAnalytics([platform, ls, \"extraJunk\"]);\n                    expect(result).toBeDefined();\n                    expect(result.command).toBe(platform);\n                    expect(result.params).toBe(ls + \",extraJunk\");\n                });\n            });\n        });\n\n        it('should handle `phonegap cordova platforms ls` (and derivates) calls',function() {\n            var platform_cmds = [\"platforms\", \"platform\"];\n            var list_cmds = [\"ls\", \"list\"];\n            platform_cmds.forEach(function(platform) {\n                list_cmds.forEach(function(ls) {\n                    var result = sanitizeArgs.stringifyForGoogleAnalytics([\"cordova\", platform, ls, \"extraJunk\"]);\n                    expect(result).toBeDefined();\n                    expect(result.command).toBe(\"cordova:\" + platform);\n                    expect(result.params).toBe(ls + \",extraJunk\");\n                });\n            });\n        });\n\n        /*\n            platform rm, platform remove, cordova platform rm, cordova platform remove\n            platforms rm, platforms remove, cordova platforms rm, cordova platforms remove\n        */\n\n        it('should not log non-standard platforms during `phonegap platforms rm` (and derivates) calls',function() {\n            var platform_cmds = [\"platforms\", \"platform\"];\n            var rm_cmds = [\"rm\", \"remove\"];\n            platform_cmds.forEach(function(platform) {\n                rm_cmds.forEach(function(rm) {\n                    var result = sanitizeArgs.stringifyForGoogleAnalytics([platform, rm, \"extraJunk\"]);\n                    expect(result).toBeDefined();\n                    expect(result.command).toBe(platform);\n                    expect(result.params).toBe(rm);\n                    expect(result.params).not.toContain(\"extraJunk\");\n                });\n            });\n        });\n\n        it('should not log non-standard platforms during `phonegap cordova platforms rm` (and derivates) calls',function() {\n            var platform_cmds = [\"platforms\", \"platform\"];\n            var rm_cmds = [\"rm\", \"remove\"];\n            platform_cmds.forEach(function(platform) {\n                rm_cmds.forEach(function(rm) {\n                    var result = sanitizeArgs.stringifyForGoogleAnalytics([\"cordova\", platform, rm, \"extraJunk\"]);\n                    expect(result).toBeDefined();\n                    expect(result.command).toBe(\"cordova:\" + platform);\n                    expect(result.params).toBe(rm);\n                    expect(result.params).not.toContain(\"extraJunk\");\n                });\n            });\n        });\n\n        /*\n            platform add, cordova platform add\n            platforms add, cordova platforms add\n        */\n        it('should not log non-standard platforms during `add` (and derivates) calls', function() {\n            var platform_cmds = [\"platforms\", \"platform\"];\n            platform_cmds.forEach(function(platform) {\n                var result = sanitizeArgs.stringifyForGoogleAnalytics([platform, \"add\", \"extraJunk\"]);\n                expect(result).toBeDefined();\n                expect(result.command).toBe(platform);\n                expect(result.params).toBe(\"add\");\n                expect(result.params).not.toContain(\"extraJunk\");\n            });\n        });\n        it('should not log non-standard platforms during `cordova platform add` (and derivates) calls', function() {\n            var platform_cmds = [\"platforms\", \"platform\"];\n            platform_cmds.forEach(function(platform) {\n                var result = sanitizeArgs.stringifyForGoogleAnalytics([\"cordova\", platform, \"add\", \"extraJunk\"]);\n                expect(result).toBeDefined();\n                expect(result.command).toBe(\"cordova:\" + platform);\n                expect(result.params).toBe(\"add\");\n                expect(result.params).not.toContain(\"extraJunk\");\n            });\n        });\n        it('should log standard platforms during `add` (and derivates) calls', function() {\n            var platform_cmds = [\"platforms\", \"platform\"];\n            var standard_platforms = [\"android\", \"ios\", \"wp8\", \"windows\"];\n            platform_cmds.forEach(function(cmd) {\n                standard_platforms.forEach(function(platform) {\n                    var result = sanitizeArgs.stringifyForGoogleAnalytics([cmd, \"add\", platform]);\n                    expect(result).toBeDefined();\n                    expect(result.command).toBe(cmd);\n                    expect(result.params).toContain(\"add\");\n                    expect(result.params).toContain(platform);\n                });\n            });\n        });\n        it('should log standard platforms during `cordova platform add` calls', function() {\n            var platform_cmds = [\"platforms\", \"platform\"];\n            var standard_platforms = [\"android\", \"ios\", \"wp8\", \"windows\"];\n            platform_cmds.forEach(function(cmd) {\n                standard_platforms.forEach(function(platform) {\n                    var result = sanitizeArgs.stringifyForGoogleAnalytics([\"cordova\", cmd, \"add\", platform]);\n                    expect(result).toBeDefined();\n                    expect(result.command).toBe(\"cordova:\" + cmd);\n                    expect(result.params).toContain(\"add\");\n                    expect(result.params).toContain(platform);\n                });\n            });\n        });\n        /*\n            plugin add, cordova plugin add\n            plugins add, cordova plugins add\n        */\n        it('should not log particular plugins during `add` calls', function() {\n            var plugin_cmds = [\"plugins\", \"plugin\"];\n            plugin_cmds.forEach(function(plugin) {\n                var result = sanitizeArgs.stringifyForGoogleAnalytics([plugin, \"add\", \"extraJunk\"]);\n                expect(result).toBeDefined();\n                expect(result.command).toBe(plugin);\n                expect(result.params).toBe(\"add\");\n                expect(result.params).not.toContain(\"extraJunk\");\n            });\n        });\n        it('should not log particular plugins during `cordova plugin add` calls', function() {\n            var plugin_cmds = [\"plugins\", \"plugin\"];\n            plugin_cmds.forEach(function(plugin) {\n                var result = sanitizeArgs.stringifyForGoogleAnalytics([\"cordova\", plugin, \"add\", \"extraJunk\"]);\n                expect(result).toBeDefined();\n                expect(result.command).toBe(\"cordova:\" + plugin);\n                expect(result.params).toBe(\"add\");\n                expect(result.params).not.toContain(\"extraJunk\");\n            });\n        });\n    });\n    describe('getCommand', function() {\n        it('should be able to handle zero arguments', function() {\n            var get_cmd = function() {\n                sanitizeArgs.getCommand([]);\n            };\n            expect(get_cmd).not.toThrow();\n        });\n        it('should return \"help\" by default if no arguments are given', function() {\n            expect(sanitizeArgs.getCommand([])).toEqual('help');\n        });\n    });\n    describe('filterParameters', function() {\n        it('should be able to handle zero arguments', function() {\n            var filter_cmd = function() {\n                sanitizeArgs.filterParameters([]);\n            };\n            expect(filter_cmd).not.toThrow();\n        });\n        it('should return an empty array by default if no arguments are given', function() {\n            expect(sanitizeArgs.filterParameters([])).toEqual([]);\n        });\n    });\n});\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/spec/cli/util/update-check.spec.js":"/*\n * Module dependencies.\n */\n\nvar updateCheck = require('../../../lib/cli/util/update-check'),\n    orig_env;\n\n/*\n * Specification: update checker\n */\n\nfunction trigger_cli() {\n    require('../../../lib/cli');\n}\n\ndescribe('update checker', function() {\n    beforeEach(function() {\n        // save process.env so that we can restore in afterEach()\n        orig_env = process.env;\n        // delete the cli module from require cache\n        // so we can exercise its update logic in each test case\n        // this only happens the first time the module gets required, thus why this exists.\n        delete require.cache[require.resolve('../../../lib/cli')];\n        spyOn(updateCheck, 'start');\n    });\n    afterEach(function() {\n        process.env = orig_env;\n    });\n\n    it('should check for an update when not running as electron', function() {\n        delete process.env.ELECTRON_RUN_AS_NODE;\n        trigger_cli();\n        expect(updateCheck.start).toHaveBeenCalled();\n    });\n    it('should NOT check for an update when running as electron', function() {\n        process.env.ELECTRON_RUN_AS_NODE = true;\n        trigger_cli();\n        expect(updateCheck.start).not.toHaveBeenCalled();\n    });\n});\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/spec/common/config/global.spec.js":"/*\n * Module dependencies.\n */\n\nvar config = require('../../../lib/common/config'),\n    shell = require('shelljs'),\n    path = require('path'),\n    fs = require('fs'),\n    data;\n\n/*\n * Specification for config.\n */\n\ndescribe('config.global', function() {\n    describe('config.global.path', function() {\n        it('should be a valid dirname', function() {\n            var dirname = path.dirname(config.global.path);\n            expect(fs.existsSync(dirname)).toBe(true);\n        });\n    });\n\n    describe('config.global.load(callback)', function() {\n        it('should require the callback function', function() {\n            expect(function() { config.global.load(); }).toThrow();\n        });\n\n        it('should try to find config file', function() {\n            spyOn(fs, 'exists');\n            config.global.load(function(e, data) {});\n            expect(fs.exists).toHaveBeenCalled();\n            expect(fs.exists.mostRecentCall.args[0]).toEqual(\n                path.join(config.global.path, 'config.json')\n            );\n        });\n\n        describe('successfully found config file', function() {\n            beforeEach(function() {\n                spyOn(fs, 'exists').andCallFake(function(filepath, callback) {\n                    callback(true);\n                });\n            });\n\n            it('should read config file', function() {\n                spyOn(fs, 'readFile');\n                config.global.load(function(e, data) {});\n                expect(fs.readFile).toHaveBeenCalled();\n                expect(fs.readFile.mostRecentCall.args[0]).toEqual(\n                    path.join(config.global.path, 'config.json')\n                );\n            });\n\n            describe('successfully read config file', function() {\n                beforeEach(function() {\n                    spyOn(fs, 'readFile').andCallFake(function(filepath, callback) {\n                        callback(null, '{ \"phonegap\" : { \"token\": \"abc123\" } }');\n                    });\n                });\n\n                it('should trigger callback without an error', function(done) {\n                    config.global.load(function(e, data) {\n                        expect(e).toBeNull();\n                        done();\n                    });\n                });\n\n                it('should trigger callback with config file object', function(done) {\n                    config.global.load(function(e, data) {\n                        expect(data).toEqual({ phonegap: { token: 'abc123' } });\n                        done();\n                    });\n                });\n            });\n\n            describe('failed reading config file', function() {\n                beforeEach(function() {\n                    spyOn(fs, 'readFile').andCallFake(function(filepath, callback) {\n                        callback(new Error('file does not exist'));\n                    });\n                });\n\n                it('should trigger callback with an error', function(done) {\n                    config.global.load(function(e, data) {\n                        expect(e).toEqual(jasmine.any(Error));\n                        done();\n                    });\n                });\n\n                it('should trigger callback without config file object', function(done) {\n                    config.global.load(function(e, data) {\n                        expect(data).not.toBeDefined();\n                        done();\n                    });\n                });\n            });\n        });\n\n        describe('config file missing', function() {\n            beforeEach(function() {\n                spyOn(fs, 'exists').andCallFake(function(filepath, callback) {\n                    callback(false);\n                });\n            });\n\n            it('should try to save a config file', function() {\n                spyOn(config.global, 'save');\n                config.global.load(function(e, data) {});\n                expect(config.global.save).toHaveBeenCalled();\n            });\n\n            describe('successfully save config file', function() {\n                beforeEach(function() {\n                    spyOn(config.global, 'save').andCallFake(function(data, callback) {\n                        callback(null);\n                    });\n                });\n\n                it('should save an empty object', function() {\n                    config.global.load(function(e, data) {});\n                    expect(config.global.save.mostRecentCall.args[0]).toEqual({ phonegap: {} });\n                });\n\n                it('should trigger callback without an error', function(done) {\n                    config.global.load(function(e, data) {\n                        expect(e).toBeNull();\n                        done();\n                    });\n                });\n\n                it('should trigger callback with config file object', function(done) {\n                    config.global.load(function(e, data) {\n                        expect(data).toEqual({ phonegap: {} });\n                        done();\n                    });\n                });\n            });\n\n            describe('failed to save config file', function() {\n                beforeEach(function() {\n                    spyOn(config.global, 'save').andCallFake(function(data, callback) {\n                        callback(new Error('no write access'));\n                    });\n                });\n\n                it('should trigger callback with an error', function(done) {\n                    config.global.load(function(e, data) {\n                        expect(e).toEqual(jasmine.any(Error));\n                        done();\n                    });\n                });\n\n                it('should trigger callback without config file object', function(done) {\n                    config.global.load(function(e, data) {\n                        expect(data).not.toBeDefined();\n                        done();\n                    });\n                });\n            });\n        });\n    });\n\n    describe('config.global.save(data, callback)', function() {\n        beforeEach(function() {\n            data = { phonegap: { token: 'abc123' } };\n            spyOn(shell, 'mkdir');\n            spyOn(fs, 'writeFile');\n        });\n\n        it('should require the data parameter', function() {\n            expect(function() { config.global.save(); }).toThrow();\n        });\n\n        it('should require the callback parameter', function() {\n            expect(function() { config.global.save(data); }).toThrow();\n        });\n\n        it('should recursively create directories', function() {\n            config.global.save(data, function(e) {});\n            expect(shell.mkdir).toHaveBeenCalled();\n            expect(shell.mkdir.mostRecentCall.args[0]).toEqual('-p');\n        });\n\n        it('should try to write', function() {\n            config.global.save(data, function(e) {});\n            expect(fs.writeFile).toHaveBeenCalled();\n            expect(fs.writeFile.mostRecentCall.args[0]).toEqual(\n                path.join(config.global.path, 'config.json')\n            );\n        });\n\n        describe('successful write', function() {\n            beforeEach(function() {\n                fs.writeFile.andCallFake(function(filepath, data, callback) {\n                    callback(null);\n                });\n            });\n\n            it('should write to the config file', function() {\n                config.global.save(data, function(e) {});\n                expect(fs.writeFile.mostRecentCall.args[0]).toEqual(\n                    path.join(config.global.path, 'config.json')\n                );\n            });\n\n            it('should write the json data', function(done) {\n                config.global.save({ phonegap: { token: 'def456', username: 'link' } }, function(e) {\n                    var data = JSON.parse(fs.writeFile.mostRecentCall.args[1]);\n                    expect(data).toEqual({ phonegap: { token: 'def456', username: 'link' } });\n                    done();\n                });\n            });\n\n            it('should trigger callback without an error', function(done) {\n                config.global.save({ phonegap: { token: 'def456' } }, function(e) {\n                    expect(e).toBeNull();\n                    done();\n                });\n            });\n        });\n\n        describe('failed write', function() {\n            beforeEach(function() {\n                fs.writeFile.andCallFake(function(filepath, data, callback) {\n                    callback(new Error('no write access'));\n                });\n            });\n\n            it('should trigger callback with an error', function(done) {\n                config.global.save({ phonegap: { token: 'def456' } }, function(e) {\n                    expect(e).toEqual(jasmine.any(Error));\n                    done();\n                });\n            });\n        });\n    });\n});\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/spec/common/config/local.spec.js":"/*\n * Module dependencies.\n */\n\nvar config = require('../../../lib/common/config'),\n    path = require('path'),\n    fs = require('fs');\n\n/**\n * Specification for local configuration file.\n */\n\ndescribe('config.local', function() {\n    describe('config.local.load(callback)', function() {\n        beforeEach(function() {\n            spyOn(fs, 'readFile');\n        });\n\n        it('should require the callback parameter', function() {\n            expect(function() {\n                config.local.load();\n            }).toThrow();\n        });\n\n        it('should try to read the configuration file', function() {\n            config.local.load(function(e, data) {});\n            expect(fs.readFile).toHaveBeenCalled();\n            expect(fs.readFile.mostRecentCall.args[0]).toEqual(\n                path.join(process.cwd(), '.cordova', 'config.json')\n            );\n        });\n\n        describe('successfully read configuration file', function() {\n            beforeEach(function() {\n                fs.readFile.andCallFake(function(path, callback) {\n                    callback(null, '{}');\n                });\n            });\n\n            it('should trigger callback without an error', function(done) {\n                config.local.load(function(e, data) {\n                    expect(e).toBeNull();\n                    done();\n                });\n            });\n\n            it('should trigger callback with data', function(done) {\n                config.local.load(function(e, data) {\n                    expect(data).toEqual(jasmine.any(Object));\n                    done();\n                });\n            });\n        });\n\n        describe('failed to read configuration file', function() {\n            beforeEach(function() {\n                fs.readFile.andCallFake(function(path, callback) {\n                    callback(new Error('file not found'));\n                });\n            });\n\n            it('should trigger callback without an error', function(done) {\n                config.local.load(function(e, data) {\n                    expect(e).not.toEqual(jasmine.any(Error));\n                    done();\n                });\n            });\n\n            it('should trigger callback with default data', function(done) {\n                config.local.load(function(e, data) {\n                    expect(data).toEqual({});\n                    done();\n                });\n            });\n        });\n    });\n\n    describe('config.local.save(data, callback)', function() {\n        var data;\n\n        beforeEach(function() {\n            data = {\n                id: 'io.cordova.hellocordova',\n                name: 'HelloCordova'\n            };\n            spyOn(fs, 'writeFile');\n        });\n\n        it('should require the data parameter', function() {\n            expect(function() {\n                config.local.save();\n            }).toThrow();\n        });\n\n        it('should require the callback parameter', function() {\n            expect(function() {\n                config.local.save({});\n            }).toThrow();\n        });\n\n        it('should try to write the data to the file', function() {\n            config.local.save(data, function(e) {});\n            expect(fs.writeFile).toHaveBeenCalled();\n            expect(fs.writeFile.mostRecentCall.args[1]).toEqual(JSON.stringify(data));\n        });\n\n        describe('successful file write', function() {\n            beforeEach(function() {\n                fs.writeFile.andCallFake(function(filepath, data, callback) {\n                    callback(null);\n                });\n            });\n\n            it('should trigger callback without an error', function(done) {\n                config.local.save(data, function(e) {\n                    expect(e).toBeNull();\n                    done();\n                });\n            });\n        });\n\n        describe('failed file write', function() {\n            beforeEach(function() {\n                fs.writeFile.andCallFake(function(filepath, data, callback) {\n                    callback(new Error('permission denied'));\n                });\n            });\n\n            it('should trigger callback with an error', function(done) {\n                config.local.save(data, function(e) {\n                    expect(e).toEqual(jasmine.any(Error));\n                    done();\n                });\n            });\n        });\n    });\n});\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/spec/phonegap/util/network.spec.js":"/*!\n * Module dependencies.\n */\n\nvar network = require('../../../lib/phonegap/util/network'),\n    dns = require('dns');\n\n/*!\n * Specification: Network Connectivity.\n */\n\ndescribe('network', function() {\n    describe('.isOnline(callback)', function() {\n        beforeEach(function() {\n            spyOn(dns, 'lookup');\n        });\n\n        describe('when online', function() {\n            beforeEach(function() {\n                dns.lookup.andCallFake(function(host, callback) {\n                    callback(null);\n                });\n            });\n\n            it('should return true', function(done) {\n                network.isOnline(function(online) {\n                    expect(online).toEqual(true);\n                    done();\n                });\n            });\n        });\n\n        describe('when offline', function() {\n            beforeEach(function() {\n                dns.lookup.andCallFake(function(host, callback) {\n                    var e = new Error('getaddrinfo ENOTFOUND google.com');\n                    e.code = 'ENOTFOUND';\n                    callback(e);\n                });\n            });\n\n            it('should return false', function(done) {\n                network.isOnline(function(online) {\n                    expect(online).toEqual(false);\n                    done();\n                });\n            });\n        });\n    });\n});\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/spec/phonegap/util/platform.spec.js":"/*!\n * Module dependencies.\n */\n\nvar platform = require('../../../lib/phonegap/util/platform'),\n    platforms;\n\n/*!\n * Specification: Platform Operations\n */\n\ndescribe('platform', function() {\n    describe('platform.names(platforms)', function() {\n        describe('when platforms is undefined', function() {\n            beforeEach(function() {\n                platforms = undefined;\n            });\n\n            it('should return an empty array', function() {\n                expect(platform.names(platforms)).toEqual([]);\n            });\n        });\n\n        describe('when platforms is null', function() {\n            beforeEach(function() {\n                platforms = null;\n            });\n\n            it('should return an empty array', function() {\n                expect(platform.names(platforms)).toEqual([]);\n            });\n        });\n\n        describe('when platforms is an empty array', function() {\n            beforeEach(function() {\n                platforms = [];\n            });\n\n            it('should return an empty array', function() {\n                expect(platform.names(platforms)).toEqual([]);\n            });\n        });\n\n        describe('when platforms is defined', function() {\n            beforeEach(function() {\n                platforms = ['android', 'blackberry', 'ios'];\n            });\n\n            it('should return an array of the same length', function() {\n                expect(platform.names(platforms).length).toEqual(platforms.length);\n            });\n\n            describe('each element', function() {\n                it('should have a local, remote, and human keys', function() {\n                    platforms = platform.names(platforms);\n                    platforms.forEach(function(platform) {\n                        expect(platform).toEqual({\n                            local: jasmine.any(String),\n                            remote: jasmine.any(String),\n                            human: jasmine.any(String)\n                        });\n                    });\n                });\n            });\n\n            describe('unsupport element', function() {\n                beforeEach(function() {\n                    platforms = ['android', 'unsupported'];\n                });\n\n                // TODO - rethink how to handle unsupported platforms\n                it('should be ignored', function() {\n                    platforms = platform.names(platforms);\n                    expect(platforms.length).toEqual(1);\n                    expect(platforms[0].local).toEqual('android');\n                });\n            });\n        });\n    });\n\n    describe('supports', function() {\n        beforeEach(function() {\n            platforms = [ 'android', 'ios' , 'blackberry10' ];\n        });\n\n\n        it('should return the same array when called with valid platforms', function () {\n            var result = platform.supports(platforms);\n\n            expect(result.length).toEqual(platforms.length);\n            expect(result).toEqual(platforms);\n        });\n\n\n        it('should return an empty array when called with invalid platforms', function () {\n            var result = platform.supports(['none','are','platforms']);\n\n            expect(result.length).toEqual(0);\n            expect(result).toEqual([]);\n        });\n\n\n        it('should return only the valid platforms when called with an invalid platform', function () {\n            var result;\n\n            platforms.push('notaplatform');\n            result = platform.supports(platforms);\n            expect(result).toEqual(platforms.slice(0,3));\n        });\n    });\n});\n","/home/travis/build/npmtest/node-npmtest-phonegap/node_modules/phonegap/spec/phonegap/util/project.spec.js":"/*!\n * Module dependencies.\n */\n\nvar project = require('../../../lib/phonegap/util/project'),\n    cdvutil = require('../../../lib/cordova').util,\n    events = require('events'),\n    chdir = require('chdir'),\n    path = require('path'),\n    currentPath,\n    projectPath,\n    delegate;\n\n/*!\n * Specification: Project Operations\n */\n\ndescribe('project', function() {\n    describe('project.cd(delegate)', function() {\n        beforeEach(function() {\n            currentPath = process.cwd();\n            projectPath = currentPath;\n            delegate = {\n                emitter: new events.EventEmitter(),\n                callback: function(e) {}\n            };\n            delegate.emitter.on('error', function(e) {});  // required error catcher\n        });\n\n        describe('when in project path', function() {\n            beforeEach(function() {\n                spyOn(cdvutil, 'isCordova').andCallFake(function(_path) {\n                    return true;\n                });\n            });\n\n            it('should return the path', function() {\n                expect(project.cd(delegate)).toEqual(projectPath);\n            });\n        });\n\n        describe('when in a subdirectory of the project path', function() {\n            beforeEach(function() {\n                currentPath = path.join(projectPath, 'lib', 'phonegap');\n                spyOn(cdvutil, 'isCordova').andCallFake(function(_path) {\n                    return _path === projectPath;\n                });\n            });\n\n            it('should return the path', function() {\n                chdir(currentPath, function() {\n                    expect(project.cd(delegate)).toEqual(projectPath);\n                });\n            });\n        });\n\n        describe('when not in a project', function() {\n            beforeEach(function() {\n                currentPath = path.join(projectPath, '..');\n            });\n\n            it('should return null', function() {\n                chdir(currentPath, function() {\n                    expect(project.cd(delegate)).toBeNull();\n                });\n            });\n\n            it('should ignore home directory .cordova/', function() {\n                spyOn(project, 'isHome').andReturn(true);\n                chdir(currentPath, function() {\n                    expect(project.cd(delegate)).toBeNull();\n                });\n            });\n\n            it('should fire delegate \"error\" event', function(done) {\n                delegate.emitter.on('error', function(e) {\n                    expect(e).toEqual(jasmine.any(Error));\n                    done();\n                });\n                chdir(currentPath, function() {\n                    project.cd(delegate);\n                });\n            });\n\n            it('should trigger delegate callback with error', function() {\n                spyOn(delegate, 'callback');\n                chdir(currentPath, function() {\n                    project.cd(delegate);\n                    expect(delegate.callback).toHaveBeenCalledWith(\n                        jasmine.any(Error)\n                    );\n                });\n            });\n        });\n    });\n\n    describe('listPlatforms', function () {\n        var exampleOut = ['platformA', 'platformB'];\n\n\n        beforeEach(function() {\n            spyOn(cdvutil, 'listPlatforms').andCallFake(function() {\n                return exampleOut;\n            });\n        });\n\n        it('should be defined', function() {\n            expect(project.listPlatforms).toBeDefined();\n        });\n\n        it('should pass the results of the cordova-lib utility', function () {\n            var ret = project.listPlatforms();\n            expect(ret).toEqual(exampleOut);\n        });\n\n        describe('checkPlatform', function () {\n            it('should be defined', function() {\n                expect(project.checkPlatform).toBeDefined();\n            });\n            it('should return true if the platform is installed', function () {\n                var platform = exampleOut[0];\n                expect(project.checkPlatform(platform)).toBe(true);\n            });\n            it('should return false if the platform is not found', function () {\n                var platform = \"IMadeThisUp\";\n                expect(project.checkPlatform(platform)).toBe(false);\n            });\n        });\n    });\n\n\n    describe('readPackage', function () {\n        beforeEach(function() {\n            packagepath = path.join(__dirname, '..', '..', '..', 'package.json');\n            spyOn(JSON,'parse').andReturn({});\n        });\n\n        it('should be defined', function() {\n            expect(project.readPackage).toEqual(jasmine.any(Function));\n        });\n\n        it('should return the package.json contents', function() {\n            expect(project.readPackage()).toEqual({});\n        });\n    });\n});\n"}